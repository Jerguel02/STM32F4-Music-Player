
TUT_F4_AUDIO_I2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001172c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  080118cc  080118cc  000218cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f58  08011f58  000300b8  2**0
                  CONTENTS
  4 .ARM          00000008  08011f58  08011f58  00021f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f60  08011f60  000300b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f60  08011f60  00021f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f64  08011f64  00021f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08011f68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002554  200000b8  08012020  000300b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000260c  08012020  0003260c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022521  00000000  00000000  0003012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ba1  00000000  00000000  0005264c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  000581f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001263  00000000  00000000  00059a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cfaa  00000000  00000000  0005ac63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002725b  00000000  00000000  00077c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091dc1  00000000  00000000  0009ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000671c  00000000  00000000  00130c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00137348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080118b4 	.word	0x080118b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	080118b4 	.word	0x080118b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	603a      	str	r2, [r7, #0]
 8000596:	80fb      	strh	r3, [r7, #6]
 8000598:	460b      	mov	r3, r1
 800059a:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6839      	ldr	r1, [r7, #0]
 80005a4:	481c      	ldr	r0, [pc, #112]	; (8000618 <AUDIO_OUT_Init+0x8c>)
 80005a6:	f000 f8f9 	bl	800079c <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <AUDIO_OUT_Init+0x8c>)
 80005ac:	4a1b      	ldr	r2, [pc, #108]	; (800061c <AUDIO_OUT_Init+0x90>)
 80005ae:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80005b0:	4819      	ldr	r0, [pc, #100]	; (8000618 <AUDIO_OUT_Init+0x8c>)
 80005b2:	f006 fa41 	bl	8006a38 <HAL_I2S_GetState>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d103      	bne.n	80005c4 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80005bc:	2100      	movs	r1, #0
 80005be:	4816      	ldr	r0, [pc, #88]	; (8000618 <AUDIO_OUT_Init+0x8c>)
 80005c0:	f000 f94a 	bl	8000858 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80005c4:	6838      	ldr	r0, [r7, #0]
 80005c6:	f000 fa0f 	bl	80009e8 <I2S3_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d10e      	bne.n	80005f8 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <AUDIO_OUT_Init+0x94>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	2094      	movs	r0, #148	; 0x94
 80005e0:	4798      	blx	r3
 80005e2:	4603      	mov	r3, r0
 80005e4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80005e8:	2be0      	cmp	r3, #224	; 0xe0
 80005ea:	d103      	bne.n	80005f4 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <AUDIO_OUT_Init+0x98>)
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <AUDIO_OUT_Init+0x94>)
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	e001      	b.n	80005f8 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d107      	bne.n	800060e <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <AUDIO_OUT_Init+0x98>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	681c      	ldr	r4, [r3, #0]
 8000604:	797a      	ldrb	r2, [r7, #5]
 8000606:	88f9      	ldrh	r1, [r7, #6]
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	2094      	movs	r0, #148	; 0x94
 800060c:	47a0      	blx	r4
  }
  
  return ret;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	200000d8 	.word	0x200000d8
 800061c:	40003c00 	.word	0x40003c00
 8000620:	20000004 	.word	0x20000004
 8000624:	200000d4 	.word	0x200000d4

08000628 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <AUDIO_OUT_Play+0x4c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	b292      	uxth	r2, r2
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	2094      	movs	r0, #148	; 0x94
 8000640:	4798      	blx	r3
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000648:	2301      	movs	r3, #1
 800064a:	e00f      	b.n	800066c <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000652:	d203      	bcs.n	800065c <AUDIO_OUT_Play+0x34>
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	085b      	lsrs	r3, r3, #1
 8000658:	b29b      	uxth	r3, r3
 800065a:	e001      	b.n	8000660 <AUDIO_OUT_Play+0x38>
 800065c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000660:	461a      	mov	r2, r3
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <AUDIO_OUT_Play+0x50>)
 8000666:	f005 fe65 	bl	8006334 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800066a:	2300      	movs	r3, #0
  }
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000d4 	.word	0x200000d4
 8000678:	200000d8 	.word	0x200000d8

0800067c <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <AUDIO_OUT_Pause+0x24>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	2094      	movs	r0, #148	; 0x94
 8000688:	4798      	blx	r3
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	e003      	b.n	800069c <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <AUDIO_OUT_Pause+0x28>)
 8000696:	f005 fef5 	bl	8006484 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800069a:	2300      	movs	r3, #0
  }
}
 800069c:	4618      	mov	r0, r3
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000d4 	.word	0x200000d4
 80006a4:	200000d8 	.word	0x200000d8

080006a8 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <AUDIO_OUT_Resume+0x24>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	2094      	movs	r0, #148	; 0x94
 80006b4:	4798      	blx	r3
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	e003      	b.n	80006c8 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <AUDIO_OUT_Resume+0x28>)
 80006c2:	f005 ff41 	bl	8006548 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006c6:	2300      	movs	r3, #0
  }
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200000d4 	.word	0x200000d4
 80006d0:	200000d8 	.word	0x200000d8

080006d4 <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 80006dc:	480e      	ldr	r0, [pc, #56]	; (8000718 <AUDIO_OUT_Stop+0x44>)
 80006de:	f005 ffc7 	bl	8006670 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <AUDIO_OUT_Stop+0x48>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	2094      	movs	r0, #148	; 0x94
 80006ec:	4798      	blx	r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 80006f4:	2301      	movs	r3, #1
 80006f6:	e00b      	b.n	8000710 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d107      	bne.n	800070e <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f002 f87a 	bl	80027f8 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2110      	movs	r1, #16
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <AUDIO_OUT_Stop+0x4c>)
 800070a:	f003 f873 	bl	80037f4 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800070e:	2300      	movs	r3, #0
  }
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000d8 	.word	0x200000d8
 800071c:	200000d4 	.word	0x200000d4
 8000720:	40020c00 	.word	0x40020c00

08000724 <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <AUDIO_OUT_SetVolume+0x2c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	4611      	mov	r1, r2
 8000738:	2094      	movs	r0, #148	; 0x94
 800073a:	4798      	blx	r3
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e000      	b.n	8000748 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000746:	2300      	movs	r3, #0
  }
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000d4 	.word	0x200000d4

08000754 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <HAL_I2S_TxCpltCallback+0x20>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d101      	bne.n	800076a <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 8000766:	f001 ff83 	bl	8002670 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40003c00 	.word	0x40003c00

08000778 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d101      	bne.n	800078e <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 800078a:	f001 ff85 	bl	8002698 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40003c00 	.word	0x40003c00

0800079c <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007ae:	23ff      	movs	r3, #255	; 0xff
 80007b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  
  for(index = 0; index < 8; index++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007ba:	e010      	b.n	80007de <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80007bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <AUDIO_OUT_ClockConfig+0xb0>)
 80007c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d103      	bne.n	80007d4 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80007cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for(index = 0; index < 8; index++)
 80007d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007d8:	3301      	adds	r3, #1
 80007da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007e2:	2b07      	cmp	r3, #7
 80007e4:	d9ea      	bls.n	80007bc <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4618      	mov	r0, r3
 80007ec:	f007 fa8a 	bl	8007d04 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 80007f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d115      	bne.n	8000828 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007fc:	2301      	movs	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000800:	2308      	movs	r3, #8
 8000802:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000804:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000808:	4a11      	ldr	r2, [pc, #68]	; (8000850 <AUDIO_OUT_ClockConfig+0xb4>)
 800080a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080e:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000810:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000814:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <AUDIO_OUT_ClockConfig+0xb8>)
 8000816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081a:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4618      	mov	r0, r3
 8000822:	f007 f97f 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000826:	e00d      	b.n	8000844 <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000828:	2301      	movs	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 800082c:	2308      	movs	r3, #8
 800082e:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000830:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000834:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000836:	2303      	movs	r3, #3
 8000838:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4618      	mov	r0, r3
 8000840:	f007 f970 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
}
 8000844:	bf00      	nop
 8000846:	3730      	adds	r7, #48	; 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	08011a50 	.word	0x08011a50
 8000850:	08011a70 	.word	0x08011a70
 8000854:	08011a90 	.word	0x08011a90

08000858 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	4b56      	ldr	r3, [pc, #344]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a55      	ldr	r2, [pc, #340]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 800086c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b53      	ldr	r3, [pc, #332]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	4b4f      	ldr	r3, [pc, #316]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a4e      	ldr	r2, [pc, #312]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b4c      	ldr	r3, [pc, #304]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b48      	ldr	r3, [pc, #288]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a47      	ldr	r2, [pc, #284]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b45      	ldr	r3, [pc, #276]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80008b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80008c8:	2306      	movs	r3, #6
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	483c      	ldr	r0, [pc, #240]	; (80009c4 <AUDIO_OUT_MspInit+0x16c>)
 80008d4:	f002 fd26 	bl	8003324 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80008d8:	2310      	movs	r3, #16
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4839      	ldr	r0, [pc, #228]	; (80009c8 <AUDIO_OUT_MspInit+0x170>)
 80008e4:	f002 fd1e 	bl	8003324 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	4a33      	ldr	r2, [pc, #204]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6313      	str	r3, [r2, #48]	; 0x30
 80008f8:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	482d      	ldr	r0, [pc, #180]	; (80009c4 <AUDIO_OUT_MspInit+0x16c>)
 8000910:	f002 fd08 	bl	8003324 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 800091e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000922:	6313      	str	r3, [r2, #48]	; 0x30
 8000924:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <AUDIO_OUT_MspInit+0x168>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a25      	ldr	r2, [pc, #148]	; (80009cc <AUDIO_OUT_MspInit+0x174>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d136      	bne.n	80009a8 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 8000942:	2240      	movs	r2, #64	; 0x40
 8000944:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000946:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 800094e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000952:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 8000956:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800095a:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 800095e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000962:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 800096c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000970:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 8000974:	2204      	movs	r2, #4
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 800097a:	2203      	movs	r2, #3
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 8000980:	2200      	movs	r2, #0
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 800098c:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <AUDIO_OUT_MspInit+0x17c>)
 800098e:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 8000994:	639a      	str	r2, [r3, #56]	; 0x38
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 800099e:	f002 f90f 	bl	8002bc0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <AUDIO_OUT_MspInit+0x178>)
 80009a4:	f002 f85e 	bl	8002a64 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	210e      	movs	r1, #14
 80009ac:	202f      	movs	r0, #47	; 0x2f
 80009ae:	f002 f822 	bl	80029f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80009b2:	202f      	movs	r0, #47	; 0x2f
 80009b4:	f002 f83b 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 80009b8:	bf00      	nop
 80009ba:	3730      	adds	r7, #48	; 0x30
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40003c00 	.word	0x40003c00
 80009d0:	20000120 	.word	0x20000120
 80009d4:	400260b8 	.word	0x400260b8

080009d8 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <I2S3_Init+0x68>)
 80009f2:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <I2S3_Init+0x6c>)
 80009f4:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <I2S3_Init+0x68>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	69da      	ldr	r2, [r3, #28]
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <I2S3_Init+0x68>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a04:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <I2S3_Init+0x68>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <I2S3_Init+0x68>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <I2S3_Init+0x68>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <I2S3_Init+0x68>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <I2S3_Init+0x68>)
 8000a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a24:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <I2S3_Init+0x68>)
 8000a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2c:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <I2S3_Init+0x68>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <I2S3_Init+0x68>)
 8000a36:	f005 fb3d 	bl	80060b4 <HAL_I2S_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000a44:	2300      	movs	r3, #0
  }
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000d8 	.word	0x200000d8
 8000a54:	40003c00 	.word	0x40003c00

08000a58 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_I2S_ErrorCallback+0x20>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000a6a:	f7ff ffb5 	bl	80009d8 <AUDIO_OUT_Error_CallBack>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40003c00 	.word	0x40003c00

08000a7c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000a80:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <I2Cx_Init+0x58>)
 8000a82:	f004 ffad 	bl	80059e0 <HAL_I2C_GetState>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d121      	bne.n	8000ad0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <I2Cx_Init+0x58>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <I2Cx_Init+0x5c>)
 8000a90:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <I2Cx_Init+0x58>)
 8000a94:	2243      	movs	r2, #67	; 0x43
 8000a96:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <I2Cx_Init+0x58>)
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <I2Cx_Init+0x60>)
 8000a9c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <I2Cx_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <I2Cx_Init+0x58>)
 8000aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aaa:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <I2Cx_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <I2Cx_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <I2Cx_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <I2Cx_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <I2Cx_Init+0x58>)
 8000ac6:	f000 f86b 	bl	8000ba0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000aca:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <I2Cx_Init+0x58>)
 8000acc:	f004 faf4 	bl	80050b8 <HAL_I2C_Init>
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000180 	.word	0x20000180
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	000186a0 	.word	0x000186a0

08000ae0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af04      	add	r7, sp, #16
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	460b      	mov	r3, r1
 8000aec:	717b      	strb	r3, [r7, #5]
 8000aee:	4613      	mov	r3, r2
 8000af0:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000af6:	797b      	ldrb	r3, [r7, #5]
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <I2Cx_WriteData+0x48>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	88f9      	ldrh	r1, [r7, #6]
 8000b00:	9302      	str	r3, [sp, #8]
 8000b02:	2301      	movs	r3, #1
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <I2Cx_WriteData+0x4c>)
 8000b0e:	f004 fc47 	bl	80053a0 <HAL_I2C_Mem_Write>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b1c:	f000 f834 	bl	8000b88 <I2Cx_Error>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000180 	.word	0x20000180

08000b30 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	80fb      	strh	r3, [r7, #6]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000b48:	797b      	ldrb	r3, [r7, #5]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <I2Cx_ReadData+0x50>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	88f9      	ldrh	r1, [r7, #6]
 8000b52:	9302      	str	r3, [sp, #8]
 8000b54:	2301      	movs	r3, #1
 8000b56:	9301      	str	r3, [sp, #4]
 8000b58:	f107 030e 	add.w	r3, r7, #14
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <I2Cx_ReadData+0x54>)
 8000b62:	f004 fd17 	bl	8005594 <HAL_I2C_Mem_Read>
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b70:	f000 f80a 	bl	8000b88 <I2Cx_Error>
  }
  return value;
 8000b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000180 	.word	0x20000180

08000b88 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <I2Cx_Error+0x14>)
 8000b8e:	f004 fbd7 	bl	8005340 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000b92:	f7ff ff73 	bl	8000a7c <I2Cx_Init>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000180 	.word	0x20000180

08000ba0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <I2Cx_MspInit+0xa4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a24      	ldr	r2, [pc, #144]	; (8000c44 <I2Cx_MspInit+0xa4>)
 8000bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <I2Cx_MspInit+0xa4>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <I2Cx_MspInit+0xa4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <I2Cx_MspInit+0xa4>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <I2Cx_MspInit+0xa4>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000be0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000be6:	2312      	movs	r3, #18
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4812      	ldr	r0, [pc, #72]	; (8000c48 <I2Cx_MspInit+0xa8>)
 8000bfe:	f002 fb91 	bl	8003324 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <I2Cx_MspInit+0xa4>)
 8000c04:	6a1b      	ldr	r3, [r3, #32]
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <I2Cx_MspInit+0xa4>)
 8000c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <I2Cx_MspInit+0xa4>)
 8000c10:	6a1b      	ldr	r3, [r3, #32]
 8000c12:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <I2Cx_MspInit+0xa4>)
 8000c14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c18:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	201f      	movs	r0, #31
 8000c20:	f001 fee9 	bl	80029f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000c24:	201f      	movs	r0, #31
 8000c26:	f001 ff02 	bl	8002a2e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	210f      	movs	r1, #15
 8000c2e:	2020      	movs	r0, #32
 8000c30:	f001 fee1 	bl	80029f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000c34:	2020      	movs	r0, #32
 8000c36:	f001 fefa 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020400 	.word	0x40020400

08000c4c <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <AUDIO_IO_Init+0x68>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <AUDIO_IO_Init+0x68>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <AUDIO_IO_Init+0x68>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000c6e:	2310      	movs	r3, #16
 8000c70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c76:	2302      	movs	r3, #2
 8000c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <AUDIO_IO_Init+0x6c>)
 8000c84:	f002 fb4e 	bl	8003324 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000c88:	f7ff fef8 	bl	8000a7c <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <AUDIO_IO_Init+0x6c>)
 8000c92:	f002 fdaf 	bl	80037f4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c96:	2005      	movs	r0, #5
 8000c98:	f001 fdae 	bl	80027f8 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <AUDIO_IO_Init+0x6c>)
 8000ca2:	f002 fda7 	bl	80037f4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000ca6:	2005      	movs	r0, #5
 8000ca8:	f001 fda6 	bl	80027f8 <HAL_Delay>
}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	71bb      	strb	r3, [r7, #6]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	797a      	ldrb	r2, [r7, #5]
 8000ce2:	79b9      	ldrb	r1, [r7, #6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fefb 	bl	8000ae0 <I2Cx_WriteData>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	460a      	mov	r2, r1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	79ba      	ldrb	r2, [r7, #6]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff10 	bl	8000b30 <I2Cx_ReadData>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0d6      	sub	sp, #344	; 0x158
 8000d20:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	4945      	ldr	r1, [pc, #276]	; (8000e40 <AUDIO_StorageParse+0x124>)
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f00f fba5 	bl	801047c <f_opendir>
 8000d32:	4603      	mov	r3, r0
 8000d34:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000d38:	4b42      	ldr	r3, [pc, #264]	; (8000e44 <AUDIO_StorageParse+0x128>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000d40:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d16b      	bne.n	8000e20 <AUDIO_StorageParse+0x104>
  {
    while(Appli_state == APPLICATION_READY)
 8000d48:	e066      	b.n	8000e18 <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 8000d4a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f00f fc2b 	bl	80105ae <f_readdir>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000d5e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d15c      	bne.n	8000e20 <AUDIO_StorageParse+0x104>
 8000d66:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d6e:	7d9b      	ldrb	r3, [r3, #22]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d055      	beq.n	8000e20 <AUDIO_StorageParse+0x104>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000d74:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d78:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d7c:	7d9b      	ldrb	r3, [r3, #22]
 8000d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8000d80:	d100      	bne.n	8000d84 <AUDIO_StorageParse+0x68>
      {
        continue;
 8000d82:	e049      	b.n	8000e18 <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 8000d84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d88:	3316      	adds	r3, #22
 8000d8a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000d8e:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <AUDIO_StorageParse+0x128>)
 8000d90:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d94:	2b17      	cmp	r3, #23
 8000d96:	d83f      	bhi.n	8000e18 <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000d98:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000da0:	7a1b      	ldrb	r3, [r3, #8]
 8000da2:	f003 0310 	and.w	r3, r3, #16
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d136      	bne.n	8000e18 <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000daa:	4927      	ldr	r1, [pc, #156]	; (8000e48 <AUDIO_StorageParse+0x12c>)
 8000dac:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000db0:	f010 f99a 	bl	80110e8 <strstr>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d107      	bne.n	8000dca <AUDIO_StorageParse+0xae>
 8000dba:	4924      	ldr	r1, [pc, #144]	; (8000e4c <AUDIO_StorageParse+0x130>)
 8000dbc:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000dc0:	f010 f992 	bl	80110e8 <strstr>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d026      	beq.n	8000e18 <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <AUDIO_StorageParse+0x128>)
 8000dcc:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <AUDIO_StorageParse+0x128>)
 8000dde:	4413      	add	r3, r2
 8000de0:	3301      	adds	r3, #1
 8000de2:	2228      	movs	r2, #40	; 0x28
 8000de4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000de8:	4618      	mov	r0, r3
 8000dea:	f010 f96a 	bl	80110c2 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <AUDIO_StorageParse+0x128>)
 8000df0:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000df4:	461a      	mov	r2, r3
 8000df6:	4913      	ldr	r1, [pc, #76]	; (8000e44 <AUDIO_StorageParse+0x128>)
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	4413      	add	r3, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <AUDIO_StorageParse+0x128>)
 8000e0a:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <AUDIO_StorageParse+0x128>)
 8000e14:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <AUDIO_StorageParse+0x134>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d094      	beq.n	8000d4a <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <AUDIO_StorageParse+0x128>)
 8000e22:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <AUDIO_StorageParse+0x138>)
 8000e28:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f00f fb98 	bl	8010562 <f_closedir>
  return res;
 8000e32:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20001978 	.word	0x20001978
 8000e44:	20001338 	.word	0x20001338
 8000e48:	080118cc 	.word	0x080118cc
 8000e4c:	080118d0 	.word	0x080118d0
 8000e50:	200021bc 	.word	0x200021bc
 8000e54:	200001d6 	.word	0x200001d6

08000e58 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK)
 8000e5c:	f7ff ff5e 	bl	8000d1c <AUDIO_StorageParse>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d102      	bne.n	8000e6c <AUDIO_GetWavObjectNumber+0x14>
		return NumObs;
 8000e66:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <AUDIO_GetWavObjectNumber+0x18>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	e7ff      	b.n	8000e6c <AUDIO_GetWavObjectNumber+0x14>
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200001d6 	.word	0x200001d6

08000e74 <Mount_USB>:

void Mount_USB (void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4905      	ldr	r1, [pc, #20]	; (8000e90 <Mount_USB+0x1c>)
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <Mount_USB+0x20>)
 8000e7e:	f00e fd09 	bl	800f894 <f_mount>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <Mount_USB+0x24>)
 8000e88:	701a      	strb	r2, [r3, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20001978 	.word	0x20001978
 8000e94:	2000197c 	.word	0x2000197c
 8000e98:	200001d4 	.word	0x200001d4

08000e9c <UART_SendString>:
#include "HAL_ESP8266.h"

void UART_SendString(const char* str) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff f99b 	bl	80001e0 <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <UART_SendString+0x28>)
 8000eb6:	f007 f814 	bl	8007ee2 <HAL_UART_Transmit>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200002d8 	.word	0x200002d8

08000ec8 <UART_ReceiveString>:
void UART_ReceiveString(char* buffer, uint16_t buffer_size, uint32_t timeout) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	817b      	strh	r3, [r7, #10]
    HAL_UART_Receive(&huart2, (uint8_t*)buffer, buffer_size, timeout);
 8000ed6:	897a      	ldrh	r2, [r7, #10]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <UART_ReceiveString+0x24>)
 8000ede:	f007 f892 	bl	8008006 <HAL_UART_Receive>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200002d8 	.word	0x200002d8

08000ef0 <GPIO_Init>:
void GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <GPIO_Init+0x60>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <GPIO_Init+0x60>)
 8000f0e:	f043 0308 	orr.w	r3, r3, #8
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <GPIO_Init+0x60>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	f003 0308 	and.w	r3, r3, #8
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	683b      	ldr	r3, [r7, #0]


  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000f26:	480b      	ldr	r0, [pc, #44]	; (8000f54 <GPIO_Init+0x64>)
 8000f28:	f002 fc64 	bl	80037f4 <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000f2c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000f30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f36:	2302      	movs	r3, #2
 8000f38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4804      	ldr	r0, [pc, #16]	; (8000f54 <GPIO_Init+0x64>)
 8000f44:	f002 f9ee 	bl	8003324 <HAL_GPIO_Init>


}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020c00 	.word	0x40020c00

08000f58 <UART2_Init>:
void UART2_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <UART2_Init+0x44>)
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <UART2_Init+0x48>)
 8000f60:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <UART2_Init+0x44>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <UART2_Init+0x44>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <UART2_Init+0x44>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <UART2_Init+0x44>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <UART2_Init+0x44>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <UART2_Init+0x44>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]

	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <UART2_Init+0x44>)
 8000f8a:	f006 ff5d 	bl	8007e48 <HAL_UART_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <UART2_Init+0x40>
	        Error_Handler();
 8000f94:	f000 ff96 	bl	8001ec4 <Error_Handler>
	 }
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200002d8 	.word	0x200002d8
 8000fa0:	40004400 	.word	0x40004400

08000fa4 <esp8266_init>:
char esp8266_init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0ba      	sub	sp, #232	; 0xe8
 8000fa8:	af00      	add	r7, sp, #0
	char result[20];
	UART2_Init();
 8000faa:	f7ff ffd5 	bl	8000f58 <UART2_Init>
	char response[100];
	char ip[110];
	UART_SendString("AT+RST\r\n");
 8000fae:	4864      	ldr	r0, [pc, #400]	; (8001140 <esp8266_init+0x19c>)
 8000fb0:	f7ff ff74 	bl	8000e9c <UART_SendString>
	HAL_Delay(3000);
 8000fb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fb8:	f001 fc1e 	bl	80027f8 <HAL_Delay>
	UART_SendString("AT\r\n");
 8000fbc:	4861      	ldr	r0, [pc, #388]	; (8001144 <esp8266_init+0x1a0>)
 8000fbe:	f7ff ff6d 	bl	8000e9c <UART_SendString>
	UART_ReceiveString(response, sizeof(response),500);
 8000fc2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fca:	2164      	movs	r1, #100	; 0x64
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff7b 	bl	8000ec8 <UART_ReceiveString>

	if (strstr(response, "OK") != NULL) {
 8000fd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fd6:	495c      	ldr	r1, [pc, #368]	; (8001148 <esp8266_init+0x1a4>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f010 f885 	bl	80110e8 <strstr>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d01d      	beq.n	8001020 <esp8266_init+0x7c>
		strcpy(result, "OK");
 8000fe4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe8:	4a57      	ldr	r2, [pc, #348]	; (8001148 <esp8266_init+0x1a4>)
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	4611      	mov	r1, r2
 8000fee:	8019      	strh	r1, [r3, #0]
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	0c12      	lsrs	r2, r2, #16
 8000ff4:	701a      	strb	r2, [r3, #0]
	else
	{
		strcpy(result, "ERROR");
		goto RS;
	}
	UART_SendString("AT+CWMODE=3\r\n");
 8000ff6:	4855      	ldr	r0, [pc, #340]	; (800114c <esp8266_init+0x1a8>)
 8000ff8:	f7ff ff50 	bl	8000e9c <UART_SendString>
	UART_ReceiveString(response, sizeof(response),500);
 8000ffc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001000:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001004:	2164      	movs	r1, #100	; 0x64
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff5e 	bl	8000ec8 <UART_ReceiveString>

	if (strstr(response, "OK") != NULL) {
 800100c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001010:	494d      	ldr	r1, [pc, #308]	; (8001148 <esp8266_init+0x1a4>)
 8001012:	4618      	mov	r0, r3
 8001014:	f010 f868 	bl	80110e8 <strstr>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d027      	beq.n	800106e <esp8266_init+0xca>
 800101e:	e008      	b.n	8001032 <esp8266_init+0x8e>
		strcpy(result, "ERROR");
 8001020:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001024:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <esp8266_init+0x1ac>)
 8001026:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102a:	6018      	str	r0, [r3, #0]
 800102c:	3304      	adds	r3, #4
 800102e:	8019      	strh	r1, [r3, #0]
		goto RS;
 8001030:	e07f      	b.n	8001132 <esp8266_init+0x18e>
		strcpy(result, "OK");
 8001032:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001036:	4a44      	ldr	r2, [pc, #272]	; (8001148 <esp8266_init+0x1a4>)
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	4611      	mov	r1, r2
 800103c:	8019      	strh	r1, [r3, #0]
 800103e:	3302      	adds	r3, #2
 8001040:	0c12      	lsrs	r2, r2, #16
 8001042:	701a      	strb	r2, [r3, #0]
	else
	{
		strcpy(result, "ERROR");
		goto RS;
	}
	UART_SendString("AT+CIPMUX=1\r\n");
 8001044:	4843      	ldr	r0, [pc, #268]	; (8001154 <esp8266_init+0x1b0>)
 8001046:	f7ff ff29 	bl	8000e9c <UART_SendString>
	UART_ReceiveString(response, sizeof(response),500);
 800104a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800104e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001052:	2164      	movs	r1, #100	; 0x64
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff37 	bl	8000ec8 <UART_ReceiveString>

	if (strstr(response, "OK") != NULL) {
 800105a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800105e:	493a      	ldr	r1, [pc, #232]	; (8001148 <esp8266_init+0x1a4>)
 8001060:	4618      	mov	r0, r3
 8001062:	f010 f841 	bl	80110e8 <strstr>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d027      	beq.n	80010bc <esp8266_init+0x118>
 800106c:	e008      	b.n	8001080 <esp8266_init+0xdc>
		strcpy(result, "ERROR");
 800106e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001072:	4a37      	ldr	r2, [pc, #220]	; (8001150 <esp8266_init+0x1ac>)
 8001074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001078:	6018      	str	r0, [r3, #0]
 800107a:	3304      	adds	r3, #4
 800107c:	8019      	strh	r1, [r3, #0]
		goto RS;
 800107e:	e058      	b.n	8001132 <esp8266_init+0x18e>
		strcpy(result, "OK");
 8001080:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001084:	4a30      	ldr	r2, [pc, #192]	; (8001148 <esp8266_init+0x1a4>)
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	4611      	mov	r1, r2
 800108a:	8019      	strh	r1, [r3, #0]
 800108c:	3302      	adds	r3, #2
 800108e:	0c12      	lsrs	r2, r2, #16
 8001090:	701a      	strb	r2, [r3, #0]
	{
		strcpy(result, "ERROR");
		goto RS;
	}

	UART_SendString("AT+CIPSERVER=1,80\r\n");
 8001092:	4831      	ldr	r0, [pc, #196]	; (8001158 <esp8266_init+0x1b4>)
 8001094:	f7ff ff02 	bl	8000e9c <UART_SendString>
	UART_ReceiveString(response, sizeof(response),500);
 8001098:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800109c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010a0:	2164      	movs	r1, #100	; 0x64
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff10 	bl	8000ec8 <UART_ReceiveString>


	if (strstr(response, "OK") != NULL) {
 80010a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010ac:	4926      	ldr	r1, [pc, #152]	; (8001148 <esp8266_init+0x1a4>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f010 f81a 	bl	80110e8 <strstr>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d032      	beq.n	8001120 <esp8266_init+0x17c>
 80010ba:	e008      	b.n	80010ce <esp8266_init+0x12a>
		strcpy(result, "ERROR");
 80010bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010c0:	4a23      	ldr	r2, [pc, #140]	; (8001150 <esp8266_init+0x1ac>)
 80010c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c6:	6018      	str	r0, [r3, #0]
 80010c8:	3304      	adds	r3, #4
 80010ca:	8019      	strh	r1, [r3, #0]
		goto RS;
 80010cc:	e031      	b.n	8001132 <esp8266_init+0x18e>
		strcpy(result, "OK");
 80010ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <esp8266_init+0x1a4>)
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	4611      	mov	r1, r2
 80010d8:	8019      	strh	r1, [r3, #0]
 80010da:	3302      	adds	r3, #2
 80010dc:	0c12      	lsrs	r2, r2, #16
 80010de:	701a      	strb	r2, [r3, #0]
	else
	{
		strcpy(result, "ERROR");
		goto RS;
	}
	UART_SendString("AT+CIFSR\r\n");
 80010e0:	481e      	ldr	r0, [pc, #120]	; (800115c <esp8266_init+0x1b8>)
 80010e2:	f7ff fedb 	bl	8000e9c <UART_SendString>
	UART_ReceiveString(response, sizeof(response), 1000);
 80010e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ee:	2164      	movs	r1, #100	; 0x64
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fee9 	bl	8000ec8 <UART_ReceiveString>
	strcat(ip, "");
	strcat(ip, "IP: ");
 80010f6:	463b      	mov	r3, r7
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f871 	bl	80001e0 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	463b      	mov	r3, r7
 8001104:	4413      	add	r3, r2
 8001106:	4a16      	ldr	r2, [pc, #88]	; (8001160 <esp8266_init+0x1bc>)
 8001108:	6810      	ldr	r0, [r2, #0]
 800110a:	6018      	str	r0, [r3, #0]
 800110c:	7912      	ldrb	r2, [r2, #4]
 800110e:	711a      	strb	r2, [r3, #4]
	strcat(ip, response);
 8001110:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001114:	463b      	mov	r3, r7
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f00f ffc3 	bl	80110a4 <strcat>
 800111e:	e008      	b.n	8001132 <esp8266_init+0x18e>
		strcpy(result, "ERROR");
 8001120:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <esp8266_init+0x1ac>)
 8001126:	e892 0003 	ldmia.w	r2, {r0, r1}
 800112a:	6018      	str	r0, [r3, #0]
 800112c:	3304      	adds	r3, #4
 800112e:	8019      	strh	r1, [r3, #0]
		goto RS;
 8001130:	bf00      	nop

	RS:
	return *result;
 8001132:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4


}
 8001136:	4618      	mov	r0, r3
 8001138:	37e8      	adds	r7, #232	; 0xe8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	080118d4 	.word	0x080118d4
 8001144:	080118e0 	.word	0x080118e0
 8001148:	080118e8 	.word	0x080118e8
 800114c:	080118f4 	.word	0x080118f4
 8001150:	080118ec 	.word	0x080118ec
 8001154:	08011904 	.word	0x08011904
 8001158:	08011914 	.word	0x08011914
 800115c:	08011928 	.word	0x08011928
 8001160:	08011934 	.word	0x08011934

08001164 <esp8266_conect>:

char esp8266_conect(char* SSID, char* PASSWORD)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0ae      	sub	sp, #184	; 0xb8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
	GPIO_Init();
 800116e:	f7ff febf 	bl	8000ef0 <GPIO_Init>
	char response[20];
	char result[20];
	char cmd[100];
	char reco[20];
	sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWORD);
 8001172:	f107 0020 	add.w	r0, r7, #32
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4955      	ldr	r1, [pc, #340]	; (80012d0 <esp8266_conect+0x16c>)
 800117c:	f00f ff6a 	bl	8011054 <siprintf>
    UART_SendString(cmd);
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fe89 	bl	8000e9c <UART_SendString>
    HAL_Delay(7000);
 800118a:	f641 3058 	movw	r0, #7000	; 0x1b58
 800118e:	f001 fb33 	bl	80027f8 <HAL_Delay>
	UART_ReceiveString(response, sizeof(response),10000);
 8001192:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001196:	f242 7210 	movw	r2, #10000	; 0x2710
 800119a:	2114      	movs	r1, #20
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fe93 	bl	8000ec8 <UART_ReceiveString>
	scs:
	if (strstr(response, "OK") != NULL) {
 80011a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011a6:	494b      	ldr	r1, [pc, #300]	; (80012d4 <esp8266_conect+0x170>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00f ff9d 	bl	80110e8 <strstr>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d024      	beq.n	80011fe <esp8266_conect+0x9a>
		UART_SendString("CONNECTED.");
 80011b4:	4848      	ldr	r0, [pc, #288]	; (80012d8 <esp8266_conect+0x174>)
 80011b6:	f7ff fe71 	bl	8000e9c <UART_SendString>
		for (int i=0; i<6; i++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011c0:	e00d      	b.n	80011de <esp8266_conect+0x7a>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80011c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c6:	4845      	ldr	r0, [pc, #276]	; (80012dc <esp8266_conect+0x178>)
 80011c8:	f002 fb2d 	bl	8003826 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80011cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011d0:	f001 fb12 	bl	80027f8 <HAL_Delay>
		for (int i=0; i<6; i++)
 80011d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011d8:	3301      	adds	r3, #1
 80011da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	dded      	ble.n	80011c2 <esp8266_conect+0x5e>
		}

		strcpy(result, "OK");
 80011e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011ea:	4a3a      	ldr	r2, [pc, #232]	; (80012d4 <esp8266_conect+0x170>)
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	4611      	mov	r1, r2
 80011f0:	8019      	strh	r1, [r3, #0]
 80011f2:	3302      	adds	r3, #2
 80011f4:	0c12      	lsrs	r2, r2, #16
 80011f6:	701a      	strb	r2, [r3, #0]
		}

		UART_SendString("CONNECTION FAILED, PLEASE PRESS THE RST BUTTON TO TRY AGAIN...!");
		return *result;
	}
	return *result;
 80011f8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80011fc:	e063      	b.n	80012c6 <esp8266_conect+0x162>
		strcpy(result, "FAIL");
 80011fe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001202:	4a37      	ldr	r2, [pc, #220]	; (80012e0 <esp8266_conect+0x17c>)
 8001204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001208:	6018      	str	r0, [r3, #0]
 800120a:	3304      	adds	r3, #4
 800120c:	7019      	strb	r1, [r3, #0]
		for (int i=0; i<3; i++)
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001214:	e04e      	b.n	80012b4 <esp8266_conect+0x150>
		for (int j=0; j<6; j++)
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800121c:	e00d      	b.n	800123a <esp8266_conect+0xd6>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	482e      	ldr	r0, [pc, #184]	; (80012dc <esp8266_conect+0x178>)
 8001224:	f002 faff 	bl	8003826 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8001228:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800122c:	f001 fae4 	bl	80027f8 <HAL_Delay>
		for (int j=0; j<6; j++)
 8001230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001234:	3301      	adds	r3, #1
 8001236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800123a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800123e:	2b05      	cmp	r3, #5
 8001240:	dded      	ble.n	800121e <esp8266_conect+0xba>
		strcpy(response, "");
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
		sprintf(reco, "RECONECTING...(%d)\n", i+1);
 8001248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	4924      	ldr	r1, [pc, #144]	; (80012e4 <esp8266_conect+0x180>)
 8001254:	4618      	mov	r0, r3
 8001256:	f00f fefd 	bl	8011054 <siprintf>
		UART_SendString(reco);
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fe1c 	bl	8000e9c <UART_SendString>
		UART_SendString(cmd);
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fe17 	bl	8000e9c <UART_SendString>
		HAL_Delay(4500);
 800126e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001272:	f001 fac1 	bl	80027f8 <HAL_Delay>
		UART_ReceiveString(response, sizeof(response),15000);
 8001276:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800127a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800127e:	2114      	movs	r1, #20
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe21 	bl	8000ec8 <UART_ReceiveString>
		UART_ReceiveString(response, sizeof(response),15000);
 8001286:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800128a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800128e:	2114      	movs	r1, #20
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fe19 	bl	8000ec8 <UART_ReceiveString>
		if (strstr(response, "OK") != NULL)
 8001296:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800129a:	490e      	ldr	r1, [pc, #56]	; (80012d4 <esp8266_conect+0x170>)
 800129c:	4618      	mov	r0, r3
 800129e:	f00f ff23 	bl	80110e8 <strstr>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d000      	beq.n	80012aa <esp8266_conect+0x146>
			goto scs;
 80012a8:	e77b      	b.n	80011a2 <esp8266_conect+0x3e>
		for (int i=0; i<3; i++)
 80012aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012ae:	3301      	adds	r3, #1
 80012b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	ddac      	ble.n	8001216 <esp8266_conect+0xb2>
		UART_SendString("CONNECTION FAILED, PLEASE PRESS THE RST BUTTON TO TRY AGAIN...!");
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <esp8266_conect+0x184>)
 80012be:	f7ff fded 	bl	8000e9c <UART_SendString>
		return *result;
 80012c2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	37b8      	adds	r7, #184	; 0xb8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0801193c 	.word	0x0801193c
 80012d4:	080118e8 	.word	0x080118e8
 80012d8:	08011954 	.word	0x08011954
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	08011960 	.word	0x08011960
 80012e4:	08011968 	.word	0x08011968
 80012e8:	0801197c 	.word	0x0801197c

080012ec <esp8266_changesever>:
char esp8266_changesever(char* SSID, char* PASSWORD)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0c2      	sub	sp, #264	; 0x108
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012fa:	6018      	str	r0, [r3, #0]
 80012fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001304:	6019      	str	r1, [r3, #0]
	char response[100];
	char result[50];


	char cmd[100];
	sprintf(cmd,"AT+CWSAP=\"%s\",\"%s\",5,3\r\n", SSID, PASSWORD);
 8001306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800130a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800130e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001312:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001316:	f107 000c 	add.w	r0, r7, #12
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	4919      	ldr	r1, [pc, #100]	; (8001384 <esp8266_changesever+0x98>)
 8001320:	f00f fe98 	bl	8011054 <siprintf>
	UART_SendString(cmd);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fdb7 	bl	8000e9c <UART_SendString>
	UART_ReceiveString(response, sizeof(response),100);
 800132e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001332:	2264      	movs	r2, #100	; 0x64
 8001334:	2164      	movs	r1, #100	; 0x64
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fdc6 	bl	8000ec8 <UART_ReceiveString>

	if (strstr(response, "OK") != NULL) {
 800133c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001340:	4911      	ldr	r1, [pc, #68]	; (8001388 <esp8266_changesever+0x9c>)
 8001342:	4618      	mov	r0, r3
 8001344:	f00f fed0 	bl	80110e8 <strstr>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <esp8266_changesever+0x7a>
		strcpy(result, "OK");
 800134e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001352:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <esp8266_changesever+0x9c>)
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	4611      	mov	r1, r2
 8001358:	8019      	strh	r1, [r3, #0]
 800135a:	3302      	adds	r3, #2
 800135c:	0c12      	lsrs	r2, r2, #16
 800135e:	701a      	strb	r2, [r3, #0]
	else
	{
		strcpy(result, "ERROR");
		return *result;
	}
	return *result;
 8001360:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001364:	e009      	b.n	800137a <esp8266_changesever+0x8e>
		strcpy(result, "ERROR");
 8001366:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <esp8266_changesever+0xa0>)
 800136c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001370:	6018      	str	r0, [r3, #0]
 8001372:	3304      	adds	r3, #4
 8001374:	8019      	strh	r1, [r3, #0]
		return *result;
 8001376:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
}
 800137a:	4618      	mov	r0, r3
 800137c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	080119bc 	.word	0x080119bc
 8001388:	080118e8 	.word	0x080118e8
 800138c:	080118ec 	.word	0x080118ec

08001390 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4603      	mov	r3, r0
 800139a:	81fb      	strh	r3, [r7, #14]
 800139c:	460b      	mov	r3, r1
 800139e:	81bb      	strh	r3, [r7, #12]
 80013a0:	4613      	mov	r3, r2
 80013a2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80013a8:	f7ff fc50 	bl	8000c4c <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2201      	movs	r2, #1
 80013b2:	2102      	movs	r1, #2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fb01 	bl	80019bc <CODEC_IO_Write>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	4413      	add	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80013c4:	89bb      	ldrh	r3, [r7, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d81b      	bhi.n	8001404 <cs43l22_Init+0x74>
 80013cc:	a201      	add	r2, pc, #4	; (adr r2, 80013d4 <cs43l22_Init+0x44>)
 80013ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d2:	bf00      	nop
 80013d4:	080013e5 	.word	0x080013e5
 80013d8:	080013ed 	.word	0x080013ed
 80013dc:	080013f5 	.word	0x080013f5
 80013e0:	080013fd 	.word	0x080013fd
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80013e4:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <cs43l22_Init+0x1c4>)
 80013e6:	22fa      	movs	r2, #250	; 0xfa
 80013e8:	701a      	strb	r2, [r3, #0]
    break;
 80013ea:	e00f      	b.n	800140c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <cs43l22_Init+0x1c4>)
 80013ee:	22af      	movs	r2, #175	; 0xaf
 80013f0:	701a      	strb	r2, [r3, #0]
    break;
 80013f2:	e00b      	b.n	800140c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 80013f4:	4b57      	ldr	r3, [pc, #348]	; (8001554 <cs43l22_Init+0x1c4>)
 80013f6:	22aa      	movs	r2, #170	; 0xaa
 80013f8:	701a      	strb	r2, [r3, #0]
    break;
 80013fa:	e007      	b.n	800140c <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 80013fc:	4b55      	ldr	r3, [pc, #340]	; (8001554 <cs43l22_Init+0x1c4>)
 80013fe:	2205      	movs	r2, #5
 8001400:	701a      	strb	r2, [r3, #0]
    break;    
 8001402:	e003      	b.n	800140c <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <cs43l22_Init+0x1c4>)
 8001406:	2205      	movs	r2, #5
 8001408:	701a      	strb	r2, [r3, #0]
    break;    
 800140a:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800140c:	89fb      	ldrh	r3, [r7, #14]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4a50      	ldr	r2, [pc, #320]	; (8001554 <cs43l22_Init+0x1c4>)
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	2104      	movs	r1, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f000 facf 	bl	80019bc <CODEC_IO_Write>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	4413      	add	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2281      	movs	r2, #129	; 0x81
 800142e:	2105      	movs	r1, #5
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fac3 	bl	80019bc <CODEC_IO_Write>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	4413      	add	r3, r2
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001440:	89fb      	ldrh	r3, [r7, #14]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2204      	movs	r2, #4
 8001446:	2106      	movs	r1, #6
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fab7 	bl	80019bc <CODEC_IO_Write>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	4413      	add	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8001458:	7afa      	ldrb	r2, [r7, #11]
 800145a:	89fb      	ldrh	r3, [r7, #14]
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f964 	bl	800172c <cs43l22_SetVolume>
 8001464:	4602      	mov	r2, r0
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	4413      	add	r3, r2
 800146a:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 800146c:	89bb      	ldrh	r3, [r7, #12]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d023      	beq.n	80014ba <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8001472:	89fb      	ldrh	r3, [r7, #14]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2206      	movs	r2, #6
 8001478:	210f      	movs	r1, #15
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fa9e 	bl	80019bc <CODEC_IO_Write>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	4413      	add	r3, r2
 8001488:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2200      	movs	r2, #0
 8001490:	2124      	movs	r1, #36	; 0x24
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fa92 	bl	80019bc <CODEC_IO_Write>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	4413      	add	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2200      	movs	r2, #0
 80014a8:	2125      	movs	r1, #37	; 0x25
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fa86 	bl	80019bc <CODEC_IO_Write>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4413      	add	r3, r2
 80014b8:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80014ba:	89fb      	ldrh	r3, [r7, #14]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2200      	movs	r2, #0
 80014c0:	210a      	movs	r1, #10
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fa7a 	bl	80019bc <CODEC_IO_Write>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	4413      	add	r3, r2
 80014d0:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80014d2:	89fb      	ldrh	r3, [r7, #14]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2204      	movs	r2, #4
 80014d8:	210e      	movs	r1, #14
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 fa6e 	bl	80019bc <CODEC_IO_Write>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	4413      	add	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2200      	movs	r2, #0
 80014f0:	2127      	movs	r1, #39	; 0x27
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 fa62 	bl	80019bc <CODEC_IO_Write>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	4413      	add	r3, r2
 8001500:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8001502:	89fb      	ldrh	r3, [r7, #14]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	220f      	movs	r2, #15
 8001508:	211f      	movs	r1, #31
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fa56 	bl	80019bc <CODEC_IO_Write>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 800151a:	89fb      	ldrh	r3, [r7, #14]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	220a      	movs	r2, #10
 8001520:	211a      	movs	r1, #26
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fa4a 	bl	80019bc <CODEC_IO_Write>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	4413      	add	r3, r2
 8001530:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	220a      	movs	r2, #10
 8001538:	211b      	movs	r1, #27
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fa3e 	bl	80019bc <CODEC_IO_Write>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	4413      	add	r3, r2
 8001548:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 800154a:	697b      	ldr	r3, [r7, #20]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200001d8 	.word	0x200001d8

08001558 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800155c:	f7ff fbae 	bl	8000cbc <AUDIO_IO_DeInit>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 800156e:	f7ff fb6d 	bl	8000c4c <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2101      	movs	r1, #1
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fbba 	bl	8000cf2 <AUDIO_IO_Read>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	f023 0307 	bic.w	r3, r3, #7
 8001588:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	80fb      	strh	r3, [r7, #6]
 80015a0:	4613      	mov	r3, r2
 80015a2:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <cs43l22_Play+0x70>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d123      	bne.n	80015f8 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2206      	movs	r2, #6
 80015b6:	210e      	movs	r1, #14
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f9ff 	bl	80019bc <CODEC_IO_Write>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f919 	bl	8001804 <cs43l22_SetMute>
 80015d2:	4602      	mov	r2, r0
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	229e      	movs	r2, #158	; 0x9e
 80015e0:	2102      	movs	r1, #2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f9ea 	bl	80019bc <CODEC_IO_Write>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <cs43l22_Play+0x70>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 80015f8:	68fb      	ldr	r3, [r7, #12]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000034 	.word	0x20000034

08001608 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	2101      	movs	r1, #1
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f8f2 	bl	8001804 <cs43l22_SetMute>
 8001620:	4602      	mov	r2, r0
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4413      	add	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2201      	movs	r2, #1
 800162e:	2102      	movs	r1, #2
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f9c3 	bl	80019bc <CODEC_IO_Write>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4413      	add	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001640:	68fb      	ldr	r3, [r7, #12]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f8ce 	bl	8001804 <cs43l22_SetMute>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	e002      	b.n	800167c <cs43l22_Resume+0x30>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3301      	adds	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2bfe      	cmp	r3, #254	; 0xfe
 8001680:	d9f9      	bls.n	8001676 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <cs43l22_Resume+0x74>)
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	2104      	movs	r1, #4
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f994 	bl	80019bc <CODEC_IO_Write>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	229e      	movs	r2, #158	; 0x9e
 80016a4:	2102      	movs	r1, #2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f988 	bl	80019bc <CODEC_IO_Write>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200001d8 	.word	0x200001d8

080016c4 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	2101      	movs	r1, #1
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 f893 	bl	8001804 <cs43l22_SetMute>
 80016de:	4602      	mov	r2, r0
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2204      	movs	r2, #4
 80016ec:	210e      	movs	r1, #14
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f964 	bl	80019bc <CODEC_IO_Write>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	229f      	movs	r2, #159	; 0x9f
 8001704:	2102      	movs	r1, #2
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f958 	bl	80019bc <CODEC_IO_Write>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <cs43l22_Stop+0x64>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
  return counter;    
 800171c:	68fb      	ldr	r3, [r7, #12]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000034 	.word	0x20000034

0800172c <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	460a      	mov	r2, r1
 8001736:	80fb      	strh	r3, [r7, #6]
 8001738:	4613      	mov	r3, r2
 800173a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001740:	797b      	ldrb	r3, [r7, #5]
 8001742:	2b64      	cmp	r3, #100	; 0x64
 8001744:	d80b      	bhi.n	800175e <cs43l22_SetVolume+0x32>
 8001746:	797a      	ldrb	r2, [r7, #5]
 8001748:	4613      	mov	r3, r2
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <cs43l22_SetVolume+0xb8>)
 8001750:	fb82 1203 	smull	r1, r2, r2, r3
 8001754:	1152      	asrs	r2, r2, #5
 8001756:	17db      	asrs	r3, r3, #31
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	e000      	b.n	8001760 <cs43l22_SetVolume+0x34>
 800175e:	23ff      	movs	r3, #255	; 0xff
 8001760:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8001762:	7afb      	ldrb	r3, [r7, #11]
 8001764:	2be6      	cmp	r3, #230	; 0xe6
 8001766:	d91c      	bls.n	80017a2 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	b2d8      	uxtb	r0, r3
 800176c:	7afb      	ldrb	r3, [r7, #11]
 800176e:	3319      	adds	r3, #25
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	2120      	movs	r1, #32
 8001776:	f000 f921 	bl	80019bc <CODEC_IO_Write>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4413      	add	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	b2d8      	uxtb	r0, r3
 8001788:	7afb      	ldrb	r3, [r7, #11]
 800178a:	3319      	adds	r3, #25
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	2121      	movs	r1, #33	; 0x21
 8001792:	f000 f913 	bl	80019bc <CODEC_IO_Write>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4413      	add	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e01b      	b.n	80017da <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	b2d8      	uxtb	r0, r3
 80017a6:	7afb      	ldrb	r3, [r7, #11]
 80017a8:	3319      	adds	r3, #25
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	2120      	movs	r1, #32
 80017b0:	f000 f904 	bl	80019bc <CODEC_IO_Write>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	b2d8      	uxtb	r0, r3
 80017c2:	7afb      	ldrb	r3, [r7, #11]
 80017c4:	3319      	adds	r3, #25
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	2121      	movs	r1, #33	; 0x21
 80017cc:	f000 f8f6 	bl	80019bc <CODEC_IO_Write>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	51eb851f 	.word	0x51eb851f

080017e8 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	80fb      	strh	r3, [r7, #6]
  return 0;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d124      	bne.n	8001864 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	22ff      	movs	r2, #255	; 0xff
 8001820:	2104      	movs	r1, #4
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f8ca 	bl	80019bc <CODEC_IO_Write>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2201      	movs	r2, #1
 8001838:	2122      	movs	r1, #34	; 0x22
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f8be 	bl	80019bc <CODEC_IO_Write>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2201      	movs	r2, #1
 8001850:	2123      	movs	r1, #35	; 0x23
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f8b2 	bl	80019bc <CODEC_IO_Write>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e025      	b.n	80018b0 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2200      	movs	r2, #0
 800186a:	2122      	movs	r1, #34	; 0x22
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f8a5 	bl	80019bc <CODEC_IO_Write>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4413      	add	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2200      	movs	r2, #0
 8001882:	2123      	movs	r1, #35	; 0x23
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f899 	bl	80019bc <CODEC_IO_Write>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <cs43l22_SetMute+0xb8>)
 800189a:	7812      	ldrb	r2, [r2, #0]
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	2104      	movs	r1, #4
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f88b 	bl	80019bc <CODEC_IO_Write>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80018b0:	68fb      	ldr	r3, [r7, #12]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200001d8 	.word	0x200001d8

080018c0 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	460a      	mov	r2, r1
 80018ca:	80fb      	strh	r3, [r7, #6]
 80018cc:	4613      	mov	r3, r2
 80018ce:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80018d4:	797b      	ldrb	r3, [r7, #5]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d84b      	bhi.n	8001974 <cs43l22_SetOutputMode+0xb4>
 80018dc:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <cs43l22_SetOutputMode+0x24>)
 80018de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e2:	bf00      	nop
 80018e4:	080018f5 	.word	0x080018f5
 80018e8:	08001915 	.word	0x08001915
 80018ec:	08001935 	.word	0x08001935
 80018f0:	08001955 	.word	0x08001955
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	22fa      	movs	r2, #250	; 0xfa
 80018fa:	2104      	movs	r1, #4
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f85d 	bl	80019bc <CODEC_IO_Write>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <cs43l22_SetOutputMode+0xe0>)
 800190e:	22fa      	movs	r2, #250	; 0xfa
 8001910:	701a      	strb	r2, [r3, #0]
      break;
 8001912:	e03f      	b.n	8001994 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	22af      	movs	r2, #175	; 0xaf
 800191a:	2104      	movs	r1, #4
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f84d 	bl	80019bc <CODEC_IO_Write>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 800192c:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <cs43l22_SetOutputMode+0xe0>)
 800192e:	22af      	movs	r2, #175	; 0xaf
 8001930:	701a      	strb	r2, [r3, #0]
      break;
 8001932:	e02f      	b.n	8001994 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	22aa      	movs	r2, #170	; 0xaa
 800193a:	2104      	movs	r1, #4
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f83d 	bl	80019bc <CODEC_IO_Write>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <cs43l22_SetOutputMode+0xe0>)
 800194e:	22aa      	movs	r2, #170	; 0xaa
 8001950:	701a      	strb	r2, [r3, #0]
      break;
 8001952:	e01f      	b.n	8001994 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2205      	movs	r2, #5
 800195a:	2104      	movs	r1, #4
 800195c:	4618      	mov	r0, r3
 800195e:	f000 f82d 	bl	80019bc <CODEC_IO_Write>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <cs43l22_SetOutputMode+0xe0>)
 800196e:	2205      	movs	r2, #5
 8001970:	701a      	strb	r2, [r3, #0]
      break;    
 8001972:	e00f      	b.n	8001994 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2205      	movs	r2, #5
 800197a:	2104      	movs	r1, #4
 800197c:	4618      	mov	r0, r3
 800197e:	f000 f81d 	bl	80019bc <CODEC_IO_Write>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <cs43l22_SetOutputMode+0xe0>)
 800198e:	2205      	movs	r2, #5
 8001990:	701a      	strb	r2, [r3, #0]
      break;
 8001992:	bf00      	nop
  }  
  return counter;
 8001994:	68fb      	ldr	r3, [r7, #12]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200001d8 	.word	0x200001d8

080019a4 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	80fb      	strh	r3, [r7, #6]
  return 0;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	460b      	mov	r3, r1
 80019c8:	71bb      	strb	r3, [r7, #6]
 80019ca:	4613      	mov	r3, r2
 80019cc:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80019d2:	797a      	ldrb	r2, [r7, #5]
 80019d4:	79b9      	ldrb	r1, [r7, #6]
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff f976 	bl	8000cca <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	b2db      	uxtb	r3, r3
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_UART_RxCpltCallback>:

int IsFinished = 0;

int idx ;
void  HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <HAL_UART_RxCpltCallback+0x80>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d132      	bne.n	8001a64 <HAL_UART_RxCpltCallback+0x78>
	{
		HAL_UART_Receive_IT(&huart2, &key, 1);
 80019fe:	2201      	movs	r2, #1
 8001a00:	491b      	ldr	r1, [pc, #108]	; (8001a70 <HAL_UART_RxCpltCallback+0x84>)
 8001a02:	481c      	ldr	r0, [pc, #112]	; (8001a74 <HAL_UART_RxCpltCallback+0x88>)
 8001a04:	f006 fba1 	bl	800814a <HAL_UART_Receive_IT>
        if (key == 49)
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_UART_RxCpltCallback+0x84>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b31      	cmp	r3, #49	; 0x31
 8001a0e:	d103      	bne.n	8001a18 <HAL_UART_RxCpltCallback+0x2c>
        {
        	AudioState = AUDIO_STATE_PREVIOUS;
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_UART_RxCpltCallback+0x8c>)
 8001a12:	2206      	movs	r2, #6
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	e022      	b.n	8001a5e <HAL_UART_RxCpltCallback+0x72>

        }
        else if (key == 50)
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_UART_RxCpltCallback+0x84>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b32      	cmp	r3, #50	; 0x32
 8001a1e:	d103      	bne.n	8001a28 <HAL_UART_RxCpltCallback+0x3c>
        {
        	AudioState = AUDIO_STATE_NEXT;
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_UART_RxCpltCallback+0x8c>)
 8001a22:	2205      	movs	r2, #5
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e01a      	b.n	8001a5e <HAL_UART_RxCpltCallback+0x72>

        }
        else if ((key == 51) && (AudioState == AUDIO_STATE_WAIT))
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_UART_RxCpltCallback+0x84>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b33      	cmp	r3, #51	; 0x33
 8001a2e:	d107      	bne.n	8001a40 <HAL_UART_RxCpltCallback+0x54>
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_UART_RxCpltCallback+0x8c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d103      	bne.n	8001a40 <HAL_UART_RxCpltCallback+0x54>
        {
        	AudioState = AUDIO_STATE_RESUME;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_UART_RxCpltCallback+0x8c>)
 8001a3a:	220b      	movs	r2, #11
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e00e      	b.n	8001a5e <HAL_UART_RxCpltCallback+0x72>

        }
        else if ((key == 51) && (AudioState == AUDIO_STATE_PLAY))
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_UART_RxCpltCallback+0x84>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b33      	cmp	r3, #51	; 0x33
 8001a46:	d107      	bne.n	8001a58 <HAL_UART_RxCpltCallback+0x6c>
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_UART_RxCpltCallback+0x8c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d103      	bne.n	8001a58 <HAL_UART_RxCpltCallback+0x6c>
        {
        	AudioState = AUDIO_STATE_PAUSE;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_UART_RxCpltCallback+0x8c>)
 8001a52:	220a      	movs	r2, #10
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	e002      	b.n	8001a5e <HAL_UART_RxCpltCallback+0x72>

        }
        else
        {
        	key = 48;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_UART_RxCpltCallback+0x84>)
 8001a5a:	2230      	movs	r2, #48	; 0x30
 8001a5c:	701a      	strb	r2, [r3, #0]
        }
        key = 48;
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_UART_RxCpltCallback+0x84>)
 8001a60:	2230      	movs	r2, #48	; 0x30
 8001a62:	701a      	strb	r2, [r3, #0]

	}
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40004400 	.word	0x40004400
 8001a70:	2000031c 	.word	0x2000031c
 8001a74:	200002d8 	.word	0x200002d8
 8001a78:	20001334 	.word	0x20001334

08001a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	idx = 0;
 8001a82:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <main+0xd0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
	char SSID1[]="ESP8266";
 8001a88:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <main+0xd4>)
 8001a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a92:	e883 0003 	stmia.w	r3, {r0, r1}
	char PSW1[]="12345678";
 8001a96:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <main+0xd8>)
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a9e:	c303      	stmia	r3!, {r0, r1}
 8001aa0:	701a      	strb	r2, [r3, #0]
	char SSID2[]="PhamNghia";
 8001aa2:	4a2d      	ldr	r2, [pc, #180]	; (8001b58 <main+0xdc>)
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aaa:	c303      	stmia	r3!, {r0, r1}
 8001aac:	801a      	strh	r2, [r3, #0]
	char PSW2[]="244466666";
 8001aae:	4a2b      	ldr	r2, [pc, #172]	; (8001b5c <main+0xe0>)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ab4:	c303      	stmia	r3!, {r0, r1}
 8001ab6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab8:	f000 fe2c 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001abc:	f000 f85a 	bl	8001b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac0:	f000 f966 	bl	8001d90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ac4:	f000 f944 	bl	8001d50 <MX_DMA_Init>
  MX_I2C1_Init();
 8001ac8:	f000 f8bc 	bl	8001c44 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001acc:	f000 f8e8 	bl	8001ca0 <MX_I2S3_Init>
  MX_FATFS_Init();
 8001ad0:	f008 faba 	bl	800a048 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001ad4:	f00e feca 	bl	801086c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001ad8:	f000 f910 	bl	8001cfc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  esp8266_init();
 8001adc:	f7ff fa62 	bl	8000fa4 <esp8266_init>
  esp8266_changesever(SSID1, PSW1);
 8001ae0:	f107 021c 	add.w	r2, r7, #28
 8001ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fbfe 	bl	80012ec <esp8266_changesever>
  esp8266_conect(SSID2, PSW2);
 8001af0:	1d3a      	adds	r2, r7, #4
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fb33 	bl	8001164 <esp8266_conect>
  HAL_UART_Receive_IT(&huart2, &key, 1);
 8001afe:	2201      	movs	r2, #1
 8001b00:	4917      	ldr	r1, [pc, #92]	; (8001b60 <main+0xe4>)
 8001b02:	4818      	ldr	r0, [pc, #96]	; (8001b64 <main+0xe8>)
 8001b04:	f006 fb21 	bl	800814a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001b08:	f00e fed6 	bl	80108b8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (Appli_state == APPLICATION_READY)
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <main+0xec>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d1f9      	bne.n	8001b08 <main+0x8c>
     {
        Mount_USB();
 8001b14:	f7ff f9ae 	bl	8000e74 <Mount_USB>
        AUDIO_PLAYER_Start(idx);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <main+0xd0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 fc2c 	bl	800237c <AUDIO_PLAYER_Start>
        key = 48;
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <main+0xe4>)
 8001b26:	2230      	movs	r2, #48	; 0x30
 8001b28:	701a      	strb	r2, [r3, #0]

        while (!IsFinished)
 8001b2a:	e009      	b.n	8001b40 <main+0xc4>
        {
        	AUDIO_PLAYER_Process(TRUE);
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f000 fc85 	bl	800243c <AUDIO_PLAYER_Process>

        	if (AudioState == AUDIO_STATE_STOP)
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <main+0xf0>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b09      	cmp	r3, #9
 8001b38:	d102      	bne.n	8001b40 <main+0xc4>
        	{
        		IsFinished = 1;
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <main+0xf4>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
        while (!IsFinished)
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <main+0xf4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f1      	beq.n	8001b2c <main+0xb0>
    MX_USB_HOST_Process();
 8001b48:	e7de      	b.n	8001b08 <main+0x8c>
 8001b4a:	bf00      	nop
 8001b4c:	20000324 	.word	0x20000324
 8001b50:	080119d8 	.word	0x080119d8
 8001b54:	080119e0 	.word	0x080119e0
 8001b58:	080119ec 	.word	0x080119ec
 8001b5c:	080119f8 	.word	0x080119f8
 8001b60:	2000031c 	.word	0x2000031c
 8001b64:	200002d8 	.word	0x200002d8
 8001b68:	200021bc 	.word	0x200021bc
 8001b6c:	20001334 	.word	0x20001334
 8001b70:	20000320 	.word	0x20000320

08001b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b094      	sub	sp, #80	; 0x50
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	f107 0320 	add.w	r3, r7, #32
 8001b7e:	2230      	movs	r2, #48	; 0x30
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f00f fa86 	bl	8011094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <SystemClock_Config+0xc8>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	4a26      	ldr	r2, [pc, #152]	; (8001c3c <SystemClock_Config+0xc8>)
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <SystemClock_Config+0xc8>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <SystemClock_Config+0xcc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <SystemClock_Config+0xcc>)
 8001bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <SystemClock_Config+0xcc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001be4:	2304      	movs	r3, #4
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001be8:	23c0      	movs	r3, #192	; 0xc0
 8001bea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bec:	2304      	movs	r3, #4
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf4:	f107 0320 	add.w	r3, r7, #32
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f005 fafb 	bl	80071f4 <HAL_RCC_OscConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c04:	f000 f95e 	bl	8001ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c08:	230f      	movs	r3, #15
 8001c0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	2103      	movs	r1, #3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f005 fd5d 	bl	80076e4 <HAL_RCC_ClockConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c30:	f000 f948 	bl	8001ec4 <Error_Handler>
  }
}
 8001c34:	bf00      	nop
 8001c36:	3750      	adds	r7, #80	; 0x50
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000

08001c44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c4a:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <MX_I2C1_Init+0x54>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c50:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <MX_I2C1_Init+0x58>)
 8001c52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <MX_I2C1_Init+0x50>)
 8001c82:	f003 fa19 	bl	80050b8 <HAL_I2C_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c8c:	f000 f91a 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200001dc 	.word	0x200001dc
 8001c98:	40005400 	.word	0x40005400
 8001c9c:	000186a0 	.word	0x000186a0

08001ca0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <MX_I2S3_Init+0x54>)
 8001ca6:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <MX_I2S3_Init+0x58>)
 8001ca8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_I2S3_Init+0x54>)
 8001cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_I2S3_Init+0x54>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_I2S3_Init+0x54>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <MX_I2S3_Init+0x54>)
 8001cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <MX_I2S3_Init+0x54>)
 8001cc8:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001ccc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_I2S3_Init+0x54>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <MX_I2S3_Init+0x54>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_I2S3_Init+0x54>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001ce0:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <MX_I2S3_Init+0x54>)
 8001ce2:	f004 f9e7 	bl	80060b4 <HAL_I2S_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001cec:	f000 f8ea 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000230 	.word	0x20000230
 8001cf8:	40003c00 	.word	0x40003c00

08001cfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_USART2_UART_Init+0x4c>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <MX_USART2_UART_Init+0x50>)
 8001d04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <MX_USART2_UART_Init+0x4c>)
 8001d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_USART2_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_USART2_UART_Init+0x4c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_USART2_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_USART2_UART_Init+0x4c>)
 8001d22:	220c      	movs	r2, #12
 8001d24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_USART2_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_USART2_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_USART2_UART_Init+0x4c>)
 8001d34:	f006 f888 	bl	8007e48 <HAL_UART_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d3e:	f000 f8c1 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200002d8 	.word	0x200002d8
 8001d4c:	40004400 	.word	0x40004400

08001d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_DMA_Init+0x3c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <MX_DMA_Init+0x3c>)
 8001d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_DMA_Init+0x3c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2010      	movs	r0, #16
 8001d78:	f000 fe3d 	bl	80029f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d7c:	2010      	movs	r0, #16
 8001d7e:	f000 fe56 	bl	8002a2e <HAL_NVIC_EnableIRQ>

}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a41      	ldr	r2, [pc, #260]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a3a      	ldr	r2, [pc, #232]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a33      	ldr	r2, [pc, #204]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a2c      	ldr	r2, [pc, #176]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a25      	ldr	r2, [pc, #148]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <MX_GPIO_Init+0x124>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2101      	movs	r1, #1
 8001e36:	4820      	ldr	r0, [pc, #128]	; (8001eb8 <MX_GPIO_Init+0x128>)
 8001e38:	f001 fcdc 	bl	80037f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001e42:	481e      	ldr	r0, [pc, #120]	; (8001ebc <MX_GPIO_Init+0x12c>)
 8001e44:	f001 fcd6 	bl	80037f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4816      	ldr	r0, [pc, #88]	; (8001eb8 <MX_GPIO_Init+0x128>)
 8001e60:	f001 fa60 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e64:	2301      	movs	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4811      	ldr	r0, [pc, #68]	; (8001ec0 <MX_GPIO_Init+0x130>)
 8001e7a:	f001 fa53 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001e7e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4809      	ldr	r0, [pc, #36]	; (8001ebc <MX_GPIO_Init+0x12c>)
 8001e98:	f001 fa44 	bl	8003324 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2006      	movs	r0, #6
 8001ea2:	f000 fda8 	bl	80029f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ea6:	2006      	movs	r0, #6
 8001ea8:	f000 fdc1 	bl	8002a2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
 // {
 // }
  /* USER CODE END Error_Handler_Debug */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f12:	2007      	movs	r0, #7
 8001f14:	f000 fd64 	bl	80029e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_I2C_MspInit+0x84>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12c      	bne.n	8001fa0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001f62:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f68:	2312      	movs	r3, #18
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f74:	2304      	movs	r3, #4
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <HAL_I2C_MspInit+0x8c>)
 8001f80:	f001 f9d0 	bl	8003324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_I2C_MspInit+0x88>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_I2C_MspDeInit+0x38>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_I2C_MspDeInit+0x3c>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <HAL_I2C_MspDeInit+0x3c>)
 8001fcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001fd2:	2140      	movs	r1, #64	; 0x40
 8001fd4:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <HAL_I2C_MspDeInit+0x40>)
 8001fd6:	f001 fb29 	bl	800362c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fde:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <HAL_I2C_MspDeInit+0x40>)
 8001fe0:	f001 fb24 	bl	800362c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40005400 	.word	0x40005400
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020400 	.word	0x40020400

08001ff8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b090      	sub	sp, #64	; 0x40
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
 8002020:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a4f      	ldr	r2, [pc, #316]	; (8002164 <HAL_I2S_MspInit+0x16c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	f040 8096 	bne.w	800215a <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800202e:	2301      	movs	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002032:	23c8      	movs	r3, #200	; 0xc8
 8002034:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8002036:	2305      	movs	r3, #5
 8002038:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800203a:	2302      	movs	r3, #2
 800203c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4618      	mov	r0, r3
 8002044:	f005 fd6e 	bl	8007b24 <HAL_RCCEx_PeriphCLKConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 800204e:	f7ff ff39 	bl	8001ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b44      	ldr	r3, [pc, #272]	; (8002168 <HAL_I2S_MspInit+0x170>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a43      	ldr	r2, [pc, #268]	; (8002168 <HAL_I2S_MspInit+0x170>)
 800205c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b41      	ldr	r3, [pc, #260]	; (8002168 <HAL_I2S_MspInit+0x170>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <HAL_I2S_MspInit+0x170>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a3c      	ldr	r2, [pc, #240]	; (8002168 <HAL_I2S_MspInit+0x170>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <HAL_I2S_MspInit+0x170>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b36      	ldr	r3, [pc, #216]	; (8002168 <HAL_I2S_MspInit+0x170>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a35      	ldr	r2, [pc, #212]	; (8002168 <HAL_I2S_MspInit+0x170>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_I2S_MspInit+0x170>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020a6:	2310      	movs	r3, #16
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020b6:	2306      	movs	r3, #6
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020be:	4619      	mov	r1, r3
 80020c0:	482a      	ldr	r0, [pc, #168]	; (800216c <HAL_I2S_MspInit+0x174>)
 80020c2:	f001 f92f 	bl	8003324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80020c6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020d8:	2306      	movs	r3, #6
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e0:	4619      	mov	r1, r3
 80020e2:	4823      	ldr	r0, [pc, #140]	; (8002170 <HAL_I2S_MspInit+0x178>)
 80020e4:	f001 f91e 	bl	8003324 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 80020ea:	4a23      	ldr	r2, [pc, #140]	; (8002178 <HAL_I2S_MspInit+0x180>)
 80020ec:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 80020f6:	2240      	movs	r2, #64	; 0x40
 80020f8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 8002102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002106:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 800210a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800210e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 8002112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002116:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 800211a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800211e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 8002122:	2200      	movs	r2, #0
 8002124:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 8002128:	2204      	movs	r2, #4
 800212a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 800212e:	2203      	movs	r2, #3
 8002130:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 8002134:	2200      	movs	r2, #0
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 800213a:	2200      	movs	r2, #0
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800213e:	480d      	ldr	r0, [pc, #52]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 8002140:	f000 fc90 	bl	8002a64 <HAL_DMA_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 800214a:	f7ff febb 	bl	8001ec4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a08      	ldr	r2, [pc, #32]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
 8002154:	4a07      	ldr	r2, [pc, #28]	; (8002174 <HAL_I2S_MspInit+0x17c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800215a:	bf00      	nop
 800215c:	3740      	adds	r7, #64	; 0x40
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40003c00 	.word	0x40003c00
 8002168:	40023800 	.word	0x40023800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020800 	.word	0x40020800
 8002174:	20000278 	.word	0x20000278
 8002178:	40026088 	.word	0x40026088

0800217c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_UART_MspInit+0x94>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d133      	bne.n	8002206 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_UART_MspInit+0x98>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <HAL_UART_MspInit+0x98>)
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_UART_MspInit+0x98>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <HAL_UART_MspInit+0x98>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a14      	ldr	r2, [pc, #80]	; (8002214 <HAL_UART_MspInit+0x98>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_UART_MspInit+0x98>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021d6:	230c      	movs	r3, #12
 80021d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021e6:	2307      	movs	r3, #7
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	4809      	ldr	r0, [pc, #36]	; (8002218 <HAL_UART_MspInit+0x9c>)
 80021f2:	f001 f897 	bl	8003324 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2026      	movs	r0, #38	; 0x26
 80021fc:	f000 fbfb 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002200:	2026      	movs	r0, #38	; 0x26
 8002202:	f000 fc14 	bl	8002a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	; 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40004400 	.word	0x40004400
 8002214:	40023800 	.word	0x40023800
 8002218:	40020000 	.word	0x40020000

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <NMI_Handler+0x4>

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <MemManage_Handler+0x4>

0800222e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <UsageFault_Handler+0x4>

0800223a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002268:	f000 faa6 	bl	80027b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002274:	2001      	movs	r0, #1
 8002276:	f001 faf1 	bl	800385c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <DMA1_Stream5_IRQHandler+0x10>)
 8002286:	f000 fde3 	bl	8002e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000278 	.word	0x20000278

08002294 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <USART2_IRQHandler+0x10>)
 800229a:	f005 ff87 	bl	80081ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200002d8 	.word	0x200002d8

080022a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <OTG_FS_IRQHandler+0x10>)
 80022ae:	f001 fd63 	bl	8003d78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200021c0 	.word	0x200021c0

080022bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <_sbrk+0x5c>)
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <_sbrk+0x60>)
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <_sbrk+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <_sbrk+0x64>)
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <_sbrk+0x68>)
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d207      	bcs.n	80022fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ec:	f00e ff22 	bl	8011134 <__errno>
 80022f0:	4603      	mov	r3, r0
 80022f2:	220c      	movs	r2, #12
 80022f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	e009      	b.n	8002310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <_sbrk+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <_sbrk+0x64>)
 800230c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20020000 	.word	0x20020000
 800231c:	00000400 	.word	0x00000400
 8002320:	20000328 	.word	0x20000328
 8002324:	20002610 	.word	0x20002610

08002328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <SystemInit+0x20>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	4a05      	ldr	r2, [pc, #20]	; (8002348 <SystemInit+0x20>)
 8002334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <PlayerInit+0x2c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4619      	mov	r1, r3
 800235e:	2003      	movs	r0, #3
 8002360:	f7fe f914 	bl	800058c <AUDIO_OUT_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <PlayerInit+0x22>
	{
		return 1;
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 800236e:	2300      	movs	r3, #0
	}
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2000003c 	.word	0x2000003c

0800237c <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
 unsigned long int bytesread;

  f_close(&WavFile);
 8002386:	4828      	ldr	r0, [pc, #160]	; (8002428 <AUDIO_PLAYER_Start+0xac>)
 8002388:	f00d fe45 	bl	8010016 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 800238c:	f7fe fd64 	bl	8000e58 <AUDIO_GetWavObjectNumber>
 8002390:	4603      	mov	r3, r0
 8002392:	461a      	mov	r2, r3
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	b29b      	uxth	r3, r3
 8002398:	429a      	cmp	r2, r3
 800239a:	d93f      	bls.n	800241c <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 800239c:	79fa      	ldrb	r2, [r7, #7]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	4a20      	ldr	r2, [pc, #128]	; (800242c <AUDIO_PLAYER_Start+0xb0>)
 80023aa:	4413      	add	r3, r2
 80023ac:	3301      	adds	r3, #1
 80023ae:	2201      	movs	r2, #1
 80023b0:	4619      	mov	r1, r3
 80023b2:	481d      	ldr	r0, [pc, #116]	; (8002428 <AUDIO_PLAYER_Start+0xac>)
 80023b4:	f00d fab4 	bl	800f920 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	222c      	movs	r2, #44	; 0x2c
 80023be:	491c      	ldr	r1, [pc, #112]	; (8002430 <AUDIO_PLAYER_Start+0xb4>)
 80023c0:	4819      	ldr	r0, [pc, #100]	; (8002428 <AUDIO_PLAYER_Start+0xac>)
 80023c2:	f00d fc6b 	bl	800fc9c <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 80023c6:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <AUDIO_PLAYER_Start+0xb4>)
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ffbe 	bl	800234c <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 80023d0:	4b18      	ldr	r3, [pc, #96]	; (8002434 <AUDIO_PLAYER_Start+0xb8>)
 80023d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 80023da:	2100      	movs	r1, #0
 80023dc:	4812      	ldr	r0, [pc, #72]	; (8002428 <AUDIO_PLAYER_Start+0xac>)
 80023de:	f00d fe44 	bl	801006a <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023ea:	4912      	ldr	r1, [pc, #72]	; (8002434 <AUDIO_PLAYER_Start+0xb8>)
 80023ec:	480e      	ldr	r0, [pc, #56]	; (8002428 <AUDIO_PLAYER_Start+0xac>)
 80023ee:	f00d fc55 	bl	800fc9c <f_read>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d111      	bne.n	800241c <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <AUDIO_PLAYER_Start+0xbc>)
 80023fa:	2203      	movs	r2, #3
 80023fc:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00b      	beq.n	800241c <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8002404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002408:	480a      	ldr	r0, [pc, #40]	; (8002434 <AUDIO_PLAYER_Start+0xb8>)
 800240a:	f7fe f90d 	bl	8000628 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a08      	ldr	r2, [pc, #32]	; (8002434 <AUDIO_PLAYER_Start+0xb8>)
 8002412:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002416:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8002418:	2300      	movs	r3, #0
 800241a:	e000      	b.n	800241e <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 800241c:	2301      	movs	r3, #1
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20001740 	.word	0x20001740
 800242c:	20001338 	.word	0x20001338
 8002430:	20001714 	.word	0x20001714
 8002434:	2000032c 	.word	0x2000032c
 8002438:	20001334 	.word	0x20001334

0800243c <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 800244a:	4b82      	ldr	r3, [pc, #520]	; (8002654 <AUDIO_PLAYER_Process+0x218>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	3b03      	subs	r3, #3
 8002450:	2b0a      	cmp	r3, #10
 8002452:	f200 80f6 	bhi.w	8002642 <AUDIO_PLAYER_Process+0x206>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <AUDIO_PLAYER_Process+0x20>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	08002489 	.word	0x08002489
 8002460:	08002643 	.word	0x08002643
 8002464:	0800254f 	.word	0x0800254f
 8002468:	0800259d 	.word	0x0800259d
 800246c:	08002643 	.word	0x08002643
 8002470:	08002643 	.word	0x08002643
 8002474:	0800253d 	.word	0x0800253d
 8002478:	080025df 	.word	0x080025df
 800247c:	080025eb 	.word	0x080025eb
 8002480:	080025f7 	.word	0x080025f7
 8002484:	0800261d 	.word	0x0800261d
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8002488:	4b73      	ldr	r3, [pc, #460]	; (8002658 <AUDIO_PLAYER_Process+0x21c>)
 800248a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4b72      	ldr	r3, [pc, #456]	; (800265c <AUDIO_PLAYER_Process+0x220>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d305      	bcc.n	80024a4 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002498:	2002      	movs	r0, #2
 800249a:	f7fe f91b 	bl	80006d4 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 800249e:	4b6d      	ldr	r3, [pc, #436]	; (8002654 <AUDIO_PLAYER_Process+0x218>)
 80024a0:	2205      	movs	r2, #5
 80024a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 80024a4:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <AUDIO_PLAYER_Process+0x21c>)
 80024a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d11e      	bne.n	80024ee <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 80024b0:	f107 0308 	add.w	r3, r7, #8
 80024b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024b8:	4967      	ldr	r1, [pc, #412]	; (8002658 <AUDIO_PLAYER_Process+0x21c>)
 80024ba:	4869      	ldr	r0, [pc, #420]	; (8002660 <AUDIO_PLAYER_Process+0x224>)
 80024bc:	f00d fbee 	bl	800fc9c <f_read>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80024c6:	2002      	movs	r0, #2
 80024c8:	f7fe f904 	bl	80006d4 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0bc      	b.n	800264a <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <AUDIO_PLAYER_Process+0x21c>)
 80024d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 80024da:	4b5f      	ldr	r3, [pc, #380]	; (8002658 <AUDIO_PLAYER_Process+0x21c>)
 80024dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4413      	add	r3, r2
 80024e6:	4a5c      	ldr	r2, [pc, #368]	; (8002658 <AUDIO_PLAYER_Process+0x21c>)
 80024e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ec:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 80024ee:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <AUDIO_PLAYER_Process+0x21c>)
 80024f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	f040 80a5 	bne.w	8002646 <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002504:	4957      	ldr	r1, [pc, #348]	; (8002664 <AUDIO_PLAYER_Process+0x228>)
 8002506:	4856      	ldr	r0, [pc, #344]	; (8002660 <AUDIO_PLAYER_Process+0x224>)
 8002508:	f00d fbc8 	bl	800fc9c <f_read>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002512:	2002      	movs	r0, #2
 8002514:	f7fe f8de 	bl	80006d4 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002518:	2301      	movs	r3, #1
 800251a:	e096      	b.n	800264a <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 800251c:	4b4e      	ldr	r3, [pc, #312]	; (8002658 <AUDIO_PLAYER_Process+0x21c>)
 800251e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8002526:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <AUDIO_PLAYER_Process+0x21c>)
 8002528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4413      	add	r3, r2
 8002532:	4a49      	ldr	r2, [pc, #292]	; (8002658 <AUDIO_PLAYER_Process+0x21c>)
 8002534:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002538:	6053      	str	r3, [r2, #4]
    }
    break;
 800253a:	e084      	b.n	8002646 <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800253c:	2002      	movs	r0, #2
 800253e:	f7fe f8c9 	bl	80006d4 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8002542:	4b44      	ldr	r3, [pc, #272]	; (8002654 <AUDIO_PLAYER_Process+0x218>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
    break;
 800254c:	e07c      	b.n	8002648 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 800254e:	4b46      	ldr	r3, [pc, #280]	; (8002668 <AUDIO_PLAYER_Process+0x22c>)
 8002550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002554:	b29b      	uxth	r3, r3
 8002556:	3301      	adds	r3, #1
 8002558:	b29b      	uxth	r3, r3
 800255a:	b21a      	sxth	r2, r3
 800255c:	4b42      	ldr	r3, [pc, #264]	; (8002668 <AUDIO_PLAYER_Process+0x22c>)
 800255e:	801a      	strh	r2, [r3, #0]
 8002560:	4b41      	ldr	r3, [pc, #260]	; (8002668 <AUDIO_PLAYER_Process+0x22c>)
 8002562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002566:	461c      	mov	r4, r3
 8002568:	f7fe fc76 	bl	8000e58 <AUDIO_GetWavObjectNumber>
 800256c:	4603      	mov	r3, r0
 800256e:	429c      	cmp	r4, r3
 8002570:	db09      	blt.n	8002586 <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <AUDIO_PLAYER_Process+0x22c>)
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	e002      	b.n	8002586 <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8002580:	4b34      	ldr	r3, [pc, #208]	; (8002654 <AUDIO_PLAYER_Process+0x218>)
 8002582:	2209      	movs	r2, #9
 8002584:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002586:	2002      	movs	r0, #2
 8002588:	f7fe f8a4 	bl	80006d4 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 800258c:	4b36      	ldr	r3, [pc, #216]	; (8002668 <AUDIO_PLAYER_Process+0x22c>)
 800258e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fef1 	bl	800237c <AUDIO_PLAYER_Start>
    break;    
 800259a:	e055      	b.n	8002648 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 800259c:	4b32      	ldr	r3, [pc, #200]	; (8002668 <AUDIO_PLAYER_Process+0x22c>)
 800259e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <AUDIO_PLAYER_Process+0x22c>)
 80025ac:	801a      	strh	r2, [r3, #0]
 80025ae:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <AUDIO_PLAYER_Process+0x22c>)
 80025b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	da07      	bge.n	80025c8 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 80025b8:	f7fe fc4e 	bl	8000e58 <AUDIO_GetWavObjectNumber>
 80025bc:	4603      	mov	r3, r0
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	b21a      	sxth	r2, r3
 80025c4:	4b28      	ldr	r3, [pc, #160]	; (8002668 <AUDIO_PLAYER_Process+0x22c>)
 80025c6:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7fe f883 	bl	80006d4 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <AUDIO_PLAYER_Process+0x22c>)
 80025d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fed0 	bl	800237c <AUDIO_PLAYER_Start>
    break;   
 80025dc:	e034      	b.n	8002648 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 80025de:	f7fe f84d 	bl	800067c <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <AUDIO_PLAYER_Process+0x218>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
    break;
 80025e8:	e02e      	b.n	8002648 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 80025ea:	f7fe f85d 	bl	80006a8 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <AUDIO_PLAYER_Process+0x218>)
 80025f0:	2203      	movs	r2, #3
 80025f2:	701a      	strb	r2, [r3, #0]
    break;
 80025f4:	e028      	b.n	8002648 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <AUDIO_PLAYER_Process+0x230>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b5a      	cmp	r3, #90	; 0x5a
 80025fc:	d804      	bhi.n	8002608 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 80025fe:	4b1b      	ldr	r3, [pc, #108]	; (800266c <AUDIO_PLAYER_Process+0x230>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	330a      	adds	r3, #10
 8002604:	4a19      	ldr	r2, [pc, #100]	; (800266c <AUDIO_PLAYER_Process+0x230>)
 8002606:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <AUDIO_PLAYER_Process+0x230>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe f888 	bl	8000724 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <AUDIO_PLAYER_Process+0x218>)
 8002616:	2203      	movs	r2, #3
 8002618:	701a      	strb	r2, [r3, #0]
    break;
 800261a:	e015      	b.n	8002648 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <AUDIO_PLAYER_Process+0x230>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b09      	cmp	r3, #9
 8002622:	d904      	bls.n	800262e <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <AUDIO_PLAYER_Process+0x230>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3b0a      	subs	r3, #10
 800262a:	4a10      	ldr	r2, [pc, #64]	; (800266c <AUDIO_PLAYER_Process+0x230>)
 800262c:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <AUDIO_PLAYER_Process+0x230>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe f875 	bl	8000724 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <AUDIO_PLAYER_Process+0x218>)
 800263c:	2203      	movs	r2, #3
 800263e:	701a      	strb	r2, [r3, #0]
    break;
 8002640:	e002      	b.n	8002648 <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <AUDIO_PLAYER_Process+0x20c>
    break;
 8002646:	bf00      	nop
  }
  return audio_error;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}
 8002652:	bf00      	nop
 8002654:	20001334 	.word	0x20001334
 8002658:	2000032c 	.word	0x2000032c
 800265c:	20001714 	.word	0x20001714
 8002660:	20001740 	.word	0x20001740
 8002664:	20000b2c 	.word	0x20000b2c
 8002668:	20001336 	.word	0x20001336
 800266c:	2000003c 	.word	0x2000003c

08002670 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d104      	bne.n	8002686 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800267e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002682:	2202      	movs	r2, #2
 8002684:	701a      	strb	r2, [r3, #0]
  }
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	20001334 	.word	0x20001334
 8002694:	2000032c 	.word	0x2000032c

08002698 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d104      	bne.n	80026ae <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 80026a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
  }
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	20001334 	.word	0x20001334
 80026bc:	2000032c 	.word	0x2000032c

080026c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c4:	480d      	ldr	r0, [pc, #52]	; (80026fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026c6:	490e      	ldr	r1, [pc, #56]	; (8002700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026c8:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026dc:	4c0b      	ldr	r4, [pc, #44]	; (800270c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ea:	f7ff fe1d 	bl	8002328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ee:	f00e fd27 	bl	8011140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f2:	f7ff f9c3 	bl	8001a7c <main>
  bx  lr    
 80026f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002700:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002704:	08011f68 	.word	0x08011f68
  ldr r2, =_sbss
 8002708:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 800270c:	2000260c 	.word	0x2000260c

08002710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <HAL_Init+0x40>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <HAL_Init+0x40>)
 800272a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_Init+0x40>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273c:	2003      	movs	r0, #3
 800273e:	f000 f94f 	bl	80029e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002742:	2000      	movs	r0, #0
 8002744:	f000 f808 	bl	8002758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002748:	f7ff fbc4 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00

08002758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_InitTick+0x54>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_InitTick+0x58>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800276e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f967 	bl	8002a4a <HAL_SYSTICK_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00e      	b.n	80027a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b0f      	cmp	r3, #15
 800278a:	d80a      	bhi.n	80027a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278c:	2200      	movs	r2, #0
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	f000 f92f 	bl	80029f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002798:	4a06      	ldr	r2, [pc, #24]	; (80027b4 <HAL_InitTick+0x5c>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000038 	.word	0x20000038
 80027b0:	20000044 	.word	0x20000044
 80027b4:	20000040 	.word	0x20000040

080027b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_IncTick+0x20>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x24>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_IncTick+0x24>)
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000044 	.word	0x20000044
 80027dc:	20001970 	.word	0x20001970

080027e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_GetTick+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20001970 	.word	0x20001970

080027f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff ffee 	bl	80027e0 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d005      	beq.n	800281e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_Delay+0x44>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800281e:	bf00      	nop
 8002820:	f7ff ffde 	bl	80027e0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	429a      	cmp	r2, r3
 800282e:	d8f7      	bhi.n	8002820 <HAL_Delay+0x28>
  {
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000044 	.word	0x20000044

08002840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800285c:	4013      	ands	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800286c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002872:	4a04      	ldr	r2, [pc, #16]	; (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <__NVIC_GetPriorityGrouping+0x18>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	f003 0307 	and.w	r3, r3, #7
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	db0b      	blt.n	80028ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	4907      	ldr	r1, [pc, #28]	; (80028dc <__NVIC_EnableIRQ+0x38>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2001      	movs	r0, #1
 80028c6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000e100 	.word	0xe000e100

080028e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	db0a      	blt.n	800290a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	490c      	ldr	r1, [pc, #48]	; (800292c <__NVIC_SetPriority+0x4c>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	0112      	lsls	r2, r2, #4
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	440b      	add	r3, r1
 8002904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002908:	e00a      	b.n	8002920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4908      	ldr	r1, [pc, #32]	; (8002930 <__NVIC_SetPriority+0x50>)
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	3b04      	subs	r3, #4
 8002918:	0112      	lsls	r2, r2, #4
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	440b      	add	r3, r1
 800291e:	761a      	strb	r2, [r3, #24]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000e100 	.word	0xe000e100
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f1c3 0307 	rsb	r3, r3, #7
 800294e:	2b04      	cmp	r3, #4
 8002950:	bf28      	it	cs
 8002952:	2304      	movcs	r3, #4
 8002954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3304      	adds	r3, #4
 800295a:	2b06      	cmp	r3, #6
 800295c:	d902      	bls.n	8002964 <NVIC_EncodePriority+0x30>
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3b03      	subs	r3, #3
 8002962:	e000      	b.n	8002966 <NVIC_EncodePriority+0x32>
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	401a      	ands	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800297c:	f04f 31ff 	mov.w	r1, #4294967295
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	43d9      	mvns	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	4313      	orrs	r3, r2
         );
}
 800298e:	4618      	mov	r0, r3
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ac:	d301      	bcc.n	80029b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00f      	b.n	80029d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <SysTick_Config+0x40>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ba:	210f      	movs	r1, #15
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	f7ff ff8e 	bl	80028e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <SysTick_Config+0x40>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ca:	4b04      	ldr	r3, [pc, #16]	; (80029dc <SysTick_Config+0x40>)
 80029cc:	2207      	movs	r2, #7
 80029ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	e000e010 	.word	0xe000e010

080029e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ff29 	bl	8002840 <__NVIC_SetPriorityGrouping>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b086      	sub	sp, #24
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a08:	f7ff ff3e 	bl	8002888 <__NVIC_GetPriorityGrouping>
 8002a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	6978      	ldr	r0, [r7, #20]
 8002a14:	f7ff ff8e 	bl	8002934 <NVIC_EncodePriority>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff5d 	bl	80028e0 <__NVIC_SetPriority>
}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff31 	bl	80028a4 <__NVIC_EnableIRQ>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ffa2 	bl	800299c <SysTick_Config>
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a70:	f7ff feb6 	bl	80027e0 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e099      	b.n	8002bb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa0:	e00f      	b.n	8002ac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aa2:	f7ff fe9d 	bl	80027e0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d908      	bls.n	8002ac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e078      	b.n	8002bb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e8      	bne.n	8002aa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <HAL_DMA_Init+0x158>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d107      	bne.n	8002b2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4313      	orrs	r3, r2
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f023 0307 	bic.w	r3, r3, #7
 8002b42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d117      	bne.n	8002b86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fb5f 	bl	800322c <DMA_CheckFifoParam>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2240      	movs	r2, #64	; 0x40
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b82:	2301      	movs	r3, #1
 8002b84:	e016      	b.n	8002bb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fb16 	bl	80031c0 <DMA_CalcBaseAndBitshift>
 8002b94:	4603      	mov	r3, r0
 8002b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	223f      	movs	r2, #63	; 0x3f
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	f010803f 	.word	0xf010803f

08002bc0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e050      	b.n	8002c74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d101      	bne.n	8002be2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
 8002be0:	e048      	b.n	8002c74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2221      	movs	r2, #33	; 0x21
 8002c20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 facc 	bl	80031c0 <DMA_CalcBaseAndBitshift>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	223f      	movs	r2, #63	; 0x3f
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_DMA_Start_IT+0x26>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e040      	b.n	8002d24 <HAL_DMA_Start_IT+0xa8>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d12f      	bne.n	8002d16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fa4a 	bl	8003164 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	223f      	movs	r2, #63	; 0x3f
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0216 	orr.w	r2, r2, #22
 8002cea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0208 	orr.w	r2, r2, #8
 8002d02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e005      	b.n	8002d22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d3a:	f7ff fd51 	bl	80027e0 <HAL_GetTick>
 8002d3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d008      	beq.n	8002d5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e052      	b.n	8002e04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0216 	bic.w	r2, r2, #22
 8002d6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d103      	bne.n	8002d8e <HAL_DMA_Abort+0x62>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0208 	bic.w	r2, r2, #8
 8002d9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dae:	e013      	b.n	8002dd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db0:	f7ff fd16 	bl	80027e0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d90c      	bls.n	8002dd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e015      	b.n	8002e04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1e4      	bne.n	8002db0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	223f      	movs	r2, #63	; 0x3f
 8002dec:	409a      	lsls	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d004      	beq.n	8002e2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00c      	b.n	8002e44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2205      	movs	r2, #5
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e5c:	4b8e      	ldr	r3, [pc, #568]	; (8003098 <HAL_DMA_IRQHandler+0x248>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a8e      	ldr	r2, [pc, #568]	; (800309c <HAL_DMA_IRQHandler+0x24c>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0a9b      	lsrs	r3, r3, #10
 8002e68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	2208      	movs	r2, #8
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01a      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d013      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0204 	bic.w	r2, r2, #4
 8002ea2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d012      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	2201      	movs	r2, #1
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	f043 0202 	orr.w	r2, r3, #2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d012      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2204      	movs	r2, #4
 8002f16:	409a      	lsls	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f043 0204 	orr.w	r2, r3, #4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d043      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d03c      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d018      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d108      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d024      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
 8002f7e:	e01f      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01b      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
 8002f90:	e016      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d107      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0208 	bic.w	r2, r2, #8
 8002fae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 808f 	beq.w	80030f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8087 	beq.w	80030f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d136      	bne.n	8003068 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0216 	bic.w	r2, r2, #22
 8003008:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003018:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <HAL_DMA_IRQHandler+0x1da>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0208 	bic.w	r2, r2, #8
 8003038:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	223f      	movs	r2, #63	; 0x3f
 8003040:	409a      	lsls	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	2b00      	cmp	r3, #0
 800305c:	d07e      	beq.n	800315c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
        }
        return;
 8003066:	e079      	b.n	800315c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01d      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10d      	bne.n	80030a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	2b00      	cmp	r3, #0
 800308a:	d031      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
 8003094:	e02c      	b.n	80030f0 <HAL_DMA_IRQHandler+0x2a0>
 8003096:	bf00      	nop
 8003098:	20000038 	.word	0x20000038
 800309c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d023      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
 80030b0:	e01e      	b.n	80030f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10f      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0210 	bic.w	r2, r2, #16
 80030ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d032      	beq.n	800315e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d022      	beq.n	800314a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2205      	movs	r2, #5
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	3301      	adds	r3, #1
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	429a      	cmp	r2, r3
 8003126:	d307      	bcc.n	8003138 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f2      	bne.n	800311c <HAL_DMA_IRQHandler+0x2cc>
 8003136:	e000      	b.n	800313a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003138:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
 800315a:	e000      	b.n	800315e <HAL_DMA_IRQHandler+0x30e>
        return;
 800315c:	bf00      	nop
    }
  }
}
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003180:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d108      	bne.n	80031a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031a2:	e007      	b.n	80031b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	3b10      	subs	r3, #16
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <DMA_CalcBaseAndBitshift+0x64>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031da:	4a13      	ldr	r2, [pc, #76]	; (8003228 <DMA_CalcBaseAndBitshift+0x68>)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d909      	bls.n	8003202 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	1d1a      	adds	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003200:	e007      	b.n	8003212 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	aaaaaaab 	.word	0xaaaaaaab
 8003228:	08011ac8 	.word	0x08011ac8

0800322c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d11f      	bne.n	8003286 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b03      	cmp	r3, #3
 800324a:	d856      	bhi.n	80032fa <DMA_CheckFifoParam+0xce>
 800324c:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <DMA_CheckFifoParam+0x28>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	08003265 	.word	0x08003265
 8003258:	08003277 	.word	0x08003277
 800325c:	08003265 	.word	0x08003265
 8003260:	080032fb 	.word	0x080032fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d046      	beq.n	80032fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003274:	e043      	b.n	80032fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800327e:	d140      	bne.n	8003302 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003284:	e03d      	b.n	8003302 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328e:	d121      	bne.n	80032d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d837      	bhi.n	8003306 <DMA_CheckFifoParam+0xda>
 8003296:	a201      	add	r2, pc, #4	; (adr r2, 800329c <DMA_CheckFifoParam+0x70>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	080032b3 	.word	0x080032b3
 80032a4:	080032ad 	.word	0x080032ad
 80032a8:	080032c5 	.word	0x080032c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
      break;
 80032b0:	e030      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d025      	beq.n	800330a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c2:	e022      	b.n	800330a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032cc:	d11f      	bne.n	800330e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032d2:	e01c      	b.n	800330e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d903      	bls.n	80032e2 <DMA_CheckFifoParam+0xb6>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d003      	beq.n	80032e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032e0:	e018      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
      break;
 80032e6:	e015      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00e      	beq.n	8003312 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      break;
 80032f8:	e00b      	b.n	8003312 <DMA_CheckFifoParam+0xe6>
      break;
 80032fa:	bf00      	nop
 80032fc:	e00a      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;
 80032fe:	bf00      	nop
 8003300:	e008      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;
 8003302:	bf00      	nop
 8003304:	e006      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;
 8003306:	bf00      	nop
 8003308:	e004      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;
 800330a:	bf00      	nop
 800330c:	e002      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;   
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;
 8003312:	bf00      	nop
    }
  } 
  
  return status; 
 8003314:	7bfb      	ldrb	r3, [r7, #15]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop

08003324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	; 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e159      	b.n	80035f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003340:	2201      	movs	r2, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	429a      	cmp	r2, r3
 800335a:	f040 8148 	bne.w	80035ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d005      	beq.n	8003376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003372:	2b02      	cmp	r3, #2
 8003374:	d130      	bne.n	80033d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	2203      	movs	r2, #3
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033ac:	2201      	movs	r2, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 0201 	and.w	r2, r3, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d017      	beq.n	8003414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d123      	bne.n	8003468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	08da      	lsrs	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3208      	adds	r2, #8
 8003428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	220f      	movs	r2, #15
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	08da      	lsrs	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3208      	adds	r2, #8
 8003462:	69b9      	ldr	r1, [r7, #24]
 8003464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2203      	movs	r2, #3
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0203 	and.w	r2, r3, #3
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80a2 	beq.w	80035ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b57      	ldr	r3, [pc, #348]	; (800360c <HAL_GPIO_Init+0x2e8>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	4a56      	ldr	r2, [pc, #344]	; (800360c <HAL_GPIO_Init+0x2e8>)
 80034b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ba:	4b54      	ldr	r3, [pc, #336]	; (800360c <HAL_GPIO_Init+0x2e8>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034c6:	4a52      	ldr	r2, [pc, #328]	; (8003610 <HAL_GPIO_Init+0x2ec>)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3302      	adds	r3, #2
 80034ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	220f      	movs	r2, #15
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a49      	ldr	r2, [pc, #292]	; (8003614 <HAL_GPIO_Init+0x2f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d019      	beq.n	8003526 <HAL_GPIO_Init+0x202>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a48      	ldr	r2, [pc, #288]	; (8003618 <HAL_GPIO_Init+0x2f4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_GPIO_Init+0x1fe>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a47      	ldr	r2, [pc, #284]	; (800361c <HAL_GPIO_Init+0x2f8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00d      	beq.n	800351e <HAL_GPIO_Init+0x1fa>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a46      	ldr	r2, [pc, #280]	; (8003620 <HAL_GPIO_Init+0x2fc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <HAL_GPIO_Init+0x1f6>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a45      	ldr	r2, [pc, #276]	; (8003624 <HAL_GPIO_Init+0x300>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <HAL_GPIO_Init+0x1f2>
 8003512:	2304      	movs	r3, #4
 8003514:	e008      	b.n	8003528 <HAL_GPIO_Init+0x204>
 8003516:	2307      	movs	r3, #7
 8003518:	e006      	b.n	8003528 <HAL_GPIO_Init+0x204>
 800351a:	2303      	movs	r3, #3
 800351c:	e004      	b.n	8003528 <HAL_GPIO_Init+0x204>
 800351e:	2302      	movs	r3, #2
 8003520:	e002      	b.n	8003528 <HAL_GPIO_Init+0x204>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <HAL_GPIO_Init+0x204>
 8003526:	2300      	movs	r3, #0
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	f002 0203 	and.w	r2, r2, #3
 800352e:	0092      	lsls	r2, r2, #2
 8003530:	4093      	lsls	r3, r2
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003538:	4935      	ldr	r1, [pc, #212]	; (8003610 <HAL_GPIO_Init+0x2ec>)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	3302      	adds	r3, #2
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003546:	4b38      	ldr	r3, [pc, #224]	; (8003628 <HAL_GPIO_Init+0x304>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800356a:	4a2f      	ldr	r2, [pc, #188]	; (8003628 <HAL_GPIO_Init+0x304>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003570:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <HAL_GPIO_Init+0x304>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003594:	4a24      	ldr	r2, [pc, #144]	; (8003628 <HAL_GPIO_Init+0x304>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800359a:	4b23      	ldr	r3, [pc, #140]	; (8003628 <HAL_GPIO_Init+0x304>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035be:	4a1a      	ldr	r2, [pc, #104]	; (8003628 <HAL_GPIO_Init+0x304>)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <HAL_GPIO_Init+0x304>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e8:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <HAL_GPIO_Init+0x304>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	f67f aea2 	bls.w	8003340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	40013800 	.word	0x40013800
 8003614:	40020000 	.word	0x40020000
 8003618:	40020400 	.word	0x40020400
 800361c:	40020800 	.word	0x40020800
 8003620:	40020c00 	.word	0x40020c00
 8003624:	40021000 	.word	0x40021000
 8003628:	40013c00 	.word	0x40013c00

0800362c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e0bb      	b.n	80037c0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003648:	2201      	movs	r2, #1
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	429a      	cmp	r2, r3
 8003660:	f040 80ab 	bne.w	80037ba <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003664:	4a5c      	ldr	r2, [pc, #368]	; (80037d8 <HAL_GPIO_DeInit+0x1ac>)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	089b      	lsrs	r3, r3, #2
 800366a:	3302      	adds	r3, #2
 800366c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003670:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	220f      	movs	r2, #15
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	4013      	ands	r3, r2
 8003684:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a54      	ldr	r2, [pc, #336]	; (80037dc <HAL_GPIO_DeInit+0x1b0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d019      	beq.n	80036c2 <HAL_GPIO_DeInit+0x96>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a53      	ldr	r2, [pc, #332]	; (80037e0 <HAL_GPIO_DeInit+0x1b4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_GPIO_DeInit+0x92>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a52      	ldr	r2, [pc, #328]	; (80037e4 <HAL_GPIO_DeInit+0x1b8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00d      	beq.n	80036ba <HAL_GPIO_DeInit+0x8e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <HAL_GPIO_DeInit+0x1bc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <HAL_GPIO_DeInit+0x8a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a50      	ldr	r2, [pc, #320]	; (80037ec <HAL_GPIO_DeInit+0x1c0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_GPIO_DeInit+0x86>
 80036ae:	2304      	movs	r3, #4
 80036b0:	e008      	b.n	80036c4 <HAL_GPIO_DeInit+0x98>
 80036b2:	2307      	movs	r3, #7
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_DeInit+0x98>
 80036b6:	2303      	movs	r3, #3
 80036b8:	e004      	b.n	80036c4 <HAL_GPIO_DeInit+0x98>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e002      	b.n	80036c4 <HAL_GPIO_DeInit+0x98>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_GPIO_DeInit+0x98>
 80036c2:	2300      	movs	r3, #0
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	f002 0203 	and.w	r2, r2, #3
 80036ca:	0092      	lsls	r2, r2, #2
 80036cc:	4093      	lsls	r3, r2
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d132      	bne.n	800373a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80036d4:	4b46      	ldr	r3, [pc, #280]	; (80037f0 <HAL_GPIO_DeInit+0x1c4>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	43db      	mvns	r3, r3
 80036dc:	4944      	ldr	r1, [pc, #272]	; (80037f0 <HAL_GPIO_DeInit+0x1c4>)
 80036de:	4013      	ands	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80036e2:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <HAL_GPIO_DeInit+0x1c4>)
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	4941      	ldr	r1, [pc, #260]	; (80037f0 <HAL_GPIO_DeInit+0x1c4>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80036f0:	4b3f      	ldr	r3, [pc, #252]	; (80037f0 <HAL_GPIO_DeInit+0x1c4>)
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	493d      	ldr	r1, [pc, #244]	; (80037f0 <HAL_GPIO_DeInit+0x1c4>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80036fe:	4b3c      	ldr	r3, [pc, #240]	; (80037f0 <HAL_GPIO_DeInit+0x1c4>)
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43db      	mvns	r3, r3
 8003706:	493a      	ldr	r1, [pc, #232]	; (80037f0 <HAL_GPIO_DeInit+0x1c4>)
 8003708:	4013      	ands	r3, r2
 800370a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	220f      	movs	r2, #15
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800371c:	4a2e      	ldr	r2, [pc, #184]	; (80037d8 <HAL_GPIO_DeInit+0x1ac>)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	089b      	lsrs	r3, r3, #2
 8003722:	3302      	adds	r3, #2
 8003724:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	43da      	mvns	r2, r3
 800372c:	482a      	ldr	r0, [pc, #168]	; (80037d8 <HAL_GPIO_DeInit+0x1ac>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	400a      	ands	r2, r1
 8003734:	3302      	adds	r3, #2
 8003736:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	2103      	movs	r1, #3
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	401a      	ands	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	08da      	lsrs	r2, r3, #3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3208      	adds	r2, #8
 8003758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	220f      	movs	r2, #15
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	08d2      	lsrs	r2, r2, #3
 8003770:	4019      	ands	r1, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3208      	adds	r2, #8
 8003776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	2103      	movs	r1, #3
 8003784:	fa01 f303 	lsl.w	r3, r1, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	401a      	ands	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	2101      	movs	r1, #1
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	fa01 f303 	lsl.w	r3, r1, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	401a      	ands	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	2103      	movs	r1, #3
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	401a      	ands	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3301      	adds	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	f67f af40 	bls.w	8003648 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40013800 	.word	0x40013800
 80037dc:	40020000 	.word	0x40020000
 80037e0:	40020400 	.word	0x40020400
 80037e4:	40020800 	.word	0x40020800
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40013c00 	.word	0x40013c00

080037f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	807b      	strh	r3, [r7, #2]
 8003800:	4613      	mov	r3, r2
 8003802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003804:	787b      	ldrb	r3, [r7, #1]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800380a:	887a      	ldrh	r2, [r7, #2]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003810:	e003      	b.n	800381a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003812:	887b      	ldrh	r3, [r7, #2]
 8003814:	041a      	lsls	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	619a      	str	r2, [r3, #24]
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003838:	887a      	ldrh	r2, [r7, #2]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4013      	ands	r3, r2
 800383e:	041a      	lsls	r2, r3, #16
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	43d9      	mvns	r1, r3
 8003844:	887b      	ldrh	r3, [r7, #2]
 8003846:	400b      	ands	r3, r1
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	619a      	str	r2, [r3, #24]
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d006      	beq.n	8003880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003872:	4a05      	ldr	r2, [pc, #20]	; (8003888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f806 	bl	800388c <HAL_GPIO_EXTI_Callback>
  }
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40013c00 	.word	0x40013c00

0800388c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80038a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a4:	b08f      	sub	sp, #60	; 0x3c
 80038a6:	af0a      	add	r7, sp, #40	; 0x28
 80038a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e054      	b.n	800395e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f00d f82a 	bl	8010928 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2203      	movs	r2, #3
 80038d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f005 fc34 	bl	8009160 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	687e      	ldr	r6, [r7, #4]
 8003900:	466d      	mov	r5, sp
 8003902:	f106 0410 	add.w	r4, r6, #16
 8003906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800390a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800390c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800390e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003912:	e885 0003 	stmia.w	r5, {r0, r1}
 8003916:	1d33      	adds	r3, r6, #4
 8003918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800391a:	6838      	ldr	r0, [r7, #0]
 800391c:	f005 fbae 	bl	800907c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f005 fc2b 	bl	8009182 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	687e      	ldr	r6, [r7, #4]
 8003934:	466d      	mov	r5, sp
 8003936:	f106 0410 	add.w	r4, r6, #16
 800393a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003942:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003946:	e885 0003 	stmia.w	r5, {r0, r1}
 800394a:	1d33      	adds	r3, r6, #4
 800394c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800394e:	6838      	ldr	r0, [r7, #0]
 8003950:	f005 fdb4 	bl	80094bc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003966 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003966:	b590      	push	{r4, r7, lr}
 8003968:	b089      	sub	sp, #36	; 0x24
 800396a:	af04      	add	r7, sp, #16
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	4608      	mov	r0, r1
 8003970:	4611      	mov	r1, r2
 8003972:	461a      	mov	r2, r3
 8003974:	4603      	mov	r3, r0
 8003976:	70fb      	strb	r3, [r7, #3]
 8003978:	460b      	mov	r3, r1
 800397a:	70bb      	strb	r3, [r7, #2]
 800397c:	4613      	mov	r3, r2
 800397e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_HCD_HC_Init+0x28>
 800398a:	2302      	movs	r3, #2
 800398c:	e076      	b.n	8003a7c <HAL_HCD_HC_Init+0x116>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	333d      	adds	r3, #61	; 0x3d
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	212c      	movs	r1, #44	; 0x2c
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3338      	adds	r3, #56	; 0x38
 80039b6:	787a      	ldrb	r2, [r7, #1]
 80039b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	3340      	adds	r3, #64	; 0x40
 80039c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80039ca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	3339      	adds	r3, #57	; 0x39
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	212c      	movs	r1, #44	; 0x2c
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	4413      	add	r3, r2
 80039ea:	333f      	adds	r3, #63	; 0x3f
 80039ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80039f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	78ba      	ldrb	r2, [r7, #2]
 80039f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039fa:	b2d0      	uxtb	r0, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	212c      	movs	r1, #44	; 0x2c
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	333a      	adds	r3, #58	; 0x3a
 8003a08:	4602      	mov	r2, r0
 8003a0a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003a0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da09      	bge.n	8003a28 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	212c      	movs	r1, #44	; 0x2c
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	333b      	adds	r3, #59	; 0x3b
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	e008      	b.n	8003a3a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	212c      	movs	r1, #44	; 0x2c
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	333b      	adds	r3, #59	; 0x3b
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	212c      	movs	r1, #44	; 0x2c
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	333c      	adds	r3, #60	; 0x3c
 8003a48:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003a4c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	787c      	ldrb	r4, [r7, #1]
 8003a54:	78ba      	ldrb	r2, [r7, #2]
 8003a56:	78f9      	ldrb	r1, [r7, #3]
 8003a58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003a5a:	9302      	str	r3, [sp, #8]
 8003a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	4623      	mov	r3, r4
 8003a6a:	f005 fead 	bl	80097c8 <USB_HC_Init>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd90      	pop	{r4, r7, pc}

08003a84 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_HCD_HC_Halt+0x1e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e00f      	b.n	8003ac2 <HAL_HCD_HC_Halt+0x3e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f006 f8fd 	bl	8009cb2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	70fb      	strb	r3, [r7, #3]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	70bb      	strb	r3, [r7, #2]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	212c      	movs	r1, #44	; 0x2c
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	333b      	adds	r3, #59	; 0x3b
 8003af4:	78ba      	ldrb	r2, [r7, #2]
 8003af6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	212c      	movs	r1, #44	; 0x2c
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	333f      	adds	r3, #63	; 0x3f
 8003b06:	787a      	ldrb	r2, [r7, #1]
 8003b08:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003b0a:	7c3b      	ldrb	r3, [r7, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d112      	bne.n	8003b36 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	212c      	movs	r1, #44	; 0x2c
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3342      	adds	r3, #66	; 0x42
 8003b1e:	2203      	movs	r2, #3
 8003b20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	333d      	adds	r3, #61	; 0x3d
 8003b30:	7f3a      	ldrb	r2, [r7, #28]
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e008      	b.n	8003b48 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	3342      	adds	r3, #66	; 0x42
 8003b44:	2202      	movs	r2, #2
 8003b46:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003b48:	787b      	ldrb	r3, [r7, #1]
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	f200 80c6 	bhi.w	8003cdc <HAL_HCD_HC_SubmitRequest+0x210>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003cc9 	.word	0x08003cc9
 8003b60:	08003bcd 	.word	0x08003bcd
 8003b64:	08003c4b 	.word	0x08003c4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003b68:	7c3b      	ldrb	r3, [r7, #16]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	f040 80b8 	bne.w	8003ce0 <HAL_HCD_HC_SubmitRequest+0x214>
 8003b70:	78bb      	ldrb	r3, [r7, #2]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f040 80b4 	bne.w	8003ce0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003b78:	8b3b      	ldrh	r3, [r7, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d108      	bne.n	8003b90 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	3355      	adds	r3, #85	; 0x55
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3355      	adds	r3, #85	; 0x55
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	3342      	adds	r3, #66	; 0x42
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003bb6:	e093      	b.n	8003ce0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	212c      	movs	r1, #44	; 0x2c
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3342      	adds	r3, #66	; 0x42
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	701a      	strb	r2, [r3, #0]
      break;
 8003bca:	e089      	b.n	8003ce0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003bcc:	78bb      	ldrb	r3, [r7, #2]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d11d      	bne.n	8003c0e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	3355      	adds	r3, #85	; 0x55
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	212c      	movs	r1, #44	; 0x2c
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3342      	adds	r3, #66	; 0x42
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003bf8:	e073      	b.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	212c      	movs	r1, #44	; 0x2c
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	4413      	add	r3, r2
 8003c06:	3342      	adds	r3, #66	; 0x42
 8003c08:	2202      	movs	r2, #2
 8003c0a:	701a      	strb	r2, [r3, #0]
      break;
 8003c0c:	e069      	b.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	212c      	movs	r1, #44	; 0x2c
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	3354      	adds	r3, #84	; 0x54
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	212c      	movs	r1, #44	; 0x2c
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3342      	adds	r3, #66	; 0x42
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
      break;
 8003c34:	e055      	b.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	212c      	movs	r1, #44	; 0x2c
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	3342      	adds	r3, #66	; 0x42
 8003c44:	2202      	movs	r2, #2
 8003c46:	701a      	strb	r2, [r3, #0]
      break;
 8003c48:	e04b      	b.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003c4a:	78bb      	ldrb	r3, [r7, #2]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d11d      	bne.n	8003c8c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3355      	adds	r3, #85	; 0x55
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3342      	adds	r3, #66	; 0x42
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c76:	e034      	b.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	3342      	adds	r3, #66	; 0x42
 8003c86:	2202      	movs	r2, #2
 8003c88:	701a      	strb	r2, [r3, #0]
      break;
 8003c8a:	e02a      	b.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3354      	adds	r3, #84	; 0x54
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	3342      	adds	r3, #66	; 0x42
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
      break;
 8003cb2:	e016      	b.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	212c      	movs	r1, #44	; 0x2c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3342      	adds	r3, #66	; 0x42
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	701a      	strb	r2, [r3, #0]
      break;
 8003cc6:	e00c      	b.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	212c      	movs	r1, #44	; 0x2c
 8003cce:	fb01 f303 	mul.w	r3, r1, r3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3342      	adds	r3, #66	; 0x42
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
      break;
 8003cda:	e002      	b.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003ce0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	212c      	movs	r1, #44	; 0x2c
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	3344      	adds	r3, #68	; 0x44
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	8b3a      	ldrh	r2, [r7, #24]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	202c      	movs	r0, #44	; 0x2c
 8003cfc:	fb00 f303 	mul.w	r3, r0, r3
 8003d00:	440b      	add	r3, r1
 8003d02:	334c      	adds	r3, #76	; 0x4c
 8003d04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	212c      	movs	r1, #44	; 0x2c
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	3360      	adds	r3, #96	; 0x60
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	212c      	movs	r1, #44	; 0x2c
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	3350      	adds	r3, #80	; 0x50
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	3339      	adds	r3, #57	; 0x39
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	3361      	adds	r3, #97	; 0x61
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	222c      	movs	r2, #44	; 0x2c
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	3338      	adds	r3, #56	; 0x38
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	18d1      	adds	r1, r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	f005 fe50 	bl	8009a0c <USB_HC_StartXfer>
 8003d6c:	4603      	mov	r3, r0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop

08003d78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f005 fb51 	bl	8009436 <USB_GetMode>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	f040 80f6 	bne.w	8003f88 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f005 fb35 	bl	8009410 <USB_ReadInterrupts>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80ec 	beq.w	8003f86 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f005 fb2c 	bl	8009410 <USB_ReadInterrupts>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dc2:	d104      	bne.n	8003dce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003dcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f005 fb1c 	bl	8009410 <USB_ReadInterrupts>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de2:	d104      	bne.n	8003dee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f005 fb0c 	bl	8009410 <USB_ReadInterrupts>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e02:	d104      	bne.n	8003e0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f005 fafc 	bl	8009410 <USB_ReadInterrupts>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d103      	bne.n	8003e2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2202      	movs	r2, #2
 8003e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f005 faee 	bl	8009410 <USB_ReadInterrupts>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3e:	d11c      	bne.n	8003e7a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10f      	bne.n	8003e7a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e5a:	2110      	movs	r1, #16
 8003e5c:	6938      	ldr	r0, [r7, #16]
 8003e5e:	f005 f9dd 	bl	800921c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003e62:	6938      	ldr	r0, [r7, #16]
 8003e64:	f005 fa0e 	bl	8009284 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f005 fbe4 	bl	800963c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f00c fdd5 	bl	8010a24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f005 fac6 	bl	8009410 <USB_ReadInterrupts>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e8e:	d102      	bne.n	8003e96 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f001 f89e 	bl	8004fd2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f005 fab8 	bl	8009410 <USB_ReadInterrupts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d106      	bne.n	8003eb8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f00c fd9e 	bl	80109ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f005 faa7 	bl	8009410 <USB_ReadInterrupts>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d101      	bne.n	8003ed0 <HAL_HCD_IRQHandler+0x158>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_HCD_IRQHandler+0x15a>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d012      	beq.n	8003efc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699a      	ldr	r2, [r3, #24]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0210 	bic.w	r2, r2, #16
 8003ee4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 ffa1 	bl	8004e2e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0210 	orr.w	r2, r2, #16
 8003efa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f005 fa85 	bl	8009410 <USB_ReadInterrupts>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f10:	d13a      	bne.n	8003f88 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f005 feba 	bl	8009c90 <USB_HC_ReadInterrupt>
 8003f1c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e025      	b.n	8003f70 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d018      	beq.n	8003f6a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4e:	d106      	bne.n	8003f5e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	4619      	mov	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f8ab 	bl	80040b2 <HCD_HC_IN_IRQHandler>
 8003f5c:	e005      	b.n	8003f6a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	4619      	mov	r1, r3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fbf9 	bl	800475c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d3d4      	bcc.n	8003f24 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f82:	615a      	str	r2, [r3, #20]
 8003f84:	e000      	b.n	8003f88 <HAL_HCD_IRQHandler+0x210>
      return;
 8003f86:	bf00      	nop
    }
  }
}
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_HCD_Start+0x16>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e013      	b.n	8003fcc <HAL_HCD_Start+0x3e>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f005 fba6 	bl	8009704 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f005 f8be 	bl	800913e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_HCD_Stop+0x16>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e00d      	b.n	8004006 <HAL_HCD_Stop+0x32>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f005 ff94 	bl	8009f24 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f005 fb48 	bl	80096b0 <USB_ResetPort>
 8004020:	4603      	mov	r3, r0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	212c      	movs	r1, #44	; 0x2c
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	3360      	adds	r3, #96	; 0x60
 8004044:	781b      	ldrb	r3, [r3, #0]
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	3350      	adds	r3, #80	; 0x50
 800406c:	681b      	ldr	r3, [r3, #0]
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f005 fb8c 	bl	80097a4 <USB_GetCurrentFrame>
 800408c:	4603      	mov	r3, r0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f005 fb67 	bl	8009776 <USB_GetHostSpeed>
 80040a8:	4603      	mov	r3, r0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d11a      	bne.n	8004118 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ee:	461a      	mov	r2, r3
 80040f0:	2304      	movs	r3, #4
 80040f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	212c      	movs	r1, #44	; 0x2c
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	4413      	add	r3, r2
 8004100:	3361      	adds	r3, #97	; 0x61
 8004102:	2206      	movs	r2, #6
 8004104:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f005 fdce 	bl	8009cb2 <USB_HC_Halt>
 8004116:	e0af      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412e:	d11b      	bne.n	8004168 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	461a      	mov	r2, r3
 800413e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004142:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	212c      	movs	r1, #44	; 0x2c
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	4413      	add	r3, r2
 8004150:	3361      	adds	r3, #97	; 0x61
 8004152:	2207      	movs	r2, #7
 8004154:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f005 fda6 	bl	8009cb2 <USB_HC_Halt>
 8004166:	e087      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4413      	add	r3, r2
 8004170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b20      	cmp	r3, #32
 800417c:	d109      	bne.n	8004192 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4413      	add	r3, r2
 8004186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418a:	461a      	mov	r2, r3
 800418c:	2320      	movs	r3, #32
 800418e:	6093      	str	r3, [r2, #8]
 8004190:	e072      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d11a      	bne.n	80041de <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b4:	461a      	mov	r2, r3
 80041b6:	2308      	movs	r3, #8
 80041b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	212c      	movs	r1, #44	; 0x2c
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	3361      	adds	r3, #97	; 0x61
 80041c8:	2205      	movs	r2, #5
 80041ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f005 fd6b 	bl	8009cb2 <USB_HC_Halt>
 80041dc:	e04c      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f4:	d11b      	bne.n	800422e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	461a      	mov	r2, r3
 8004204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004208:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	3361      	adds	r3, #97	; 0x61
 8004218:	2208      	movs	r2, #8
 800421a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f005 fd43 	bl	8009cb2 <USB_HC_Halt>
 800422c:	e024      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4413      	add	r3, r2
 8004236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d119      	bne.n	8004278 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004250:	461a      	mov	r2, r3
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	212c      	movs	r1, #44	; 0x2c
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	4413      	add	r3, r2
 8004262:	3361      	adds	r3, #97	; 0x61
 8004264:	2206      	movs	r2, #6
 8004266:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f005 fd1d 	bl	8009cb2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4413      	add	r3, r2
 8004280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800428a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428e:	d112      	bne.n	80042b6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f005 fd09 	bl	8009cb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ac:	461a      	mov	r2, r3
 80042ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80042b4:	e24e      	b.n	8004754 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	f040 80df 	bne.w	800448c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d019      	beq.n	800430a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	3348      	adds	r3, #72	; 0x48
 80042e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	0159      	lsls	r1, r3, #5
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80042f8:	1ad2      	subs	r2, r2, r3
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	202c      	movs	r0, #44	; 0x2c
 8004300:	fb00 f303 	mul.w	r3, r0, r3
 8004304:	440b      	add	r3, r1
 8004306:	3350      	adds	r3, #80	; 0x50
 8004308:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	212c      	movs	r1, #44	; 0x2c
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	3361      	adds	r3, #97	; 0x61
 8004318:	2201      	movs	r2, #1
 800431a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	335c      	adds	r3, #92	; 0x5c
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433a:	461a      	mov	r2, r3
 800433c:	2301      	movs	r3, #1
 800433e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	212c      	movs	r1, #44	; 0x2c
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	4413      	add	r3, r2
 800434c:	333f      	adds	r3, #63	; 0x3f
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	212c      	movs	r1, #44	; 0x2c
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	333f      	adds	r3, #63	; 0x3f
 8004362:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004364:	2b02      	cmp	r3, #2
 8004366:	d111      	bne.n	800438c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f005 fc9d 	bl	8009cb2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	461a      	mov	r2, r3
 8004386:	2310      	movs	r3, #16
 8004388:	6093      	str	r3, [r2, #8]
 800438a:	e03a      	b.n	8004402 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	333f      	adds	r3, #63	; 0x3f
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d009      	beq.n	80043b4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	333f      	adds	r3, #63	; 0x3f
 80043ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d126      	bne.n	8004402 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	3360      	adds	r3, #96	; 0x60
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	b2d9      	uxtb	r1, r3
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	202c      	movs	r0, #44	; 0x2c
 80043f0:	fb00 f303 	mul.w	r3, r0, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	3360      	adds	r3, #96	; 0x60
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f00c fb1f 	bl	8010a40 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d12b      	bne.n	8004462 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	212c      	movs	r1, #44	; 0x2c
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	3348      	adds	r3, #72	; 0x48
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	202c      	movs	r0, #44	; 0x2c
 8004420:	fb00 f202 	mul.w	r2, r0, r2
 8004424:	440a      	add	r2, r1
 8004426:	3240      	adds	r2, #64	; 0x40
 8004428:	8812      	ldrh	r2, [r2, #0]
 800442a:	fbb3 f3f2 	udiv	r3, r3, r2
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 818e 	beq.w	8004754 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	212c      	movs	r1, #44	; 0x2c
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	4413      	add	r3, r2
 8004444:	3354      	adds	r3, #84	; 0x54
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	f083 0301 	eor.w	r3, r3, #1
 800444c:	b2d8      	uxtb	r0, r3
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	212c      	movs	r1, #44	; 0x2c
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	3354      	adds	r3, #84	; 0x54
 800445c:	4602      	mov	r2, r0
 800445e:	701a      	strb	r2, [r3, #0]
}
 8004460:	e178      	b.n	8004754 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	212c      	movs	r1, #44	; 0x2c
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	4413      	add	r3, r2
 800446e:	3354      	adds	r3, #84	; 0x54
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2d8      	uxtb	r0, r3
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	212c      	movs	r1, #44	; 0x2c
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	4413      	add	r3, r2
 8004484:	3354      	adds	r3, #84	; 0x54
 8004486:	4602      	mov	r2, r0
 8004488:	701a      	strb	r2, [r3, #0]
}
 800448a:	e163      	b.n	8004754 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4413      	add	r3, r2
 8004494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b02      	cmp	r3, #2
 80044a0:	f040 80f6 	bne.w	8004690 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	212c      	movs	r1, #44	; 0x2c
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	3361      	adds	r3, #97	; 0x61
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d109      	bne.n	80044cc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	212c      	movs	r1, #44	; 0x2c
 80044be:	fb01 f303 	mul.w	r3, r1, r3
 80044c2:	4413      	add	r3, r2
 80044c4:	3360      	adds	r3, #96	; 0x60
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	e0c9      	b.n	8004660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	212c      	movs	r1, #44	; 0x2c
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	3361      	adds	r3, #97	; 0x61
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d109      	bne.n	80044f4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	212c      	movs	r1, #44	; 0x2c
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	3360      	adds	r3, #96	; 0x60
 80044ee:	2205      	movs	r2, #5
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e0b5      	b.n	8004660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	212c      	movs	r1, #44	; 0x2c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	3361      	adds	r3, #97	; 0x61
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b06      	cmp	r3, #6
 8004506:	d009      	beq.n	800451c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	212c      	movs	r1, #44	; 0x2c
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	4413      	add	r3, r2
 8004514:	3361      	adds	r3, #97	; 0x61
 8004516:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004518:	2b08      	cmp	r3, #8
 800451a:	d150      	bne.n	80045be <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	212c      	movs	r1, #44	; 0x2c
 8004522:	fb01 f303 	mul.w	r3, r1, r3
 8004526:	4413      	add	r3, r2
 8004528:	335c      	adds	r3, #92	; 0x5c
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	202c      	movs	r0, #44	; 0x2c
 8004534:	fb00 f303 	mul.w	r3, r0, r3
 8004538:	440b      	add	r3, r1
 800453a:	335c      	adds	r3, #92	; 0x5c
 800453c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	212c      	movs	r1, #44	; 0x2c
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	4413      	add	r3, r2
 800454a:	335c      	adds	r3, #92	; 0x5c
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d912      	bls.n	8004578 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	212c      	movs	r1, #44	; 0x2c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	335c      	adds	r3, #92	; 0x5c
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	3360      	adds	r3, #96	; 0x60
 8004572:	2204      	movs	r2, #4
 8004574:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004576:	e073      	b.n	8004660 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	3360      	adds	r3, #96	; 0x60
 8004586:	2202      	movs	r2, #2
 8004588:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4413      	add	r3, r2
 8004592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045a0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045a8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b6:	461a      	mov	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045bc:	e050      	b.n	8004660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	212c      	movs	r1, #44	; 0x2c
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	3361      	adds	r3, #97	; 0x61
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d122      	bne.n	8004618 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	212c      	movs	r1, #44	; 0x2c
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	3360      	adds	r3, #96	; 0x60
 80045e0:	2202      	movs	r2, #2
 80045e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004602:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004610:	461a      	mov	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e023      	b.n	8004660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	212c      	movs	r1, #44	; 0x2c
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	4413      	add	r3, r2
 8004624:	3361      	adds	r3, #97	; 0x61
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b07      	cmp	r3, #7
 800462a:	d119      	bne.n	8004660 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	212c      	movs	r1, #44	; 0x2c
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	4413      	add	r3, r2
 8004638:	335c      	adds	r3, #92	; 0x5c
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	202c      	movs	r0, #44	; 0x2c
 8004644:	fb00 f303 	mul.w	r3, r0, r3
 8004648:	440b      	add	r3, r1
 800464a:	335c      	adds	r3, #92	; 0x5c
 800464c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	212c      	movs	r1, #44	; 0x2c
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	4413      	add	r3, r2
 800465a:	3360      	adds	r3, #96	; 0x60
 800465c:	2204      	movs	r2, #4
 800465e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466c:	461a      	mov	r2, r3
 800466e:	2302      	movs	r3, #2
 8004670:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	b2d9      	uxtb	r1, r3
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	202c      	movs	r0, #44	; 0x2c
 800467c:	fb00 f303 	mul.w	r3, r0, r3
 8004680:	4413      	add	r3, r2
 8004682:	3360      	adds	r3, #96	; 0x60
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f00c f9d9 	bl	8010a40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800468e:	e061      	b.n	8004754 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0310 	and.w	r3, r3, #16
 80046a2:	2b10      	cmp	r3, #16
 80046a4:	d156      	bne.n	8004754 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	212c      	movs	r1, #44	; 0x2c
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	4413      	add	r3, r2
 80046b2:	333f      	adds	r3, #63	; 0x3f
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d111      	bne.n	80046de <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	212c      	movs	r1, #44	; 0x2c
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	4413      	add	r3, r2
 80046c6:	335c      	adds	r3, #92	; 0x5c
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f005 faeb 	bl	8009cb2 <USB_HC_Halt>
 80046dc:	e031      	b.n	8004742 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	212c      	movs	r1, #44	; 0x2c
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	333f      	adds	r3, #63	; 0x3f
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	212c      	movs	r1, #44	; 0x2c
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	4413      	add	r3, r2
 80046fe:	333f      	adds	r3, #63	; 0x3f
 8004700:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004702:	2b02      	cmp	r3, #2
 8004704:	d11d      	bne.n	8004742 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	212c      	movs	r1, #44	; 0x2c
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	4413      	add	r3, r2
 8004712:	335c      	adds	r3, #92	; 0x5c
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d110      	bne.n	8004742 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	212c      	movs	r1, #44	; 0x2c
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	4413      	add	r3, r2
 800472c:	3361      	adds	r3, #97	; 0x61
 800472e:	2203      	movs	r2, #3
 8004730:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f005 fab8 	bl	8009cb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4413      	add	r3, r2
 800474a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474e:	461a      	mov	r2, r3
 8004750:	2310      	movs	r3, #16
 8004752:	6093      	str	r3, [r2, #8]
}
 8004754:	bf00      	nop
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	4413      	add	r3, r2
 800477e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b04      	cmp	r3, #4
 800478a:	d11a      	bne.n	80047c2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	4413      	add	r3, r2
 8004794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004798:	461a      	mov	r2, r3
 800479a:	2304      	movs	r3, #4
 800479c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	212c      	movs	r1, #44	; 0x2c
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	3361      	adds	r3, #97	; 0x61
 80047ac:	2206      	movs	r2, #6
 80047ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	4611      	mov	r1, r2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f005 fa79 	bl	8009cb2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80047c0:	e331      	b.n	8004e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d12e      	bne.n	8004836 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e4:	461a      	mov	r2, r3
 80047e6:	2320      	movs	r3, #32
 80047e8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	212c      	movs	r1, #44	; 0x2c
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	4413      	add	r3, r2
 80047f6:	333d      	adds	r3, #61	; 0x3d
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	f040 8313 	bne.w	8004e26 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	212c      	movs	r1, #44	; 0x2c
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	4413      	add	r3, r2
 800480c:	333d      	adds	r3, #61	; 0x3d
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	212c      	movs	r1, #44	; 0x2c
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	4413      	add	r3, r2
 800481e:	3360      	adds	r3, #96	; 0x60
 8004820:	2202      	movs	r2, #2
 8004822:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f005 fa3f 	bl	8009cb2 <USB_HC_Halt>
}
 8004834:	e2f7      	b.n	8004e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	4413      	add	r3, r2
 800483e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800484c:	d112      	bne.n	8004874 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	4413      	add	r3, r2
 8004856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485a:	461a      	mov	r2, r3
 800485c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004860:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	4611      	mov	r1, r2
 800486c:	4618      	mov	r0, r3
 800486e:	f005 fa20 	bl	8009cb2 <USB_HC_Halt>
}
 8004872:	e2d8      	b.n	8004e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	4413      	add	r3, r2
 800487c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b01      	cmp	r3, #1
 8004888:	d140      	bne.n	800490c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	212c      	movs	r1, #44	; 0x2c
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	335c      	adds	r3, #92	; 0x5c
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d111      	bne.n	80048d6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	212c      	movs	r1, #44	; 0x2c
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	4413      	add	r3, r2
 80048be:	333d      	adds	r3, #61	; 0x3d
 80048c0:	2201      	movs	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	461a      	mov	r2, r3
 80048d2:	2340      	movs	r3, #64	; 0x40
 80048d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e2:	461a      	mov	r2, r3
 80048e4:	2301      	movs	r3, #1
 80048e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	212c      	movs	r1, #44	; 0x2c
 80048ee:	fb01 f303 	mul.w	r3, r1, r3
 80048f2:	4413      	add	r3, r2
 80048f4:	3361      	adds	r3, #97	; 0x61
 80048f6:	2201      	movs	r2, #1
 80048f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	4611      	mov	r1, r2
 8004904:	4618      	mov	r0, r3
 8004906:	f005 f9d4 	bl	8009cb2 <USB_HC_Halt>
}
 800490a:	e28c      	b.n	8004e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	4413      	add	r3, r2
 8004914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491e:	2b40      	cmp	r3, #64	; 0x40
 8004920:	d12c      	bne.n	800497c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	212c      	movs	r1, #44	; 0x2c
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	4413      	add	r3, r2
 800492e:	3361      	adds	r3, #97	; 0x61
 8004930:	2204      	movs	r2, #4
 8004932:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	212c      	movs	r1, #44	; 0x2c
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	4413      	add	r3, r2
 8004940:	333d      	adds	r3, #61	; 0x3d
 8004942:	2201      	movs	r2, #1
 8004944:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	212c      	movs	r1, #44	; 0x2c
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	4413      	add	r3, r2
 8004952:	335c      	adds	r3, #92	; 0x5c
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	4611      	mov	r1, r2
 8004962:	4618      	mov	r0, r3
 8004964:	f005 f9a5 	bl	8009cb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004974:	461a      	mov	r2, r3
 8004976:	2340      	movs	r3, #64	; 0x40
 8004978:	6093      	str	r3, [r2, #8]
}
 800497a:	e254      	b.n	8004e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	4413      	add	r3, r2
 8004984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b08      	cmp	r3, #8
 8004990:	d11a      	bne.n	80049c8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	4413      	add	r3, r2
 800499a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499e:	461a      	mov	r2, r3
 80049a0:	2308      	movs	r3, #8
 80049a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	212c      	movs	r1, #44	; 0x2c
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	4413      	add	r3, r2
 80049b0:	3361      	adds	r3, #97	; 0x61
 80049b2:	2205      	movs	r2, #5
 80049b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f005 f976 	bl	8009cb2 <USB_HC_Halt>
}
 80049c6:	e22e      	b.n	8004e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d140      	bne.n	8004a60 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	212c      	movs	r1, #44	; 0x2c
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	4413      	add	r3, r2
 80049ea:	335c      	adds	r3, #92	; 0x5c
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	212c      	movs	r1, #44	; 0x2c
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	3361      	adds	r3, #97	; 0x61
 80049fe:	2203      	movs	r2, #3
 8004a00:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	212c      	movs	r1, #44	; 0x2c
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	333d      	adds	r3, #61	; 0x3d
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d112      	bne.n	8004a3c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	212c      	movs	r1, #44	; 0x2c
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	333c      	adds	r3, #60	; 0x3c
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d108      	bne.n	8004a3c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	212c      	movs	r1, #44	; 0x2c
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	333d      	adds	r3, #61	; 0x3d
 8004a38:	2201      	movs	r2, #1
 8004a3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f005 f933 	bl	8009cb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a58:	461a      	mov	r2, r3
 8004a5a:	2310      	movs	r3, #16
 8004a5c:	6093      	str	r3, [r2, #8]
}
 8004a5e:	e1e2      	b.n	8004e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d164      	bne.n	8004b40 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d111      	bne.n	8004aa2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	212c      	movs	r1, #44	; 0x2c
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	4413      	add	r3, r2
 8004a8a:	3361      	adds	r3, #97	; 0x61
 8004a8c:	2206      	movs	r2, #6
 8004a8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f005 f909 	bl	8009cb2 <USB_HC_Halt>
 8004aa0:	e044      	b.n	8004b2c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	212c      	movs	r1, #44	; 0x2c
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	4413      	add	r3, r2
 8004aae:	335c      	adds	r3, #92	; 0x5c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	202c      	movs	r0, #44	; 0x2c
 8004aba:	fb00 f303 	mul.w	r3, r0, r3
 8004abe:	440b      	add	r3, r1
 8004ac0:	335c      	adds	r3, #92	; 0x5c
 8004ac2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	212c      	movs	r1, #44	; 0x2c
 8004aca:	fb01 f303 	mul.w	r3, r1, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	335c      	adds	r3, #92	; 0x5c
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d920      	bls.n	8004b1a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	212c      	movs	r1, #44	; 0x2c
 8004ade:	fb01 f303 	mul.w	r3, r1, r3
 8004ae2:	4413      	add	r3, r2
 8004ae4:	335c      	adds	r3, #92	; 0x5c
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	212c      	movs	r1, #44	; 0x2c
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	4413      	add	r3, r2
 8004af6:	3360      	adds	r3, #96	; 0x60
 8004af8:	2204      	movs	r2, #4
 8004afa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	b2d9      	uxtb	r1, r3
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	202c      	movs	r0, #44	; 0x2c
 8004b06:	fb00 f303 	mul.w	r3, r0, r3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3360      	adds	r3, #96	; 0x60
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f00b ff94 	bl	8010a40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b18:	e008      	b.n	8004b2c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	3360      	adds	r3, #96	; 0x60
 8004b28:	2202      	movs	r2, #2
 8004b2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2380      	movs	r3, #128	; 0x80
 8004b3c:	6093      	str	r3, [r2, #8]
}
 8004b3e:	e172      	b.n	8004e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b56:	d11b      	bne.n	8004b90 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	212c      	movs	r1, #44	; 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	3361      	adds	r3, #97	; 0x61
 8004b66:	2208      	movs	r2, #8
 8004b68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f005 f89c 	bl	8009cb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b86:	461a      	mov	r2, r3
 8004b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b8c:	6093      	str	r3, [r2, #8]
}
 8004b8e:	e14a      	b.n	8004e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	f040 813f 	bne.w	8004e26 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	212c      	movs	r1, #44	; 0x2c
 8004bae:	fb01 f303 	mul.w	r3, r1, r3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3361      	adds	r3, #97	; 0x61
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d17d      	bne.n	8004cb8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	212c      	movs	r1, #44	; 0x2c
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3360      	adds	r3, #96	; 0x60
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	333f      	adds	r3, #63	; 0x3f
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d00a      	beq.n	8004bf8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	212c      	movs	r1, #44	; 0x2c
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	333f      	adds	r3, #63	; 0x3f
 8004bf0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	f040 8100 	bne.w	8004df8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d113      	bne.n	8004c28 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	212c      	movs	r1, #44	; 0x2c
 8004c06:	fb01 f303 	mul.w	r3, r1, r3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3355      	adds	r3, #85	; 0x55
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f083 0301 	eor.w	r3, r3, #1
 8004c14:	b2d8      	uxtb	r0, r3
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	212c      	movs	r1, #44	; 0x2c
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	3355      	adds	r3, #85	; 0x55
 8004c24:	4602      	mov	r2, r0
 8004c26:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	f040 80e3 	bne.w	8004df8 <HCD_HC_OUT_IRQHandler+0x69c>
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	212c      	movs	r1, #44	; 0x2c
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	334c      	adds	r3, #76	; 0x4c
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80d8 	beq.w	8004df8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	212c      	movs	r1, #44	; 0x2c
 8004c4e:	fb01 f303 	mul.w	r3, r1, r3
 8004c52:	4413      	add	r3, r2
 8004c54:	334c      	adds	r3, #76	; 0x4c
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	202c      	movs	r0, #44	; 0x2c
 8004c5e:	fb00 f202 	mul.w	r2, r0, r2
 8004c62:	440a      	add	r2, r1
 8004c64:	3240      	adds	r2, #64	; 0x40
 8004c66:	8812      	ldrh	r2, [r2, #0]
 8004c68:	4413      	add	r3, r2
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	202c      	movs	r0, #44	; 0x2c
 8004c72:	fb00 f202 	mul.w	r2, r0, r2
 8004c76:	440a      	add	r2, r1
 8004c78:	3240      	adds	r2, #64	; 0x40
 8004c7a:	8812      	ldrh	r2, [r2, #0]
 8004c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80b5 	beq.w	8004df8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	212c      	movs	r1, #44	; 0x2c
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	3355      	adds	r3, #85	; 0x55
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	f083 0301 	eor.w	r3, r3, #1
 8004ca2:	b2d8      	uxtb	r0, r3
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	212c      	movs	r1, #44	; 0x2c
 8004caa:	fb01 f303 	mul.w	r3, r1, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	3355      	adds	r3, #85	; 0x55
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e09f      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	212c      	movs	r1, #44	; 0x2c
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3361      	adds	r3, #97	; 0x61
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d109      	bne.n	8004ce0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	212c      	movs	r1, #44	; 0x2c
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3360      	adds	r3, #96	; 0x60
 8004cda:	2202      	movs	r2, #2
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e08b      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	212c      	movs	r1, #44	; 0x2c
 8004ce6:	fb01 f303 	mul.w	r3, r1, r3
 8004cea:	4413      	add	r3, r2
 8004cec:	3361      	adds	r3, #97	; 0x61
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d109      	bne.n	8004d08 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	212c      	movs	r1, #44	; 0x2c
 8004cfa:	fb01 f303 	mul.w	r3, r1, r3
 8004cfe:	4413      	add	r3, r2
 8004d00:	3360      	adds	r3, #96	; 0x60
 8004d02:	2202      	movs	r2, #2
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	e077      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	212c      	movs	r1, #44	; 0x2c
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	3361      	adds	r3, #97	; 0x61
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b05      	cmp	r3, #5
 8004d1a:	d109      	bne.n	8004d30 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	212c      	movs	r1, #44	; 0x2c
 8004d22:	fb01 f303 	mul.w	r3, r1, r3
 8004d26:	4413      	add	r3, r2
 8004d28:	3360      	adds	r3, #96	; 0x60
 8004d2a:	2205      	movs	r2, #5
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e063      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	212c      	movs	r1, #44	; 0x2c
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	3361      	adds	r3, #97	; 0x61
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b06      	cmp	r3, #6
 8004d42:	d009      	beq.n	8004d58 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	212c      	movs	r1, #44	; 0x2c
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	4413      	add	r3, r2
 8004d50:	3361      	adds	r3, #97	; 0x61
 8004d52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d14f      	bne.n	8004df8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	212c      	movs	r1, #44	; 0x2c
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	4413      	add	r3, r2
 8004d64:	335c      	adds	r3, #92	; 0x5c
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	202c      	movs	r0, #44	; 0x2c
 8004d70:	fb00 f303 	mul.w	r3, r0, r3
 8004d74:	440b      	add	r3, r1
 8004d76:	335c      	adds	r3, #92	; 0x5c
 8004d78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	212c      	movs	r1, #44	; 0x2c
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	4413      	add	r3, r2
 8004d86:	335c      	adds	r3, #92	; 0x5c
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d912      	bls.n	8004db4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	212c      	movs	r1, #44	; 0x2c
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	4413      	add	r3, r2
 8004d9a:	335c      	adds	r3, #92	; 0x5c
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	212c      	movs	r1, #44	; 0x2c
 8004da6:	fb01 f303 	mul.w	r3, r1, r3
 8004daa:	4413      	add	r3, r2
 8004dac:	3360      	adds	r3, #96	; 0x60
 8004dae:	2204      	movs	r2, #4
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e021      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	212c      	movs	r1, #44	; 0x2c
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3360      	adds	r3, #96	; 0x60
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ddc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004de4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df2:	461a      	mov	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	461a      	mov	r2, r3
 8004e06:	2302      	movs	r3, #2
 8004e08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	b2d9      	uxtb	r1, r3
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	202c      	movs	r0, #44	; 0x2c
 8004e14:	fb00 f303 	mul.w	r3, r0, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	3360      	adds	r3, #96	; 0x60
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f00b fe0d 	bl	8010a40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e26:	bf00      	nop
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b08a      	sub	sp, #40	; 0x28
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	0c5b      	lsrs	r3, r3, #17
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	091b      	lsrs	r3, r3, #4
 8004e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e62:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d004      	beq.n	8004e74 <HCD_RXQLVL_IRQHandler+0x46>
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b05      	cmp	r3, #5
 8004e6e:	f000 80a9 	beq.w	8004fc4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e72:	e0aa      	b.n	8004fca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 80a6 	beq.w	8004fc8 <HCD_RXQLVL_IRQHandler+0x19a>
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	212c      	movs	r1, #44	; 0x2c
 8004e82:	fb01 f303 	mul.w	r3, r1, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	3344      	adds	r3, #68	; 0x44
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 809b 	beq.w	8004fc8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	212c      	movs	r1, #44	; 0x2c
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3350      	adds	r3, #80	; 0x50
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	441a      	add	r2, r3
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	202c      	movs	r0, #44	; 0x2c
 8004eac:	fb00 f303 	mul.w	r3, r0, r3
 8004eb0:	440b      	add	r3, r1
 8004eb2:	334c      	adds	r3, #76	; 0x4c
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d87a      	bhi.n	8004fb0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	212c      	movs	r1, #44	; 0x2c
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	3344      	adds	r3, #68	; 0x44
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f004 fa44 	bl	8009360 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	212c      	movs	r1, #44	; 0x2c
 8004ede:	fb01 f303 	mul.w	r3, r1, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3344      	adds	r3, #68	; 0x44
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	441a      	add	r2, r3
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	202c      	movs	r0, #44	; 0x2c
 8004ef2:	fb00 f303 	mul.w	r3, r0, r3
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3344      	adds	r3, #68	; 0x44
 8004efa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	3350      	adds	r3, #80	; 0x50
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	441a      	add	r2, r3
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	202c      	movs	r0, #44	; 0x2c
 8004f16:	fb00 f303 	mul.w	r3, r0, r3
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3350      	adds	r3, #80	; 0x50
 8004f1e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	0cdb      	lsrs	r3, r3, #19
 8004f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f34:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	212c      	movs	r1, #44	; 0x2c
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	4413      	add	r3, r2
 8004f42:	3340      	adds	r3, #64	; 0x40
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d13c      	bne.n	8004fc8 <HCD_RXQLVL_IRQHandler+0x19a>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d039      	beq.n	8004fc8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f6a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f72:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	212c      	movs	r1, #44	; 0x2c
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	4413      	add	r3, r2
 8004f92:	3354      	adds	r3, #84	; 0x54
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	f083 0301 	eor.w	r3, r3, #1
 8004f9a:	b2d8      	uxtb	r0, r3
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	212c      	movs	r1, #44	; 0x2c
 8004fa2:	fb01 f303 	mul.w	r3, r1, r3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3354      	adds	r3, #84	; 0x54
 8004faa:	4602      	mov	r2, r0
 8004fac:	701a      	strb	r2, [r3, #0]
      break;
 8004fae:	e00b      	b.n	8004fc8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	3360      	adds	r3, #96	; 0x60
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	701a      	strb	r2, [r3, #0]
      break;
 8004fc2:	e001      	b.n	8004fc8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004fc4:	bf00      	nop
 8004fc6:	e000      	b.n	8004fca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004fc8:	bf00      	nop
  }
}
 8004fca:	bf00      	nop
 8004fcc:	3728      	adds	r7, #40	; 0x28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ffe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d10b      	bne.n	8005022 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b01      	cmp	r3, #1
 8005012:	d102      	bne.n	800501a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f00b fcf7 	bl	8010a08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f043 0302 	orr.w	r3, r3, #2
 8005020:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d132      	bne.n	8005092 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f043 0308 	orr.w	r3, r3, #8
 8005032:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b04      	cmp	r3, #4
 800503c:	d126      	bne.n	800508c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d113      	bne.n	800506e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800504c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005050:	d106      	bne.n	8005060 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2102      	movs	r1, #2
 8005058:	4618      	mov	r0, r3
 800505a:	f004 faef 	bl	800963c <USB_InitFSLSPClkSel>
 800505e:	e011      	b.n	8005084 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2101      	movs	r1, #1
 8005066:	4618      	mov	r0, r3
 8005068:	f004 fae8 	bl	800963c <USB_InitFSLSPClkSel>
 800506c:	e00a      	b.n	8005084 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d106      	bne.n	8005084 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507c:	461a      	mov	r2, r3
 800507e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005082:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f00b fce9 	bl	8010a5c <HAL_HCD_PortEnabled_Callback>
 800508a:	e002      	b.n	8005092 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f00b fcf3 	bl	8010a78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b20      	cmp	r3, #32
 800509a:	d103      	bne.n	80050a4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f043 0320 	orr.w	r3, r3, #32
 80050a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050aa:	461a      	mov	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6013      	str	r3, [r2, #0]
}
 80050b0:	bf00      	nop
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e12b      	b.n	8005322 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fc ff20 	bl	8001f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2224      	movs	r2, #36	; 0x24
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0201 	bic.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800510a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800511a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800511c:	f002 fcda 	bl	8007ad4 <HAL_RCC_GetPCLK1Freq>
 8005120:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	4a81      	ldr	r2, [pc, #516]	; (800532c <HAL_I2C_Init+0x274>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d807      	bhi.n	800513c <HAL_I2C_Init+0x84>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4a80      	ldr	r2, [pc, #512]	; (8005330 <HAL_I2C_Init+0x278>)
 8005130:	4293      	cmp	r3, r2
 8005132:	bf94      	ite	ls
 8005134:	2301      	movls	r3, #1
 8005136:	2300      	movhi	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	e006      	b.n	800514a <HAL_I2C_Init+0x92>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4a7d      	ldr	r2, [pc, #500]	; (8005334 <HAL_I2C_Init+0x27c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	bf94      	ite	ls
 8005144:	2301      	movls	r3, #1
 8005146:	2300      	movhi	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e0e7      	b.n	8005322 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4a78      	ldr	r2, [pc, #480]	; (8005338 <HAL_I2C_Init+0x280>)
 8005156:	fba2 2303 	umull	r2, r3, r2, r3
 800515a:	0c9b      	lsrs	r3, r3, #18
 800515c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	4a6a      	ldr	r2, [pc, #424]	; (800532c <HAL_I2C_Init+0x274>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d802      	bhi.n	800518c <HAL_I2C_Init+0xd4>
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	3301      	adds	r3, #1
 800518a:	e009      	b.n	80051a0 <HAL_I2C_Init+0xe8>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005192:	fb02 f303 	mul.w	r3, r2, r3
 8005196:	4a69      	ldr	r2, [pc, #420]	; (800533c <HAL_I2C_Init+0x284>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	099b      	lsrs	r3, r3, #6
 800519e:	3301      	adds	r3, #1
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	430b      	orrs	r3, r1
 80051a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	495c      	ldr	r1, [pc, #368]	; (800532c <HAL_I2C_Init+0x274>)
 80051bc:	428b      	cmp	r3, r1
 80051be:	d819      	bhi.n	80051f4 <HAL_I2C_Init+0x13c>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	1e59      	subs	r1, r3, #1
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ce:	1c59      	adds	r1, r3, #1
 80051d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051d4:	400b      	ands	r3, r1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_I2C_Init+0x138>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1e59      	subs	r1, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80051e8:	3301      	adds	r3, #1
 80051ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ee:	e051      	b.n	8005294 <HAL_I2C_Init+0x1dc>
 80051f0:	2304      	movs	r3, #4
 80051f2:	e04f      	b.n	8005294 <HAL_I2C_Init+0x1dc>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d111      	bne.n	8005220 <HAL_I2C_Init+0x168>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1e58      	subs	r0, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6859      	ldr	r1, [r3, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	440b      	add	r3, r1
 800520a:	fbb0 f3f3 	udiv	r3, r0, r3
 800520e:	3301      	adds	r3, #1
 8005210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005214:	2b00      	cmp	r3, #0
 8005216:	bf0c      	ite	eq
 8005218:	2301      	moveq	r3, #1
 800521a:	2300      	movne	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e012      	b.n	8005246 <HAL_I2C_Init+0x18e>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1e58      	subs	r0, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6859      	ldr	r1, [r3, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	0099      	lsls	r1, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	fbb0 f3f3 	udiv	r3, r0, r3
 8005236:	3301      	adds	r3, #1
 8005238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523c:	2b00      	cmp	r3, #0
 800523e:	bf0c      	ite	eq
 8005240:	2301      	moveq	r3, #1
 8005242:	2300      	movne	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_I2C_Init+0x196>
 800524a:	2301      	movs	r3, #1
 800524c:	e022      	b.n	8005294 <HAL_I2C_Init+0x1dc>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10e      	bne.n	8005274 <HAL_I2C_Init+0x1bc>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1e58      	subs	r0, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6859      	ldr	r1, [r3, #4]
 800525e:	460b      	mov	r3, r1
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	440b      	add	r3, r1
 8005264:	fbb0 f3f3 	udiv	r3, r0, r3
 8005268:	3301      	adds	r3, #1
 800526a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005272:	e00f      	b.n	8005294 <HAL_I2C_Init+0x1dc>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	1e58      	subs	r0, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6859      	ldr	r1, [r3, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	0099      	lsls	r1, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	fbb0 f3f3 	udiv	r3, r0, r3
 800528a:	3301      	adds	r3, #1
 800528c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	6809      	ldr	r1, [r1, #0]
 8005298:	4313      	orrs	r3, r2
 800529a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69da      	ldr	r2, [r3, #28]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6911      	ldr	r1, [r2, #16]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68d2      	ldr	r2, [r2, #12]
 80052ce:	4311      	orrs	r1, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	000186a0 	.word	0x000186a0
 8005330:	001e847f 	.word	0x001e847f
 8005334:	003d08ff 	.word	0x003d08ff
 8005338:	431bde83 	.word	0x431bde83
 800533c:	10624dd3 	.word	0x10624dd3

08005340 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e021      	b.n	8005396 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2224      	movs	r2, #36	; 0x24
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fc fe22 	bl	8001fb4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	4608      	mov	r0, r1
 80053aa:	4611      	mov	r1, r2
 80053ac:	461a      	mov	r2, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	817b      	strh	r3, [r7, #10]
 80053b2:	460b      	mov	r3, r1
 80053b4:	813b      	strh	r3, [r7, #8]
 80053b6:	4613      	mov	r3, r2
 80053b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053ba:	f7fd fa11 	bl	80027e0 <HAL_GetTick>
 80053be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	f040 80d9 	bne.w	8005580 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	2319      	movs	r3, #25
 80053d4:	2201      	movs	r2, #1
 80053d6:	496d      	ldr	r1, [pc, #436]	; (800558c <HAL_I2C_Mem_Write+0x1ec>)
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 fc8d 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
 80053e6:	e0cc      	b.n	8005582 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_I2C_Mem_Write+0x56>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e0c5      	b.n	8005582 <HAL_I2C_Mem_Write+0x1e2>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b01      	cmp	r3, #1
 800540a:	d007      	beq.n	800541c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800542a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2221      	movs	r2, #33	; 0x21
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2240      	movs	r2, #64	; 0x40
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a3a      	ldr	r2, [r7, #32]
 8005446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800544c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a4d      	ldr	r2, [pc, #308]	; (8005590 <HAL_I2C_Mem_Write+0x1f0>)
 800545c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800545e:	88f8      	ldrh	r0, [r7, #6]
 8005460:	893a      	ldrh	r2, [r7, #8]
 8005462:	8979      	ldrh	r1, [r7, #10]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	4603      	mov	r3, r0
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fac4 	bl	80059fc <I2C_RequestMemoryWrite>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d052      	beq.n	8005520 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e081      	b.n	8005582 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fd0e 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00d      	beq.n	80054aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	2b04      	cmp	r3, #4
 8005494:	d107      	bne.n	80054a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e06b      	b.n	8005582 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d11b      	bne.n	8005520 <HAL_I2C_Mem_Write+0x180>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d017      	beq.n	8005520 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	781a      	ldrb	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1aa      	bne.n	800547e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fcfa 	bl	8005f26 <I2C_WaitOnBTFFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	2b04      	cmp	r3, #4
 800553e:	d107      	bne.n	8005550 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e016      	b.n	8005582 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e000      	b.n	8005582 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	00100002 	.word	0x00100002
 8005590:	ffff0000 	.word	0xffff0000

08005594 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	; 0x30
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	4608      	mov	r0, r1
 800559e:	4611      	mov	r1, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	817b      	strh	r3, [r7, #10]
 80055a6:	460b      	mov	r3, r1
 80055a8:	813b      	strh	r3, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055ae:	f7fd f917 	bl	80027e0 <HAL_GetTick>
 80055b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b20      	cmp	r3, #32
 80055be:	f040 8208 	bne.w	80059d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	2319      	movs	r3, #25
 80055c8:	2201      	movs	r2, #1
 80055ca:	497b      	ldr	r1, [pc, #492]	; (80057b8 <HAL_I2C_Mem_Read+0x224>)
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fb93 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
 80055da:	e1fb      	b.n	80059d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_I2C_Mem_Read+0x56>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e1f4      	b.n	80059d4 <HAL_I2C_Mem_Read+0x440>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d007      	beq.n	8005610 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800561e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2222      	movs	r2, #34	; 0x22
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2240      	movs	r2, #64	; 0x40
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005640:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4a5b      	ldr	r2, [pc, #364]	; (80057bc <HAL_I2C_Mem_Read+0x228>)
 8005650:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005652:	88f8      	ldrh	r0, [r7, #6]
 8005654:	893a      	ldrh	r2, [r7, #8]
 8005656:	8979      	ldrh	r1, [r7, #10]
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	4603      	mov	r3, r0
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fa60 	bl	8005b28 <I2C_RequestMemoryRead>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e1b0      	b.n	80059d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005676:	2b00      	cmp	r3, #0
 8005678:	d113      	bne.n	80056a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567a:	2300      	movs	r3, #0
 800567c:	623b      	str	r3, [r7, #32]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	e184      	b.n	80059ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d11b      	bne.n	80056e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e164      	b.n	80059ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d11b      	bne.n	8005722 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570a:	2300      	movs	r3, #0
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	e144      	b.n	80059ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005738:	e138      	b.n	80059ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573e:	2b03      	cmp	r3, #3
 8005740:	f200 80f1 	bhi.w	8005926 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005748:	2b01      	cmp	r3, #1
 800574a:	d123      	bne.n	8005794 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800574c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fc29 	bl	8005fa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e139      	b.n	80059d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005792:	e10b      	b.n	80059ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005798:	2b02      	cmp	r3, #2
 800579a:	d14e      	bne.n	800583a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	2200      	movs	r2, #0
 80057a4:	4906      	ldr	r1, [pc, #24]	; (80057c0 <HAL_I2C_Mem_Read+0x22c>)
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 faa6 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d008      	beq.n	80057c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e10e      	b.n	80059d4 <HAL_I2C_Mem_Read+0x440>
 80057b6:	bf00      	nop
 80057b8:	00100002 	.word	0x00100002
 80057bc:	ffff0000 	.word	0xffff0000
 80057c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005838:	e0b8      	b.n	80059ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2200      	movs	r2, #0
 8005842:	4966      	ldr	r1, [pc, #408]	; (80059dc <HAL_I2C_Mem_Read+0x448>)
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fa57 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0bf      	b.n	80059d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	2200      	movs	r2, #0
 800589e:	494f      	ldr	r1, [pc, #316]	; (80059dc <HAL_I2C_Mem_Read+0x448>)
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 fa29 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e091      	b.n	80059d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005924:	e042      	b.n	80059ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005928:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fb3c 	bl	8005fa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e04c      	b.n	80059d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691a      	ldr	r2, [r3, #16]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b04      	cmp	r3, #4
 8005978:	d118      	bne.n	80059ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f47f aec2 	bne.w	800573a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e000      	b.n	80059d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
  }
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3728      	adds	r7, #40	; 0x28
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	00010004 	.word	0x00010004

080059e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ee:	b2db      	uxtb	r3, r3
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	4608      	mov	r0, r1
 8005a06:	4611      	mov	r1, r2
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	817b      	strh	r3, [r7, #10]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	813b      	strh	r3, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 f960 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00d      	beq.n	8005a5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4c:	d103      	bne.n	8005a56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e05f      	b.n	8005b1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a5a:	897b      	ldrh	r3, [r7, #10]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	6a3a      	ldr	r2, [r7, #32]
 8005a6e:	492d      	ldr	r1, [pc, #180]	; (8005b24 <I2C_RequestMemoryWrite+0x128>)
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f998 	bl	8005da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e04c      	b.n	8005b1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a98:	6a39      	ldr	r1, [r7, #32]
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 fa02 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00d      	beq.n	8005ac2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d107      	bne.n	8005abe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005abc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e02b      	b.n	8005b1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ac2:	88fb      	ldrh	r3, [r7, #6]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d105      	bne.n	8005ad4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ac8:	893b      	ldrh	r3, [r7, #8]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	611a      	str	r2, [r3, #16]
 8005ad2:	e021      	b.n	8005b18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ad4:	893b      	ldrh	r3, [r7, #8]
 8005ad6:	0a1b      	lsrs	r3, r3, #8
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae4:	6a39      	ldr	r1, [r7, #32]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f9dc 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00d      	beq.n	8005b0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d107      	bne.n	8005b0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e005      	b.n	8005b1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b0e:	893b      	ldrh	r3, [r7, #8]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	00010002 	.word	0x00010002

08005b28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	461a      	mov	r2, r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	817b      	strh	r3, [r7, #10]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	813b      	strh	r3, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f8c2 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00d      	beq.n	8005b96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b88:	d103      	bne.n	8005b92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e0aa      	b.n	8005cec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b96:	897b      	ldrh	r3, [r7, #10]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ba4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	6a3a      	ldr	r2, [r7, #32]
 8005baa:	4952      	ldr	r1, [pc, #328]	; (8005cf4 <I2C_RequestMemoryRead+0x1cc>)
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f8fa 	bl	8005da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e097      	b.n	8005cec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd4:	6a39      	ldr	r1, [r7, #32]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 f964 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00d      	beq.n	8005bfe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d107      	bne.n	8005bfa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e076      	b.n	8005cec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d105      	bne.n	8005c10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c04:	893b      	ldrh	r3, [r7, #8]
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	611a      	str	r2, [r3, #16]
 8005c0e:	e021      	b.n	8005c54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c10:	893b      	ldrh	r3, [r7, #8]
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	6a39      	ldr	r1, [r7, #32]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f93e 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00d      	beq.n	8005c4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d107      	bne.n	8005c46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e050      	b.n	8005cec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c4a:	893b      	ldrh	r3, [r7, #8]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c56:	6a39      	ldr	r1, [r7, #32]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f923 	bl	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00d      	beq.n	8005c80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d107      	bne.n	8005c7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e035      	b.n	8005cec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f82b 	bl	8005cf8 <I2C_WaitOnFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00d      	beq.n	8005cc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb6:	d103      	bne.n	8005cc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e013      	b.n	8005cec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cc4:	897b      	ldrh	r3, [r7, #10]
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	f043 0301 	orr.w	r3, r3, #1
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	6a3a      	ldr	r2, [r7, #32]
 8005cd8:	4906      	ldr	r1, [pc, #24]	; (8005cf4 <I2C_RequestMemoryRead+0x1cc>)
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f863 	bl	8005da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	00010002 	.word	0x00010002

08005cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d08:	e025      	b.n	8005d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d021      	beq.n	8005d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d12:	f7fc fd65 	bl	80027e0 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d302      	bcc.n	8005d28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d116      	bne.n	8005d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e023      	b.n	8005d9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10d      	bne.n	8005d7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	43da      	mvns	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	e00c      	b.n	8005d96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	43da      	mvns	r2, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4013      	ands	r3, r2
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bf0c      	ite	eq
 8005d8e:	2301      	moveq	r3, #1
 8005d90:	2300      	movne	r3, #0
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d0b6      	beq.n	8005d0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005db4:	e051      	b.n	8005e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc4:	d123      	bne.n	8005e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f043 0204 	orr.w	r2, r3, #4
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e046      	b.n	8005e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d021      	beq.n	8005e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e16:	f7fc fce3 	bl	80027e0 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d302      	bcc.n	8005e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d116      	bne.n	8005e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e020      	b.n	8005e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	0c1b      	lsrs	r3, r3, #16
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d10c      	bne.n	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf14      	ite	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	2300      	moveq	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	e00b      	b.n	8005e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	43da      	mvns	r2, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bf14      	ite	ne
 8005e90:	2301      	movne	r3, #1
 8005e92:	2300      	moveq	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d18d      	bne.n	8005db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eb0:	e02d      	b.n	8005f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f8ce 	bl	8006054 <I2C_IsAcknowledgeFailed>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e02d      	b.n	8005f1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d021      	beq.n	8005f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eca:	f7fc fc89 	bl	80027e0 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d302      	bcc.n	8005ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d116      	bne.n	8005f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	f043 0220 	orr.w	r2, r3, #32
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e007      	b.n	8005f1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b80      	cmp	r3, #128	; 0x80
 8005f1a:	d1ca      	bne.n	8005eb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f32:	e02d      	b.n	8005f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f88d 	bl	8006054 <I2C_IsAcknowledgeFailed>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e02d      	b.n	8005fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d021      	beq.n	8005f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4c:	f7fc fc48 	bl	80027e0 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d302      	bcc.n	8005f62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d116      	bne.n	8005f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	f043 0220 	orr.w	r2, r3, #32
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e007      	b.n	8005fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d1ca      	bne.n	8005f34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fb4:	e042      	b.n	800603c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	2b10      	cmp	r3, #16
 8005fc2:	d119      	bne.n	8005ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0210 	mvn.w	r2, #16
 8005fcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e029      	b.n	800604c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff8:	f7fc fbf2 	bl	80027e0 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	429a      	cmp	r2, r3
 8006006:	d302      	bcc.n	800600e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d116      	bne.n	800603c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	f043 0220 	orr.w	r2, r3, #32
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e007      	b.n	800604c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d1b5      	bne.n	8005fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606a:	d11b      	bne.n	80060a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006074:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	f043 0204 	orr.w	r2, r3, #4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e128      	b.n	8006318 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a90      	ldr	r2, [pc, #576]	; (8006320 <HAL_I2S_Init+0x26c>)
 80060de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fb ff89 	bl	8001ff8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6812      	ldr	r2, [r2, #0]
 80060f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80060fc:	f023 030f 	bic.w	r3, r3, #15
 8006100:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2202      	movs	r2, #2
 8006108:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d060      	beq.n	80061d4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800611a:	2310      	movs	r3, #16
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	e001      	b.n	8006124 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006120:	2320      	movs	r3, #32
 8006122:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b20      	cmp	r3, #32
 800612a:	d802      	bhi.n	8006132 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006132:	2001      	movs	r0, #1
 8006134:	f001 fe28 	bl	8007d88 <HAL_RCCEx_GetPeriphCLKFreq>
 8006138:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006142:	d125      	bne.n	8006190 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d010      	beq.n	800616e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	fbb2 f2f3 	udiv	r2, r2, r3
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	461a      	mov	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	fbb2 f3f3 	udiv	r3, r2, r3
 8006168:	3305      	adds	r3, #5
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	e01f      	b.n	80061ae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	fbb2 f2f3 	udiv	r2, r2, r3
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	461a      	mov	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	fbb2 f3f3 	udiv	r3, r2, r3
 800618a:	3305      	adds	r3, #5
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	e00e      	b.n	80061ae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	fbb2 f2f3 	udiv	r2, r2, r3
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061aa:	3305      	adds	r3, #5
 80061ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4a5c      	ldr	r2, [pc, #368]	; (8006324 <HAL_I2S_Init+0x270>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	08db      	lsrs	r3, r3, #3
 80061b8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	021b      	lsls	r3, r3, #8
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	e003      	b.n	80061dc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80061d4:	2302      	movs	r3, #2
 80061d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d902      	bls.n	80061e8 <HAL_I2S_Init+0x134>
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	2bff      	cmp	r3, #255	; 0xff
 80061e6:	d907      	bls.n	80061f8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ec:	f043 0210 	orr.w	r2, r3, #16
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e08f      	b.n	8006318 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	ea42 0103 	orr.w	r1, r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	430a      	orrs	r2, r1
 800620a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006216:	f023 030f 	bic.w	r3, r3, #15
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6851      	ldr	r1, [r2, #4]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6892      	ldr	r2, [r2, #8]
 8006222:	4311      	orrs	r1, r2
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68d2      	ldr	r2, [r2, #12]
 8006228:	4311      	orrs	r1, r2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6992      	ldr	r2, [r2, #24]
 800622e:	430a      	orrs	r2, r1
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800623a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d161      	bne.n	8006308 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a38      	ldr	r2, [pc, #224]	; (8006328 <HAL_I2S_Init+0x274>)
 8006248:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a37      	ldr	r2, [pc, #220]	; (800632c <HAL_I2S_Init+0x278>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d101      	bne.n	8006258 <HAL_I2S_Init+0x1a4>
 8006254:	4b36      	ldr	r3, [pc, #216]	; (8006330 <HAL_I2S_Init+0x27c>)
 8006256:	e001      	b.n	800625c <HAL_I2S_Init+0x1a8>
 8006258:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	4932      	ldr	r1, [pc, #200]	; (800632c <HAL_I2S_Init+0x278>)
 8006264:	428a      	cmp	r2, r1
 8006266:	d101      	bne.n	800626c <HAL_I2S_Init+0x1b8>
 8006268:	4a31      	ldr	r2, [pc, #196]	; (8006330 <HAL_I2S_Init+0x27c>)
 800626a:	e001      	b.n	8006270 <HAL_I2S_Init+0x1bc>
 800626c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006270:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006274:	f023 030f 	bic.w	r3, r3, #15
 8006278:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2b      	ldr	r2, [pc, #172]	; (800632c <HAL_I2S_Init+0x278>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d101      	bne.n	8006288 <HAL_I2S_Init+0x1d4>
 8006284:	4b2a      	ldr	r3, [pc, #168]	; (8006330 <HAL_I2S_Init+0x27c>)
 8006286:	e001      	b.n	800628c <HAL_I2S_Init+0x1d8>
 8006288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800628c:	2202      	movs	r2, #2
 800628e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a25      	ldr	r2, [pc, #148]	; (800632c <HAL_I2S_Init+0x278>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d101      	bne.n	800629e <HAL_I2S_Init+0x1ea>
 800629a:	4b25      	ldr	r3, [pc, #148]	; (8006330 <HAL_I2S_Init+0x27c>)
 800629c:	e001      	b.n	80062a2 <HAL_I2S_Init+0x1ee>
 800629e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ae:	d003      	beq.n	80062b8 <HAL_I2S_Init+0x204>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d103      	bne.n	80062c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80062b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	e001      	b.n	80062c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80062c0:	2300      	movs	r3, #0
 80062c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062ce:	4313      	orrs	r3, r2
 80062d0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062d8:	4313      	orrs	r3, r2
 80062da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062e2:	4313      	orrs	r3, r2
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	897b      	ldrh	r3, [r7, #10]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a0d      	ldr	r2, [pc, #52]	; (800632c <HAL_I2S_Init+0x278>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d101      	bne.n	8006300 <HAL_I2S_Init+0x24c>
 80062fc:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <HAL_I2S_Init+0x27c>)
 80062fe:	e001      	b.n	8006304 <HAL_I2S_Init+0x250>
 8006300:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006304:	897a      	ldrh	r2, [r7, #10]
 8006306:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	08006bb9 	.word	0x08006bb9
 8006324:	cccccccd 	.word	0xcccccccd
 8006328:	08006d41 	.word	0x08006d41
 800632c:	40003800 	.word	0x40003800
 8006330:	40003400 	.word	0x40003400

08006334 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	4613      	mov	r3, r2
 8006340:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <HAL_I2S_Transmit_DMA+0x1a>
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e08e      	b.n	8006470 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_I2S_Transmit_DMA+0x2e>
 800635e:	2302      	movs	r3, #2
 8006360:	e086      	b.n	8006470 <HAL_I2S_Transmit_DMA+0x13c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b01      	cmp	r3, #1
 8006374:	d005      	beq.n	8006382 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800637e:	2302      	movs	r3, #2
 8006380:	e076      	b.n	8006470 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2203      	movs	r2, #3
 8006386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d002      	beq.n	80063ae <HAL_I2S_Transmit_DMA+0x7a>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2b05      	cmp	r3, #5
 80063ac:	d10a      	bne.n	80063c4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063c2:	e005      	b.n	80063d0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	88fa      	ldrh	r2, [r7, #6]
 80063c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	88fa      	ldrh	r2, [r7, #6]
 80063ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	4a28      	ldr	r2, [pc, #160]	; (8006478 <HAL_I2S_Transmit_DMA+0x144>)
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	4a27      	ldr	r2, [pc, #156]	; (800647c <HAL_I2S_Transmit_DMA+0x148>)
 80063de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	4a26      	ldr	r2, [pc, #152]	; (8006480 <HAL_I2S_Transmit_DMA+0x14c>)
 80063e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80063f0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80063f8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006400:	f7fc fc3c 	bl	8002c7c <HAL_DMA_Start_IT>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00f      	beq.n	800642a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640e:	f043 0208 	orr.w	r2, r3, #8
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e022      	b.n	8006470 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006434:	2b00      	cmp	r3, #0
 8006436:	d107      	bne.n	8006448 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69da      	ldr	r2, [r3, #28]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006446:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0202 	orr.w	r2, r2, #2
 8006464:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	08006a97 	.word	0x08006a97
 800647c:	08006a55 	.word	0x08006a55
 8006480:	08006ab3 	.word	0x08006ab3

08006484 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_I2S_DMAPause+0x18>
 8006498:	2302      	movs	r3, #2
 800649a:	e04a      	b.n	8006532 <HAL_I2S_DMAPause+0xae>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d108      	bne.n	80064c2 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0202 	bic.w	r2, r2, #2
 80064be:	605a      	str	r2, [r3, #4]
 80064c0:	e032      	b.n	8006528 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d108      	bne.n	80064e0 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0201 	bic.w	r2, r2, #1
 80064dc:	605a      	str	r2, [r3, #4]
 80064de:	e023      	b.n	8006528 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b05      	cmp	r3, #5
 80064ea:	d11d      	bne.n	8006528 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0203 	bic.w	r2, r2, #3
 80064fa:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0f      	ldr	r2, [pc, #60]	; (8006540 <HAL_I2S_DMAPause+0xbc>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d101      	bne.n	800650a <HAL_I2S_DMAPause+0x86>
 8006506:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <HAL_I2S_DMAPause+0xc0>)
 8006508:	e001      	b.n	800650e <HAL_I2S_DMAPause+0x8a>
 800650a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	490a      	ldr	r1, [pc, #40]	; (8006540 <HAL_I2S_DMAPause+0xbc>)
 8006516:	428b      	cmp	r3, r1
 8006518:	d101      	bne.n	800651e <HAL_I2S_DMAPause+0x9a>
 800651a:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <HAL_I2S_DMAPause+0xc0>)
 800651c:	e001      	b.n	8006522 <HAL_I2S_DMAPause+0x9e>
 800651e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006522:	f022 0203 	bic.w	r2, r2, #3
 8006526:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40003800 	.word	0x40003800
 8006544:	40003400 	.word	0x40003400

08006548 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_I2S_DMAResume+0x18>
 800655c:	2302      	movs	r3, #2
 800655e:	e07d      	b.n	800665c <HAL_I2S_DMAResume+0x114>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b03      	cmp	r3, #3
 8006572:	d108      	bne.n	8006586 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0202 	orr.w	r2, r2, #2
 8006582:	605a      	str	r2, [r3, #4]
 8006584:	e056      	b.n	8006634 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b04      	cmp	r3, #4
 8006590:	d108      	bne.n	80065a4 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0201 	orr.w	r2, r2, #1
 80065a0:	605a      	str	r2, [r3, #4]
 80065a2:	e047      	b.n	8006634 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b05      	cmp	r3, #5
 80065ae:	d141      	bne.n	8006634 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0203 	orr.w	r2, r2, #3
 80065be:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a28      	ldr	r2, [pc, #160]	; (8006668 <HAL_I2S_DMAResume+0x120>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d101      	bne.n	80065ce <HAL_I2S_DMAResume+0x86>
 80065ca:	4b28      	ldr	r3, [pc, #160]	; (800666c <HAL_I2S_DMAResume+0x124>)
 80065cc:	e001      	b.n	80065d2 <HAL_I2S_DMAResume+0x8a>
 80065ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4923      	ldr	r1, [pc, #140]	; (8006668 <HAL_I2S_DMAResume+0x120>)
 80065da:	428b      	cmp	r3, r1
 80065dc:	d101      	bne.n	80065e2 <HAL_I2S_DMAResume+0x9a>
 80065de:	4b23      	ldr	r3, [pc, #140]	; (800666c <HAL_I2S_DMAResume+0x124>)
 80065e0:	e001      	b.n	80065e6 <HAL_I2S_DMAResume+0x9e>
 80065e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e6:	f042 0203 	orr.w	r2, r2, #3
 80065ea:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1d      	ldr	r2, [pc, #116]	; (8006668 <HAL_I2S_DMAResume+0x120>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d101      	bne.n	80065fa <HAL_I2S_DMAResume+0xb2>
 80065f6:	4b1d      	ldr	r3, [pc, #116]	; (800666c <HAL_I2S_DMAResume+0x124>)
 80065f8:	e001      	b.n	80065fe <HAL_I2S_DMAResume+0xb6>
 80065fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d115      	bne.n	8006634 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a16      	ldr	r2, [pc, #88]	; (8006668 <HAL_I2S_DMAResume+0x120>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d101      	bne.n	8006616 <HAL_I2S_DMAResume+0xce>
 8006612:	4b16      	ldr	r3, [pc, #88]	; (800666c <HAL_I2S_DMAResume+0x124>)
 8006614:	e001      	b.n	800661a <HAL_I2S_DMAResume+0xd2>
 8006616:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800661a:	69da      	ldr	r2, [r3, #28]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4911      	ldr	r1, [pc, #68]	; (8006668 <HAL_I2S_DMAResume+0x120>)
 8006622:	428b      	cmp	r3, r1
 8006624:	d101      	bne.n	800662a <HAL_I2S_DMAResume+0xe2>
 8006626:	4b11      	ldr	r3, [pc, #68]	; (800666c <HAL_I2S_DMAResume+0x124>)
 8006628:	e001      	b.n	800662e <HAL_I2S_DMAResume+0xe6>
 800662a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800662e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006632:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800663e:	2b00      	cmp	r3, #0
 8006640:	d107      	bne.n	8006652 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006650:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40003800 	.word	0x40003800
 800666c:	40003400 	.word	0x40003400

08006670 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006684:	d004      	beq.n	8006690 <HAL_I2S_DMAStop+0x20>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 80d1 	bne.w	8006832 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00f      	beq.n	80066b8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	4618      	mov	r0, r3
 800669e:	f7fc fb45 	bl	8002d2c <HAL_DMA_Abort>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ac:	f043 0208 	orr.w	r2, r3, #8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80066b8:	2364      	movs	r3, #100	; 0x64
 80066ba:	2201      	movs	r2, #1
 80066bc:	2102      	movs	r1, #2
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fb04 	bl	8006ccc <I2S_WaitFlagStateUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00b      	beq.n	80066e2 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	f043 0201 	orr.w	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80066e2:	2364      	movs	r3, #100	; 0x64
 80066e4:	2200      	movs	r2, #0
 80066e6:	2180      	movs	r1, #128	; 0x80
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 faef 	bl	8006ccc <I2S_WaitFlagStateUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f8:	f043 0201 	orr.w	r2, r3, #1
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69da      	ldr	r2, [r3, #28]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800671c:	2300      	movs	r3, #0
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0202 	bic.w	r2, r2, #2
 8006738:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b05      	cmp	r3, #5
 8006744:	f040 8165 	bne.w	8006a12 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00f      	beq.n	8006770 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	4618      	mov	r0, r3
 8006756:	f7fc fae9 	bl	8002d2c <HAL_DMA_Abort>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006764:	f043 0208 	orr.w	r2, r3, #8
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a8a      	ldr	r2, [pc, #552]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d101      	bne.n	800677e <HAL_I2S_DMAStop+0x10e>
 800677a:	4b8a      	ldr	r3, [pc, #552]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 800677c:	e001      	b.n	8006782 <HAL_I2S_DMAStop+0x112>
 800677e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4985      	ldr	r1, [pc, #532]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 800678a:	428b      	cmp	r3, r1
 800678c:	d101      	bne.n	8006792 <HAL_I2S_DMAStop+0x122>
 800678e:	4b85      	ldr	r3, [pc, #532]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 8006790:	e001      	b.n	8006796 <HAL_I2S_DMAStop+0x126>
 8006792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800679a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a7e      	ldr	r2, [pc, #504]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <HAL_I2S_DMAStop+0x13e>
 80067aa:	4b7e      	ldr	r3, [pc, #504]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 80067ac:	e001      	b.n	80067b2 <HAL_I2S_DMAStop+0x142>
 80067ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a79      	ldr	r2, [pc, #484]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d101      	bne.n	80067c4 <HAL_I2S_DMAStop+0x154>
 80067c0:	4b78      	ldr	r3, [pc, #480]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 80067c2:	e001      	b.n	80067c8 <HAL_I2S_DMAStop+0x158>
 80067c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a73      	ldr	r2, [pc, #460]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d101      	bne.n	80067dc <HAL_I2S_DMAStop+0x16c>
 80067d8:	4b72      	ldr	r3, [pc, #456]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 80067da:	e001      	b.n	80067e0 <HAL_I2S_DMAStop+0x170>
 80067dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	496e      	ldr	r1, [pc, #440]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 80067e8:	428b      	cmp	r3, r1
 80067ea:	d101      	bne.n	80067f0 <HAL_I2S_DMAStop+0x180>
 80067ec:	4b6d      	ldr	r3, [pc, #436]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 80067ee:	e001      	b.n	80067f4 <HAL_I2S_DMAStop+0x184>
 80067f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067f4:	f022 0201 	bic.w	r2, r2, #1
 80067f8:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10c      	bne.n	800681c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006806:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800681a:	e0fa      	b.n	8006a12 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a5f      	ldr	r2, [pc, #380]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d101      	bne.n	800682a <HAL_I2S_DMAStop+0x1ba>
 8006826:	4b5f      	ldr	r3, [pc, #380]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 8006828:	e001      	b.n	800682e <HAL_I2S_DMAStop+0x1be>
 800682a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800682e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006830:	e0ef      	b.n	8006a12 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800683a:	d005      	beq.n	8006848 <HAL_I2S_DMAStop+0x1d8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006844:	f040 80e5 	bne.w	8006a12 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00f      	beq.n	8006870 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006854:	4618      	mov	r0, r3
 8006856:	f7fc fa69 	bl	8002d2c <HAL_DMA_Abort>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d007      	beq.n	8006870 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006864:	f043 0208 	orr.w	r2, r3, #8
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b05      	cmp	r3, #5
 800687a:	f040 809a 	bne.w	80069b2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00f      	beq.n	80068a6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	4618      	mov	r0, r3
 800688c:	f7fc fa4e 	bl	8002d2c <HAL_DMA_Abort>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689a:	f043 0208 	orr.w	r2, r3, #8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80068a6:	f7fb ff9b 	bl	80027e0 <HAL_GetTick>
 80068aa:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80068ac:	e012      	b.n	80068d4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80068ae:	f7fb ff97 	bl	80027e0 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b64      	cmp	r3, #100	; 0x64
 80068ba:	d90b      	bls.n	80068d4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c0:	f043 0201 	orr.w	r2, r3, #1
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a31      	ldr	r2, [pc, #196]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d101      	bne.n	80068e2 <HAL_I2S_DMAStop+0x272>
 80068de:	4b31      	ldr	r3, [pc, #196]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 80068e0:	e001      	b.n	80068e6 <HAL_I2S_DMAStop+0x276>
 80068e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d1de      	bne.n	80068ae <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80068f0:	e012      	b.n	8006918 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80068f2:	f7fb ff75 	bl	80027e0 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b64      	cmp	r3, #100	; 0x64
 80068fe:	d90b      	bls.n	8006918 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006904:	f043 0201 	orr.w	r2, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a20      	ldr	r2, [pc, #128]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d101      	bne.n	8006926 <HAL_I2S_DMAStop+0x2b6>
 8006922:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 8006924:	e001      	b.n	800692a <HAL_I2S_DMAStop+0x2ba>
 8006926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006930:	2b80      	cmp	r3, #128	; 0x80
 8006932:	d0de      	beq.n	80068f2 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a19      	ldr	r2, [pc, #100]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d101      	bne.n	8006942 <HAL_I2S_DMAStop+0x2d2>
 800693e:	4b19      	ldr	r3, [pc, #100]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 8006940:	e001      	b.n	8006946 <HAL_I2S_DMAStop+0x2d6>
 8006942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4914      	ldr	r1, [pc, #80]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 800694e:	428b      	cmp	r3, r1
 8006950:	d101      	bne.n	8006956 <HAL_I2S_DMAStop+0x2e6>
 8006952:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 8006954:	e001      	b.n	800695a <HAL_I2S_DMAStop+0x2ea>
 8006956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800695a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d101      	bne.n	8006972 <HAL_I2S_DMAStop+0x302>
 800696e:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 8006970:	e001      	b.n	8006976 <HAL_I2S_DMAStop+0x306>
 8006972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a07      	ldr	r2, [pc, #28]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d101      	bne.n	800698a <HAL_I2S_DMAStop+0x31a>
 8006986:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 8006988:	e001      	b.n	800698e <HAL_I2S_DMAStop+0x31e>
 800698a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4902      	ldr	r1, [pc, #8]	; (80069a0 <HAL_I2S_DMAStop+0x330>)
 8006996:	428b      	cmp	r3, r1
 8006998:	d106      	bne.n	80069a8 <HAL_I2S_DMAStop+0x338>
 800699a:	4b02      	ldr	r3, [pc, #8]	; (80069a4 <HAL_I2S_DMAStop+0x334>)
 800699c:	e006      	b.n	80069ac <HAL_I2S_DMAStop+0x33c>
 800699e:	bf00      	nop
 80069a0:	40003800 	.word	0x40003800
 80069a4:	40003400 	.word	0x40003400
 80069a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069ac:	f022 0202 	bic.w	r2, r2, #2
 80069b0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0201 	bic.w	r2, r2, #1
 80069e6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f0:	d10c      	bne.n	8006a0c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	77fb      	strb	r3, [r7, #31]
 8006a0a:	e002      	b.n	8006a12 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8006a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a46:	b2db      	uxtb	r3, r3
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10e      	bne.n	8006a88 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0202 	bic.w	r2, r2, #2
 8006a78:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7f9 fe63 	bl	8000754 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006a8e:	bf00      	nop
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f7f9 fe67 	bl	8000778 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0203 	bic.w	r2, r2, #3
 8006ace:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae8:	f043 0208 	orr.w	r2, r3, #8
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7f9 ffb1 	bl	8000a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006af6:	bf00      	nop
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	881a      	ldrh	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	1c9a      	adds	r2, r3, #2
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10e      	bne.n	8006b52 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b42:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7f9 fe01 	bl	8000754 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006b52:	bf00      	nop
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	b292      	uxth	r2, r2
 8006b6e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	1c9a      	adds	r2, r3, #2
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10e      	bne.n	8006bb0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ba0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff ff3a 	bl	8006a24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d13a      	bne.n	8006c4a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d109      	bne.n	8006bf2 <I2S_IRQHandler+0x3a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d102      	bne.n	8006bf2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff ffb4 	bl	8006b5a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d126      	bne.n	8006c4a <I2S_IRQHandler+0x92>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d11f      	bne.n	8006c4a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c18:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3c:	f043 0202 	orr.w	r2, r3, #2
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7f9 ff07 	bl	8000a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d136      	bne.n	8006cc4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d109      	bne.n	8006c74 <I2S_IRQHandler+0xbc>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6a:	2b80      	cmp	r3, #128	; 0x80
 8006c6c:	d102      	bne.n	8006c74 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff ff45 	bl	8006afe <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b08      	cmp	r3, #8
 8006c7c:	d122      	bne.n	8006cc4 <I2S_IRQHandler+0x10c>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d11b      	bne.n	8006cc4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c9a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	f043 0204 	orr.w	r2, r3, #4
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7f9 feca 	bl	8000a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	603b      	str	r3, [r7, #0]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cdc:	f7fb fd80 	bl	80027e0 <HAL_GetTick>
 8006ce0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006ce2:	e018      	b.n	8006d16 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cea:	d014      	beq.n	8006d16 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006cec:	f7fb fd78 	bl	80027e0 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d902      	bls.n	8006d02 <I2S_WaitFlagStateUntilTimeout+0x36>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d109      	bne.n	8006d16 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e00f      	b.n	8006d36 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	bf0c      	ite	eq
 8006d26:	2301      	moveq	r3, #1
 8006d28:	2300      	movne	r3, #0
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d1d7      	bne.n	8006ce4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a92      	ldr	r2, [pc, #584]	; (8006fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d101      	bne.n	8006d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006d5a:	4b92      	ldr	r3, [pc, #584]	; (8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d5c:	e001      	b.n	8006d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a8b      	ldr	r2, [pc, #556]	; (8006fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d101      	bne.n	8006d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006d78:	4b8a      	ldr	r3, [pc, #552]	; (8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d7a:	e001      	b.n	8006d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006d7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d8c:	d004      	beq.n	8006d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f040 8099 	bne.w	8006eca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d107      	bne.n	8006db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f925 	bl	8006ffc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d107      	bne.n	8006dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f9c8 	bl	800715c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	d13a      	bne.n	8006e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d035      	beq.n	8006e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a6e      	ldr	r2, [pc, #440]	; (8006fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d101      	bne.n	8006dee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006dea:	4b6e      	ldr	r3, [pc, #440]	; (8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006dec:	e001      	b.n	8006df2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006dee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4969      	ldr	r1, [pc, #420]	; (8006fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dfa:	428b      	cmp	r3, r1
 8006dfc:	d101      	bne.n	8006e02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006dfe:	4b69      	ldr	r3, [pc, #420]	; (8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e00:	e001      	b.n	8006e06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e0a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3e:	f043 0202 	orr.w	r2, r3, #2
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7f9 fe06 	bl	8000a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	f040 80c3 	bne.w	8006fde <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f003 0320 	and.w	r3, r3, #32
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 80bd 	beq.w	8006fde <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e72:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a49      	ldr	r2, [pc, #292]	; (8006fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d101      	bne.n	8006e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006e7e:	4b49      	ldr	r3, [pc, #292]	; (8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e80:	e001      	b.n	8006e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006e82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4944      	ldr	r1, [pc, #272]	; (8006fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e8e:	428b      	cmp	r3, r1
 8006e90:	d101      	bne.n	8006e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006e92:	4b44      	ldr	r3, [pc, #272]	; (8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e94:	e001      	b.n	8006e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e9e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60bb      	str	r3, [r7, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	60bb      	str	r3, [r7, #8]
 8006eac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eba:	f043 0204 	orr.w	r2, r3, #4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7f9 fdc8 	bl	8000a58 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ec8:	e089      	b.n	8006fde <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d107      	bne.n	8006ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f8be 	bl	8007060 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d107      	bne.n	8006efe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f8fd 	bl	80070f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b40      	cmp	r3, #64	; 0x40
 8006f06:	d12f      	bne.n	8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d02a      	beq.n	8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f20:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d101      	bne.n	8006f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006f2c:	4b1d      	ldr	r3, [pc, #116]	; (8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f2e:	e001      	b.n	8006f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006f30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4919      	ldr	r1, [pc, #100]	; (8006fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f3c:	428b      	cmp	r3, r1
 8006f3e:	d101      	bne.n	8006f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006f40:	4b18      	ldr	r3, [pc, #96]	; (8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f42:	e001      	b.n	8006f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006f44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	f043 0202 	orr.w	r2, r3, #2
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7f9 fd78 	bl	8000a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d136      	bne.n	8006fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d031      	beq.n	8006fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a07      	ldr	r2, [pc, #28]	; (8006fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d101      	bne.n	8006f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006f86:	4b07      	ldr	r3, [pc, #28]	; (8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f88:	e001      	b.n	8006f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4902      	ldr	r1, [pc, #8]	; (8006fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f96:	428b      	cmp	r3, r1
 8006f98:	d106      	bne.n	8006fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006f9a:	4b02      	ldr	r3, [pc, #8]	; (8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f9c:	e006      	b.n	8006fac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006f9e:	bf00      	nop
 8006fa0:	40003800 	.word	0x40003800
 8006fa4:	40003400 	.word	0x40003400
 8006fa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006fb0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006fc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fce:	f043 0204 	orr.w	r2, r3, #4
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7f9 fd3e 	bl	8000a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fdc:	e000      	b.n	8006fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006fde:	bf00      	nop
}
 8006fe0:	bf00      	nop
 8006fe2:	3720      	adds	r7, #32
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	1c99      	adds	r1, r3, #2
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6251      	str	r1, [r2, #36]	; 0x24
 800700e:	881a      	ldrh	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d113      	bne.n	8007056 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800703c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff ffc9 	bl	8006fe8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007056:	bf00      	nop
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	1c99      	adds	r1, r3, #2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6251      	str	r1, [r2, #36]	; 0x24
 8007072:	8819      	ldrh	r1, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a1d      	ldr	r2, [pc, #116]	; (80070f0 <I2SEx_TxISR_I2SExt+0x90>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d101      	bne.n	8007082 <I2SEx_TxISR_I2SExt+0x22>
 800707e:	4b1d      	ldr	r3, [pc, #116]	; (80070f4 <I2SEx_TxISR_I2SExt+0x94>)
 8007080:	e001      	b.n	8007086 <I2SEx_TxISR_I2SExt+0x26>
 8007082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007086:	460a      	mov	r2, r1
 8007088:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b01      	subs	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709c:	b29b      	uxth	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d121      	bne.n	80070e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a12      	ldr	r2, [pc, #72]	; (80070f0 <I2SEx_TxISR_I2SExt+0x90>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d101      	bne.n	80070b0 <I2SEx_TxISR_I2SExt+0x50>
 80070ac:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <I2SEx_TxISR_I2SExt+0x94>)
 80070ae:	e001      	b.n	80070b4 <I2SEx_TxISR_I2SExt+0x54>
 80070b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	490d      	ldr	r1, [pc, #52]	; (80070f0 <I2SEx_TxISR_I2SExt+0x90>)
 80070bc:	428b      	cmp	r3, r1
 80070be:	d101      	bne.n	80070c4 <I2SEx_TxISR_I2SExt+0x64>
 80070c0:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <I2SEx_TxISR_I2SExt+0x94>)
 80070c2:	e001      	b.n	80070c8 <I2SEx_TxISR_I2SExt+0x68>
 80070c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff ff81 	bl	8006fe8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	40003800 	.word	0x40003800
 80070f4:	40003400 	.word	0x40003400

080070f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68d8      	ldr	r0, [r3, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	1c99      	adds	r1, r3, #2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007110:	b282      	uxth	r2, r0
 8007112:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d113      	bne.n	8007154 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800713a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff ff4a 	bl	8006fe8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007154:	bf00      	nop
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a20      	ldr	r2, [pc, #128]	; (80071ec <I2SEx_RxISR_I2SExt+0x90>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d101      	bne.n	8007172 <I2SEx_RxISR_I2SExt+0x16>
 800716e:	4b20      	ldr	r3, [pc, #128]	; (80071f0 <I2SEx_RxISR_I2SExt+0x94>)
 8007170:	e001      	b.n	8007176 <I2SEx_RxISR_I2SExt+0x1a>
 8007172:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007176:	68d8      	ldr	r0, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	1c99      	adds	r1, r3, #2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007182:	b282      	uxth	r2, r0
 8007184:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007198:	b29b      	uxth	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d121      	bne.n	80071e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a12      	ldr	r2, [pc, #72]	; (80071ec <I2SEx_RxISR_I2SExt+0x90>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d101      	bne.n	80071ac <I2SEx_RxISR_I2SExt+0x50>
 80071a8:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <I2SEx_RxISR_I2SExt+0x94>)
 80071aa:	e001      	b.n	80071b0 <I2SEx_RxISR_I2SExt+0x54>
 80071ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	490d      	ldr	r1, [pc, #52]	; (80071ec <I2SEx_RxISR_I2SExt+0x90>)
 80071b8:	428b      	cmp	r3, r1
 80071ba:	d101      	bne.n	80071c0 <I2SEx_RxISR_I2SExt+0x64>
 80071bc:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <I2SEx_RxISR_I2SExt+0x94>)
 80071be:	e001      	b.n	80071c4 <I2SEx_RxISR_I2SExt+0x68>
 80071c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff ff03 	bl	8006fe8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071e2:	bf00      	nop
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40003800 	.word	0x40003800
 80071f0:	40003400 	.word	0x40003400

080071f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e267      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d075      	beq.n	80072fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007212:	4b88      	ldr	r3, [pc, #544]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 030c 	and.w	r3, r3, #12
 800721a:	2b04      	cmp	r3, #4
 800721c:	d00c      	beq.n	8007238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800721e:	4b85      	ldr	r3, [pc, #532]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007226:	2b08      	cmp	r3, #8
 8007228:	d112      	bne.n	8007250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800722a:	4b82      	ldr	r3, [pc, #520]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007236:	d10b      	bne.n	8007250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007238:	4b7e      	ldr	r3, [pc, #504]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d05b      	beq.n	80072fc <HAL_RCC_OscConfig+0x108>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d157      	bne.n	80072fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e242      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007258:	d106      	bne.n	8007268 <HAL_RCC_OscConfig+0x74>
 800725a:	4b76      	ldr	r3, [pc, #472]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a75      	ldr	r2, [pc, #468]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	e01d      	b.n	80072a4 <HAL_RCC_OscConfig+0xb0>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007270:	d10c      	bne.n	800728c <HAL_RCC_OscConfig+0x98>
 8007272:	4b70      	ldr	r3, [pc, #448]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a6f      	ldr	r2, [pc, #444]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	4b6d      	ldr	r3, [pc, #436]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a6c      	ldr	r2, [pc, #432]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	e00b      	b.n	80072a4 <HAL_RCC_OscConfig+0xb0>
 800728c:	4b69      	ldr	r3, [pc, #420]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a68      	ldr	r2, [pc, #416]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	4b66      	ldr	r3, [pc, #408]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a65      	ldr	r2, [pc, #404]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 800729e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d013      	beq.n	80072d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ac:	f7fb fa98 	bl	80027e0 <HAL_GetTick>
 80072b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072b4:	f7fb fa94 	bl	80027e0 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b64      	cmp	r3, #100	; 0x64
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e207      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072c6:	4b5b      	ldr	r3, [pc, #364]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0f0      	beq.n	80072b4 <HAL_RCC_OscConfig+0xc0>
 80072d2:	e014      	b.n	80072fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d4:	f7fb fa84 	bl	80027e0 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072da:	e008      	b.n	80072ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072dc:	f7fb fa80 	bl	80027e0 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b64      	cmp	r3, #100	; 0x64
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e1f3      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072ee:	4b51      	ldr	r3, [pc, #324]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f0      	bne.n	80072dc <HAL_RCC_OscConfig+0xe8>
 80072fa:	e000      	b.n	80072fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d063      	beq.n	80073d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800730a:	4b4a      	ldr	r3, [pc, #296]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 030c 	and.w	r3, r3, #12
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00b      	beq.n	800732e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007316:	4b47      	ldr	r3, [pc, #284]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800731e:	2b08      	cmp	r3, #8
 8007320:	d11c      	bne.n	800735c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007322:	4b44      	ldr	r3, [pc, #272]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d116      	bne.n	800735c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800732e:	4b41      	ldr	r3, [pc, #260]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d005      	beq.n	8007346 <HAL_RCC_OscConfig+0x152>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d001      	beq.n	8007346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e1c7      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007346:	4b3b      	ldr	r3, [pc, #236]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	4937      	ldr	r1, [pc, #220]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007356:	4313      	orrs	r3, r2
 8007358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800735a:	e03a      	b.n	80073d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d020      	beq.n	80073a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007364:	4b34      	ldr	r3, [pc, #208]	; (8007438 <HAL_RCC_OscConfig+0x244>)
 8007366:	2201      	movs	r2, #1
 8007368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736a:	f7fb fa39 	bl	80027e0 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007370:	e008      	b.n	8007384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007372:	f7fb fa35 	bl	80027e0 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e1a8      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007384:	4b2b      	ldr	r3, [pc, #172]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0f0      	beq.n	8007372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007390:	4b28      	ldr	r3, [pc, #160]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	4925      	ldr	r1, [pc, #148]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	600b      	str	r3, [r1, #0]
 80073a4:	e015      	b.n	80073d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073a6:	4b24      	ldr	r3, [pc, #144]	; (8007438 <HAL_RCC_OscConfig+0x244>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ac:	f7fb fa18 	bl	80027e0 <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073b4:	f7fb fa14 	bl	80027e0 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e187      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073c6:	4b1b      	ldr	r3, [pc, #108]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f0      	bne.n	80073b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d036      	beq.n	800744c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d016      	beq.n	8007414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073e6:	4b15      	ldr	r3, [pc, #84]	; (800743c <HAL_RCC_OscConfig+0x248>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ec:	f7fb f9f8 	bl	80027e0 <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073f4:	f7fb f9f4 	bl	80027e0 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e167      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007406:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <HAL_RCC_OscConfig+0x240>)
 8007408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f0      	beq.n	80073f4 <HAL_RCC_OscConfig+0x200>
 8007412:	e01b      	b.n	800744c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007414:	4b09      	ldr	r3, [pc, #36]	; (800743c <HAL_RCC_OscConfig+0x248>)
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800741a:	f7fb f9e1 	bl	80027e0 <HAL_GetTick>
 800741e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007420:	e00e      	b.n	8007440 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007422:	f7fb f9dd 	bl	80027e0 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d907      	bls.n	8007440 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e150      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
 8007434:	40023800 	.word	0x40023800
 8007438:	42470000 	.word	0x42470000
 800743c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007440:	4b88      	ldr	r3, [pc, #544]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 8007442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1ea      	bne.n	8007422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8097 	beq.w	8007588 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800745a:	2300      	movs	r3, #0
 800745c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800745e:	4b81      	ldr	r3, [pc, #516]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10f      	bne.n	800748a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800746a:	2300      	movs	r3, #0
 800746c:	60bb      	str	r3, [r7, #8]
 800746e:	4b7d      	ldr	r3, [pc, #500]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	4a7c      	ldr	r2, [pc, #496]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 8007474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007478:	6413      	str	r3, [r2, #64]	; 0x40
 800747a:	4b7a      	ldr	r3, [pc, #488]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007482:	60bb      	str	r3, [r7, #8]
 8007484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007486:	2301      	movs	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800748a:	4b77      	ldr	r3, [pc, #476]	; (8007668 <HAL_RCC_OscConfig+0x474>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007492:	2b00      	cmp	r3, #0
 8007494:	d118      	bne.n	80074c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007496:	4b74      	ldr	r3, [pc, #464]	; (8007668 <HAL_RCC_OscConfig+0x474>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a73      	ldr	r2, [pc, #460]	; (8007668 <HAL_RCC_OscConfig+0x474>)
 800749c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074a2:	f7fb f99d 	bl	80027e0 <HAL_GetTick>
 80074a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074a8:	e008      	b.n	80074bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074aa:	f7fb f999 	bl	80027e0 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e10c      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074bc:	4b6a      	ldr	r3, [pc, #424]	; (8007668 <HAL_RCC_OscConfig+0x474>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0f0      	beq.n	80074aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d106      	bne.n	80074de <HAL_RCC_OscConfig+0x2ea>
 80074d0:	4b64      	ldr	r3, [pc, #400]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 80074d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d4:	4a63      	ldr	r2, [pc, #396]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 80074d6:	f043 0301 	orr.w	r3, r3, #1
 80074da:	6713      	str	r3, [r2, #112]	; 0x70
 80074dc:	e01c      	b.n	8007518 <HAL_RCC_OscConfig+0x324>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2b05      	cmp	r3, #5
 80074e4:	d10c      	bne.n	8007500 <HAL_RCC_OscConfig+0x30c>
 80074e6:	4b5f      	ldr	r3, [pc, #380]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	4a5e      	ldr	r2, [pc, #376]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 80074ec:	f043 0304 	orr.w	r3, r3, #4
 80074f0:	6713      	str	r3, [r2, #112]	; 0x70
 80074f2:	4b5c      	ldr	r3, [pc, #368]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f6:	4a5b      	ldr	r2, [pc, #364]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 80074f8:	f043 0301 	orr.w	r3, r3, #1
 80074fc:	6713      	str	r3, [r2, #112]	; 0x70
 80074fe:	e00b      	b.n	8007518 <HAL_RCC_OscConfig+0x324>
 8007500:	4b58      	ldr	r3, [pc, #352]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	4a57      	ldr	r2, [pc, #348]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	6713      	str	r3, [r2, #112]	; 0x70
 800750c:	4b55      	ldr	r3, [pc, #340]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 800750e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007510:	4a54      	ldr	r2, [pc, #336]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 8007512:	f023 0304 	bic.w	r3, r3, #4
 8007516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d015      	beq.n	800754c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007520:	f7fb f95e 	bl	80027e0 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007526:	e00a      	b.n	800753e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007528:	f7fb f95a 	bl	80027e0 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	f241 3288 	movw	r2, #5000	; 0x1388
 8007536:	4293      	cmp	r3, r2
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e0cb      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800753e:	4b49      	ldr	r3, [pc, #292]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 8007540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0ee      	beq.n	8007528 <HAL_RCC_OscConfig+0x334>
 800754a:	e014      	b.n	8007576 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800754c:	f7fb f948 	bl	80027e0 <HAL_GetTick>
 8007550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007552:	e00a      	b.n	800756a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007554:	f7fb f944 	bl	80027e0 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007562:	4293      	cmp	r3, r2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e0b5      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800756a:	4b3e      	ldr	r3, [pc, #248]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 800756c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1ee      	bne.n	8007554 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d105      	bne.n	8007588 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800757c:	4b39      	ldr	r3, [pc, #228]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	4a38      	ldr	r2, [pc, #224]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 8007582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 80a1 	beq.w	80076d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007592:	4b34      	ldr	r3, [pc, #208]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 030c 	and.w	r3, r3, #12
 800759a:	2b08      	cmp	r3, #8
 800759c:	d05c      	beq.n	8007658 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d141      	bne.n	800762a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a6:	4b31      	ldr	r3, [pc, #196]	; (800766c <HAL_RCC_OscConfig+0x478>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ac:	f7fb f918 	bl	80027e0 <HAL_GetTick>
 80075b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075b2:	e008      	b.n	80075c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075b4:	f7fb f914 	bl	80027e0 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e087      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075c6:	4b27      	ldr	r3, [pc, #156]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1f0      	bne.n	80075b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69da      	ldr	r2, [r3, #28]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	019b      	lsls	r3, r3, #6
 80075e2:	431a      	orrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	085b      	lsrs	r3, r3, #1
 80075ea:	3b01      	subs	r3, #1
 80075ec:	041b      	lsls	r3, r3, #16
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	061b      	lsls	r3, r3, #24
 80075f6:	491b      	ldr	r1, [pc, #108]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075fc:	4b1b      	ldr	r3, [pc, #108]	; (800766c <HAL_RCC_OscConfig+0x478>)
 80075fe:	2201      	movs	r2, #1
 8007600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007602:	f7fb f8ed 	bl	80027e0 <HAL_GetTick>
 8007606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007608:	e008      	b.n	800761c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800760a:	f7fb f8e9 	bl	80027e0 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e05c      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800761c:	4b11      	ldr	r3, [pc, #68]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0f0      	beq.n	800760a <HAL_RCC_OscConfig+0x416>
 8007628:	e054      	b.n	80076d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800762a:	4b10      	ldr	r3, [pc, #64]	; (800766c <HAL_RCC_OscConfig+0x478>)
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007630:	f7fb f8d6 	bl	80027e0 <HAL_GetTick>
 8007634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007636:	e008      	b.n	800764a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007638:	f7fb f8d2 	bl	80027e0 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e045      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800764a:	4b06      	ldr	r3, [pc, #24]	; (8007664 <HAL_RCC_OscConfig+0x470>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f0      	bne.n	8007638 <HAL_RCC_OscConfig+0x444>
 8007656:	e03d      	b.n	80076d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d107      	bne.n	8007670 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e038      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
 8007664:	40023800 	.word	0x40023800
 8007668:	40007000 	.word	0x40007000
 800766c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007670:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <HAL_RCC_OscConfig+0x4ec>)
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d028      	beq.n	80076d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007688:	429a      	cmp	r2, r3
 800768a:	d121      	bne.n	80076d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007696:	429a      	cmp	r2, r3
 8007698:	d11a      	bne.n	80076d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076a0:	4013      	ands	r3, r2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d111      	bne.n	80076d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b6:	085b      	lsrs	r3, r3, #1
 80076b8:	3b01      	subs	r3, #1
 80076ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076bc:	429a      	cmp	r2, r3
 80076be:	d107      	bne.n	80076d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d001      	beq.n	80076d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e000      	b.n	80076d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	40023800 	.word	0x40023800

080076e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e0cc      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076f8:	4b68      	ldr	r3, [pc, #416]	; (800789c <HAL_RCC_ClockConfig+0x1b8>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0307 	and.w	r3, r3, #7
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d90c      	bls.n	8007720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007706:	4b65      	ldr	r3, [pc, #404]	; (800789c <HAL_RCC_ClockConfig+0x1b8>)
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800770e:	4b63      	ldr	r3, [pc, #396]	; (800789c <HAL_RCC_ClockConfig+0x1b8>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d001      	beq.n	8007720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e0b8      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d020      	beq.n	800776e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007738:	4b59      	ldr	r3, [pc, #356]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	4a58      	ldr	r2, [pc, #352]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 800773e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0308 	and.w	r3, r3, #8
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007750:	4b53      	ldr	r3, [pc, #332]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4a52      	ldr	r2, [pc, #328]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800775a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800775c:	4b50      	ldr	r3, [pc, #320]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	494d      	ldr	r1, [pc, #308]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 800776a:	4313      	orrs	r3, r2
 800776c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d044      	beq.n	8007804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d107      	bne.n	8007792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007782:	4b47      	ldr	r3, [pc, #284]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d119      	bne.n	80077c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e07f      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d003      	beq.n	80077a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d107      	bne.n	80077b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077a2:	4b3f      	ldr	r3, [pc, #252]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d109      	bne.n	80077c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e06f      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077b2:	4b3b      	ldr	r3, [pc, #236]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e067      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077c2:	4b37      	ldr	r3, [pc, #220]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f023 0203 	bic.w	r2, r3, #3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	4934      	ldr	r1, [pc, #208]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077d4:	f7fb f804 	bl	80027e0 <HAL_GetTick>
 80077d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077da:	e00a      	b.n	80077f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077dc:	f7fb f800 	bl	80027e0 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d901      	bls.n	80077f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e04f      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077f2:	4b2b      	ldr	r3, [pc, #172]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 020c 	and.w	r2, r3, #12
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	429a      	cmp	r2, r3
 8007802:	d1eb      	bne.n	80077dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007804:	4b25      	ldr	r3, [pc, #148]	; (800789c <HAL_RCC_ClockConfig+0x1b8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d20c      	bcs.n	800782c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007812:	4b22      	ldr	r3, [pc, #136]	; (800789c <HAL_RCC_ClockConfig+0x1b8>)
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800781a:	4b20      	ldr	r3, [pc, #128]	; (800789c <HAL_RCC_ClockConfig+0x1b8>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d001      	beq.n	800782c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e032      	b.n	8007892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d008      	beq.n	800784a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007838:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	4916      	ldr	r1, [pc, #88]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007846:	4313      	orrs	r3, r2
 8007848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007856:	4b12      	ldr	r3, [pc, #72]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	490e      	ldr	r1, [pc, #56]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007866:	4313      	orrs	r3, r2
 8007868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800786a:	f000 f821 	bl	80078b0 <HAL_RCC_GetSysClockFreq>
 800786e:	4602      	mov	r2, r0
 8007870:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	091b      	lsrs	r3, r3, #4
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	490a      	ldr	r1, [pc, #40]	; (80078a4 <HAL_RCC_ClockConfig+0x1c0>)
 800787c:	5ccb      	ldrb	r3, [r1, r3]
 800787e:	fa22 f303 	lsr.w	r3, r2, r3
 8007882:	4a09      	ldr	r2, [pc, #36]	; (80078a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007886:	4b09      	ldr	r3, [pc, #36]	; (80078ac <HAL_RCC_ClockConfig+0x1c8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f7fa ff64 	bl	8002758 <HAL_InitTick>

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	40023c00 	.word	0x40023c00
 80078a0:	40023800 	.word	0x40023800
 80078a4:	08011ab0 	.word	0x08011ab0
 80078a8:	20000038 	.word	0x20000038
 80078ac:	20000040 	.word	0x20000040

080078b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078b4:	b094      	sub	sp, #80	; 0x50
 80078b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	647b      	str	r3, [r7, #68]	; 0x44
 80078bc:	2300      	movs	r3, #0
 80078be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078c0:	2300      	movs	r3, #0
 80078c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078c8:	4b79      	ldr	r3, [pc, #484]	; (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 030c 	and.w	r3, r3, #12
 80078d0:	2b08      	cmp	r3, #8
 80078d2:	d00d      	beq.n	80078f0 <HAL_RCC_GetSysClockFreq+0x40>
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	f200 80e1 	bhi.w	8007a9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <HAL_RCC_GetSysClockFreq+0x34>
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d003      	beq.n	80078ea <HAL_RCC_GetSysClockFreq+0x3a>
 80078e2:	e0db      	b.n	8007a9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078e4:	4b73      	ldr	r3, [pc, #460]	; (8007ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 80078e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80078e8:	e0db      	b.n	8007aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078ea:	4b73      	ldr	r3, [pc, #460]	; (8007ab8 <HAL_RCC_GetSysClockFreq+0x208>)
 80078ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078ee:	e0d8      	b.n	8007aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078f0:	4b6f      	ldr	r3, [pc, #444]	; (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078fa:	4b6d      	ldr	r3, [pc, #436]	; (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d063      	beq.n	80079ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007906:	4b6a      	ldr	r3, [pc, #424]	; (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	099b      	lsrs	r3, r3, #6
 800790c:	2200      	movs	r2, #0
 800790e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007910:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007918:	633b      	str	r3, [r7, #48]	; 0x30
 800791a:	2300      	movs	r3, #0
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
 800791e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007922:	4622      	mov	r2, r4
 8007924:	462b      	mov	r3, r5
 8007926:	f04f 0000 	mov.w	r0, #0
 800792a:	f04f 0100 	mov.w	r1, #0
 800792e:	0159      	lsls	r1, r3, #5
 8007930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007934:	0150      	lsls	r0, r2, #5
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4621      	mov	r1, r4
 800793c:	1a51      	subs	r1, r2, r1
 800793e:	6139      	str	r1, [r7, #16]
 8007940:	4629      	mov	r1, r5
 8007942:	eb63 0301 	sbc.w	r3, r3, r1
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	f04f 0200 	mov.w	r2, #0
 800794c:	f04f 0300 	mov.w	r3, #0
 8007950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007954:	4659      	mov	r1, fp
 8007956:	018b      	lsls	r3, r1, #6
 8007958:	4651      	mov	r1, sl
 800795a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800795e:	4651      	mov	r1, sl
 8007960:	018a      	lsls	r2, r1, #6
 8007962:	4651      	mov	r1, sl
 8007964:	ebb2 0801 	subs.w	r8, r2, r1
 8007968:	4659      	mov	r1, fp
 800796a:	eb63 0901 	sbc.w	r9, r3, r1
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	f04f 0300 	mov.w	r3, #0
 8007976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800797a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800797e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007982:	4690      	mov	r8, r2
 8007984:	4699      	mov	r9, r3
 8007986:	4623      	mov	r3, r4
 8007988:	eb18 0303 	adds.w	r3, r8, r3
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	462b      	mov	r3, r5
 8007990:	eb49 0303 	adc.w	r3, r9, r3
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	f04f 0200 	mov.w	r2, #0
 800799a:	f04f 0300 	mov.w	r3, #0
 800799e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80079a2:	4629      	mov	r1, r5
 80079a4:	024b      	lsls	r3, r1, #9
 80079a6:	4621      	mov	r1, r4
 80079a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80079ac:	4621      	mov	r1, r4
 80079ae:	024a      	lsls	r2, r1, #9
 80079b0:	4610      	mov	r0, r2
 80079b2:	4619      	mov	r1, r3
 80079b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079b6:	2200      	movs	r2, #0
 80079b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80079ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079c0:	f7f8 fc66 	bl	8000290 <__aeabi_uldivmod>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4613      	mov	r3, r2
 80079ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079cc:	e058      	b.n	8007a80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079ce:	4b38      	ldr	r3, [pc, #224]	; (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	099b      	lsrs	r3, r3, #6
 80079d4:	2200      	movs	r2, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	4611      	mov	r1, r2
 80079da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80079de:	623b      	str	r3, [r7, #32]
 80079e0:	2300      	movs	r3, #0
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
 80079e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079e8:	4642      	mov	r2, r8
 80079ea:	464b      	mov	r3, r9
 80079ec:	f04f 0000 	mov.w	r0, #0
 80079f0:	f04f 0100 	mov.w	r1, #0
 80079f4:	0159      	lsls	r1, r3, #5
 80079f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079fa:	0150      	lsls	r0, r2, #5
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4641      	mov	r1, r8
 8007a02:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a06:	4649      	mov	r1, r9
 8007a08:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	f04f 0300 	mov.w	r3, #0
 8007a14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007a18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007a1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007a20:	ebb2 040a 	subs.w	r4, r2, sl
 8007a24:	eb63 050b 	sbc.w	r5, r3, fp
 8007a28:	f04f 0200 	mov.w	r2, #0
 8007a2c:	f04f 0300 	mov.w	r3, #0
 8007a30:	00eb      	lsls	r3, r5, #3
 8007a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a36:	00e2      	lsls	r2, r4, #3
 8007a38:	4614      	mov	r4, r2
 8007a3a:	461d      	mov	r5, r3
 8007a3c:	4643      	mov	r3, r8
 8007a3e:	18e3      	adds	r3, r4, r3
 8007a40:	603b      	str	r3, [r7, #0]
 8007a42:	464b      	mov	r3, r9
 8007a44:	eb45 0303 	adc.w	r3, r5, r3
 8007a48:	607b      	str	r3, [r7, #4]
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a56:	4629      	mov	r1, r5
 8007a58:	028b      	lsls	r3, r1, #10
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a60:	4621      	mov	r1, r4
 8007a62:	028a      	lsls	r2, r1, #10
 8007a64:	4610      	mov	r0, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	61bb      	str	r3, [r7, #24]
 8007a6e:	61fa      	str	r2, [r7, #28]
 8007a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a74:	f7f8 fc0c 	bl	8000290 <__aeabi_uldivmod>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a80:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	0c1b      	lsrs	r3, r3, #16
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a9a:	e002      	b.n	8007aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3750      	adds	r7, #80	; 0x50
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aae:	bf00      	nop
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	00f42400 	.word	0x00f42400
 8007ab8:	007a1200 	.word	0x007a1200

08007abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ac0:	4b03      	ldr	r3, [pc, #12]	; (8007ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	20000038 	.word	0x20000038

08007ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ad8:	f7ff fff0 	bl	8007abc <HAL_RCC_GetHCLKFreq>
 8007adc:	4602      	mov	r2, r0
 8007ade:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	0a9b      	lsrs	r3, r3, #10
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	4903      	ldr	r1, [pc, #12]	; (8007af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aea:	5ccb      	ldrb	r3, [r1, r3]
 8007aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40023800 	.word	0x40023800
 8007af8:	08011ac0 	.word	0x08011ac0

08007afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b00:	f7ff ffdc 	bl	8007abc <HAL_RCC_GetHCLKFreq>
 8007b04:	4602      	mov	r2, r0
 8007b06:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	0b5b      	lsrs	r3, r3, #13
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	4903      	ldr	r1, [pc, #12]	; (8007b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b12:	5ccb      	ldrb	r3, [r1, r3]
 8007b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40023800 	.word	0x40023800
 8007b20:	08011ac0 	.word	0x08011ac0

08007b24 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d105      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d038      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b4c:	4b68      	ldr	r3, [pc, #416]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b52:	f7fa fe45 	bl	80027e0 <HAL_GetTick>
 8007b56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b58:	e008      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b5a:	f7fa fe41 	bl	80027e0 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d901      	bls.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e0bd      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b6c:	4b61      	ldr	r3, [pc, #388]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1f0      	bne.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	019b      	lsls	r3, r3, #6
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	071b      	lsls	r3, r3, #28
 8007b8a:	495a      	ldr	r1, [pc, #360]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b92:	4b57      	ldr	r3, [pc, #348]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b98:	f7fa fe22 	bl	80027e0 <HAL_GetTick>
 8007b9c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ba0:	f7fa fe1e 	bl	80027e0 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e09a      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bb2:	4b50      	ldr	r3, [pc, #320]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0f0      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 8083 	beq.w	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	4b48      	ldr	r3, [pc, #288]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd4:	4a47      	ldr	r2, [pc, #284]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bda:	6413      	str	r3, [r2, #64]	; 0x40
 8007bdc:	4b45      	ldr	r3, [pc, #276]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007be8:	4b43      	ldr	r3, [pc, #268]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a42      	ldr	r2, [pc, #264]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bf2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bf4:	f7fa fdf4 	bl	80027e0 <HAL_GetTick>
 8007bf8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bfc:	f7fa fdf0 	bl	80027e0 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e06c      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c0e:	4b3a      	ldr	r3, [pc, #232]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0f0      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c1a:	4b36      	ldr	r3, [pc, #216]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c22:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d02f      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d028      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c38:	4b2e      	ldr	r3, [pc, #184]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c40:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c42:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c44:	2201      	movs	r2, #1
 8007c46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c48:	4b2c      	ldr	r3, [pc, #176]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c4e:	4a29      	ldr	r2, [pc, #164]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c54:	4b27      	ldr	r3, [pc, #156]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d114      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c60:	f7fa fdbe 	bl	80027e0 <HAL_GetTick>
 8007c64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c66:	e00a      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c68:	f7fa fdba 	bl	80027e0 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d901      	bls.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e034      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c7e:	4b1d      	ldr	r3, [pc, #116]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0ee      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c96:	d10d      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007c98:	4b16      	ldr	r3, [pc, #88]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cac:	4911      	ldr	r1, [pc, #68]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	608b      	str	r3, [r1, #8]
 8007cb2:	e005      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007cb4:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	4a0e      	ldr	r2, [pc, #56]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007cbe:	6093      	str	r3, [r2, #8]
 8007cc0:	4b0c      	ldr	r3, [pc, #48]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ccc:	4909      	ldr	r1, [pc, #36]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	7d1a      	ldrb	r2, [r3, #20]
 8007ce2:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007ce4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	42470068 	.word	0x42470068
 8007cf4:	40023800 	.word	0x40023800
 8007cf8:	40007000 	.word	0x40007000
 8007cfc:	42470e40 	.word	0x42470e40
 8007d00:	424711e0 	.word	0x424711e0

08007d04 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007d12:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d18:	099b      	lsrs	r3, r3, #6
 8007d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d22:	4b18      	ldr	r3, [pc, #96]	; (8007d84 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d28:	0f1b      	lsrs	r3, r3, #28
 8007d2a:	f003 0207 	and.w	r2, r3, #7
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8007d32:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007d40:	4b10      	ldr	r3, [pc, #64]	; (8007d84 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007d48:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	431a      	orrs	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d103      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007d6e:	e002      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	751a      	strb	r2, [r3, #20]
}
 8007d76:	bf00      	nop
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	40023800 	.word	0x40023800

08007d88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d140      	bne.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007da6:	4b24      	ldr	r3, [pc, #144]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d005      	beq.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d131      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007dbc:	4b1f      	ldr	r3, [pc, #124]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007dbe:	617b      	str	r3, [r7, #20]
          break;
 8007dc0:	e031      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007dc2:	4b1d      	ldr	r3, [pc, #116]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dce:	d109      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007dd0:	4b19      	ldr	r3, [pc, #100]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dda:	4a19      	ldr	r2, [pc, #100]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de0:	613b      	str	r3, [r7, #16]
 8007de2:	e008      	b.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007de4:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dee:	4a15      	ldr	r2, [pc, #84]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007df6:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dfc:	099b      	lsrs	r3, r3, #6
 8007dfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	fb02 f303 	mul.w	r3, r2, r3
 8007e08:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e10:	0f1b      	lsrs	r3, r3, #28
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1c:	617b      	str	r3, [r7, #20]
          break;
 8007e1e:	e002      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	617b      	str	r3, [r7, #20]
          break;
 8007e24:	bf00      	nop
        }
      }
      break;
 8007e26:	bf00      	nop
    }
  }
  return frequency;
 8007e28:	697b      	ldr	r3, [r7, #20]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	00bb8000 	.word	0x00bb8000
 8007e40:	007a1200 	.word	0x007a1200
 8007e44:	00f42400 	.word	0x00f42400

08007e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e03f      	b.n	8007eda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d106      	bne.n	8007e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7fa f984 	bl	800217c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2224      	movs	r2, #36	; 0x24
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fe81 	bl	8008b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691a      	ldr	r2, [r3, #16]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	695a      	ldr	r2, [r3, #20]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b08a      	sub	sp, #40	; 0x28
 8007ee6:	af02      	add	r7, sp, #8
 8007ee8:	60f8      	str	r0, [r7, #12]
 8007eea:	60b9      	str	r1, [r7, #8]
 8007eec:	603b      	str	r3, [r7, #0]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d17c      	bne.n	8007ffc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <HAL_UART_Transmit+0x2c>
 8007f08:	88fb      	ldrh	r3, [r7, #6]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e075      	b.n	8007ffe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d101      	bne.n	8007f20 <HAL_UART_Transmit+0x3e>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e06e      	b.n	8007ffe <HAL_UART_Transmit+0x11c>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2221      	movs	r2, #33	; 0x21
 8007f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f36:	f7fa fc53 	bl	80027e0 <HAL_GetTick>
 8007f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	88fa      	ldrh	r2, [r7, #6]
 8007f46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f50:	d108      	bne.n	8007f64 <HAL_UART_Transmit+0x82>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d104      	bne.n	8007f64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	e003      	b.n	8007f6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f74:	e02a      	b.n	8007fcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2180      	movs	r1, #128	; 0x80
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 fbc1 	bl	8008708 <UART_WaitOnFlagUntilTimeout>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e036      	b.n	8007ffe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10b      	bne.n	8007fae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	3302      	adds	r3, #2
 8007faa:	61bb      	str	r3, [r7, #24]
 8007fac:	e007      	b.n	8007fbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	781a      	ldrb	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1cf      	bne.n	8007f76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2140      	movs	r1, #64	; 0x40
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 fb91 	bl	8008708 <UART_WaitOnFlagUntilTimeout>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e006      	b.n	8007ffe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e000      	b.n	8007ffe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
  }
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b08a      	sub	sp, #40	; 0x28
 800800a:	af02      	add	r7, sp, #8
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	603b      	str	r3, [r7, #0]
 8008012:	4613      	mov	r3, r2
 8008014:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b20      	cmp	r3, #32
 8008024:	f040 808c 	bne.w	8008140 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <HAL_UART_Receive+0x2e>
 800802e:	88fb      	ldrh	r3, [r7, #6]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e084      	b.n	8008142 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <HAL_UART_Receive+0x40>
 8008042:	2302      	movs	r3, #2
 8008044:	e07d      	b.n	8008142 <HAL_UART_Receive+0x13c>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2222      	movs	r2, #34	; 0x22
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008062:	f7fa fbbd 	bl	80027e0 <HAL_GetTick>
 8008066:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	88fa      	ldrh	r2, [r7, #6]
 800806c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	88fa      	ldrh	r2, [r7, #6]
 8008072:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807c:	d108      	bne.n	8008090 <HAL_UART_Receive+0x8a>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d104      	bne.n	8008090 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	61bb      	str	r3, [r7, #24]
 800808e:	e003      	b.n	8008098 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008094:	2300      	movs	r3, #0
 8008096:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80080a0:	e043      	b.n	800812a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2200      	movs	r2, #0
 80080aa:	2120      	movs	r1, #32
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 fb2b 	bl	8008708 <UART_WaitOnFlagUntilTimeout>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e042      	b.n	8008142 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10c      	bne.n	80080dc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	3302      	adds	r3, #2
 80080d8:	61bb      	str	r3, [r7, #24]
 80080da:	e01f      	b.n	800811c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e4:	d007      	beq.n	80080f6 <HAL_UART_Receive+0xf0>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10a      	bne.n	8008104 <HAL_UART_Receive+0xfe>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	701a      	strb	r2, [r3, #0]
 8008102:	e008      	b.n	8008116 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008110:	b2da      	uxtb	r2, r3
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	3301      	adds	r3, #1
 800811a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800812e:	b29b      	uxth	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1b6      	bne.n	80080a2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	e000      	b.n	8008142 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008140:	2302      	movs	r3, #2
  }
}
 8008142:	4618      	mov	r0, r3
 8008144:	3720      	adds	r7, #32
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	4613      	mov	r3, r2
 8008156:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b20      	cmp	r3, #32
 8008162:	d11d      	bne.n	80081a0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <HAL_UART_Receive_IT+0x26>
 800816a:	88fb      	ldrh	r3, [r7, #6]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e016      	b.n	80081a2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800817a:	2b01      	cmp	r3, #1
 800817c:	d101      	bne.n	8008182 <HAL_UART_Receive_IT+0x38>
 800817e:	2302      	movs	r3, #2
 8008180:	e00f      	b.n	80081a2 <HAL_UART_Receive_IT+0x58>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008190:	88fb      	ldrh	r3, [r7, #6]
 8008192:	461a      	mov	r2, r3
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 fb24 	bl	80087e4 <UART_Start_Receive_IT>
 800819c:	4603      	mov	r3, r0
 800819e:	e000      	b.n	80081a2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80081a0:	2302      	movs	r3, #2
  }
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b0ba      	sub	sp, #232	; 0xe8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80081d8:	2300      	movs	r3, #0
 80081da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80081ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10f      	bne.n	8008212 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f6:	f003 0320 	and.w	r3, r3, #32
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d009      	beq.n	8008212 <HAL_UART_IRQHandler+0x66>
 80081fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008202:	f003 0320 	and.w	r3, r3, #32
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fc07 	bl	8008a1e <UART_Receive_IT>
      return;
 8008210:	e256      	b.n	80086c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 80de 	beq.w	80083d8 <HAL_UART_IRQHandler+0x22c>
 800821c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d106      	bne.n	8008236 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800822c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 80d1 	beq.w	80083d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00b      	beq.n	800825a <HAL_UART_IRQHandler+0xae>
 8008242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800824a:	2b00      	cmp	r3, #0
 800824c:	d005      	beq.n	800825a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	f043 0201 	orr.w	r2, r3, #1
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800825a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825e:	f003 0304 	and.w	r3, r3, #4
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <HAL_UART_IRQHandler+0xd2>
 8008266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d005      	beq.n	800827e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	f043 0202 	orr.w	r2, r3, #2
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00b      	beq.n	80082a2 <HAL_UART_IRQHandler+0xf6>
 800828a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d005      	beq.n	80082a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	f043 0204 	orr.w	r2, r3, #4
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a6:	f003 0308 	and.w	r3, r3, #8
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d011      	beq.n	80082d2 <HAL_UART_IRQHandler+0x126>
 80082ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	f043 0208 	orr.w	r2, r3, #8
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 81ed 	beq.w	80086b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d008      	beq.n	80082fa <HAL_UART_IRQHandler+0x14e>
 80082e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ec:	f003 0320 	and.w	r3, r3, #32
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fb92 	bl	8008a1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	bf0c      	ite	eq
 8008308:	2301      	moveq	r3, #1
 800830a:	2300      	movne	r3, #0
 800830c:	b2db      	uxtb	r3, r3
 800830e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008316:	f003 0308 	and.w	r3, r3, #8
 800831a:	2b00      	cmp	r3, #0
 800831c:	d103      	bne.n	8008326 <HAL_UART_IRQHandler+0x17a>
 800831e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008322:	2b00      	cmp	r3, #0
 8008324:	d04f      	beq.n	80083c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fa9a 	bl	8008860 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008336:	2b40      	cmp	r3, #64	; 0x40
 8008338:	d141      	bne.n	80083be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3314      	adds	r3, #20
 8008340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3314      	adds	r3, #20
 8008362:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008366:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800836a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008376:	e841 2300 	strex	r3, r2, [r1]
 800837a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800837e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1d9      	bne.n	800833a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	2b00      	cmp	r3, #0
 800838c:	d013      	beq.n	80083b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	4a7d      	ldr	r2, [pc, #500]	; (8008588 <HAL_UART_IRQHandler+0x3dc>)
 8008394:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839a:	4618      	mov	r0, r3
 800839c:	f7fa fd36 	bl	8002e0c <HAL_DMA_Abort_IT>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d016      	beq.n	80083d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083b0:	4610      	mov	r0, r2
 80083b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b4:	e00e      	b.n	80083d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f990 	bl	80086dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083bc:	e00a      	b.n	80083d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f98c 	bl	80086dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c4:	e006      	b.n	80083d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f988 	bl	80086dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80083d2:	e170      	b.n	80086b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d4:	bf00      	nop
    return;
 80083d6:	e16e      	b.n	80086b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	2b01      	cmp	r3, #1
 80083de:	f040 814a 	bne.w	8008676 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80083e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 8143 	beq.w	8008676 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f4:	f003 0310 	and.w	r3, r3, #16
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 813c 	beq.w	8008676 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083fe:	2300      	movs	r3, #0
 8008400:	60bb      	str	r3, [r7, #8]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60bb      	str	r3, [r7, #8]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841e:	2b40      	cmp	r3, #64	; 0x40
 8008420:	f040 80b4 	bne.w	800858c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008430:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8140 	beq.w	80086ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800843e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008442:	429a      	cmp	r2, r3
 8008444:	f080 8139 	bcs.w	80086ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800844e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800845a:	f000 8088 	beq.w	800856e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	330c      	adds	r3, #12
 8008464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800847c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	330c      	adds	r3, #12
 8008486:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800848a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800848e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008496:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1d9      	bne.n	800845e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3314      	adds	r3, #20
 80084b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084b4:	e853 3f00 	ldrex	r3, [r3]
 80084b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084bc:	f023 0301 	bic.w	r3, r3, #1
 80084c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3314      	adds	r3, #20
 80084ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1e1      	bne.n	80084aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3314      	adds	r3, #20
 80084ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3314      	adds	r3, #20
 8008506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800850a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800850c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e3      	bne.n	80084e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	330c      	adds	r3, #12
 8008532:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800853c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800853e:	f023 0310 	bic.w	r3, r3, #16
 8008542:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	330c      	adds	r3, #12
 800854c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008550:	65ba      	str	r2, [r7, #88]	; 0x58
 8008552:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008554:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008556:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008558:	e841 2300 	strex	r3, r2, [r1]
 800855c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800855e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e3      	bne.n	800852c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008568:	4618      	mov	r0, r3
 800856a:	f7fa fbdf 	bl	8002d2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008576:	b29b      	uxth	r3, r3
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	b29b      	uxth	r3, r3
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f8b6 	bl	80086f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008584:	e099      	b.n	80086ba <HAL_UART_IRQHandler+0x50e>
 8008586:	bf00      	nop
 8008588:	08008927 	.word	0x08008927
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008594:	b29b      	uxth	r3, r3
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 808b 	beq.w	80086be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80085a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8086 	beq.w	80086be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	330c      	adds	r3, #12
 80085b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	330c      	adds	r3, #12
 80085d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085d6:	647a      	str	r2, [r7, #68]	; 0x44
 80085d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085de:	e841 2300 	strex	r3, r2, [r1]
 80085e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1e3      	bne.n	80085b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3314      	adds	r3, #20
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	623b      	str	r3, [r7, #32]
   return(result);
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	f023 0301 	bic.w	r3, r3, #1
 8008600:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3314      	adds	r3, #20
 800860a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800860e:	633a      	str	r2, [r7, #48]	; 0x30
 8008610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e3      	bne.n	80085ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2220      	movs	r2, #32
 8008626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	330c      	adds	r3, #12
 8008636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	e853 3f00 	ldrex	r3, [r3]
 800863e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0310 	bic.w	r3, r3, #16
 8008646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	330c      	adds	r3, #12
 8008650:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008654:	61fa      	str	r2, [r7, #28]
 8008656:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	69b9      	ldr	r1, [r7, #24]
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	e841 2300 	strex	r3, r2, [r1]
 8008660:	617b      	str	r3, [r7, #20]
   return(result);
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e3      	bne.n	8008630 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f83e 	bl	80086f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008674:	e023      	b.n	80086be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867e:	2b00      	cmp	r3, #0
 8008680:	d009      	beq.n	8008696 <HAL_UART_IRQHandler+0x4ea>
 8008682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f95d 	bl	800894e <UART_Transmit_IT>
    return;
 8008694:	e014      	b.n	80086c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00e      	beq.n	80086c0 <HAL_UART_IRQHandler+0x514>
 80086a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d008      	beq.n	80086c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f99d 	bl	80089ee <UART_EndTransmit_IT>
    return;
 80086b4:	e004      	b.n	80086c0 <HAL_UART_IRQHandler+0x514>
    return;
 80086b6:	bf00      	nop
 80086b8:	e002      	b.n	80086c0 <HAL_UART_IRQHandler+0x514>
      return;
 80086ba:	bf00      	nop
 80086bc:	e000      	b.n	80086c0 <HAL_UART_IRQHandler+0x514>
      return;
 80086be:	bf00      	nop
  }
}
 80086c0:	37e8      	adds	r7, #232	; 0xe8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop

080086c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b090      	sub	sp, #64	; 0x40
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	4613      	mov	r3, r2
 8008716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008718:	e050      	b.n	80087bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800871a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d04c      	beq.n	80087bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008724:	2b00      	cmp	r3, #0
 8008726:	d007      	beq.n	8008738 <UART_WaitOnFlagUntilTimeout+0x30>
 8008728:	f7fa f85a 	bl	80027e0 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008734:	429a      	cmp	r2, r3
 8008736:	d241      	bcs.n	80087bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	330c      	adds	r3, #12
 800873e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	e853 3f00 	ldrex	r3, [r3]
 8008746:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800874e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	330c      	adds	r3, #12
 8008756:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008758:	637a      	str	r2, [r7, #52]	; 0x34
 800875a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800875e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e5      	bne.n	8008738 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3314      	adds	r3, #20
 8008772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	613b      	str	r3, [r7, #16]
   return(result);
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f023 0301 	bic.w	r3, r3, #1
 8008782:	63bb      	str	r3, [r7, #56]	; 0x38
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3314      	adds	r3, #20
 800878a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800878c:	623a      	str	r2, [r7, #32]
 800878e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	69f9      	ldr	r1, [r7, #28]
 8008792:	6a3a      	ldr	r2, [r7, #32]
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	61bb      	str	r3, [r7, #24]
   return(result);
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e5      	bne.n	800876c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e00f      	b.n	80087dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	4013      	ands	r3, r2
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	bf0c      	ite	eq
 80087cc:	2301      	moveq	r3, #1
 80087ce:	2300      	movne	r3, #0
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	461a      	mov	r2, r3
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d09f      	beq.n	800871a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3740      	adds	r7, #64	; 0x40
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	4613      	mov	r3, r2
 80087f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	88fa      	ldrh	r2, [r7, #6]
 80087fc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	88fa      	ldrh	r2, [r7, #6]
 8008802:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2222      	movs	r2, #34	; 0x22
 800880e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d007      	beq.n	8008832 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008830:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	695a      	ldr	r2, [r3, #20]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 0201 	orr.w	r2, r2, #1
 8008840:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0220 	orr.w	r2, r2, #32
 8008850:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008860:	b480      	push	{r7}
 8008862:	b095      	sub	sp, #84	; 0x54
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800887e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	330c      	adds	r3, #12
 8008886:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008888:	643a      	str	r2, [r7, #64]	; 0x40
 800888a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800888e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e5      	bne.n	8008868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3314      	adds	r3, #20
 80088a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	e853 3f00 	ldrex	r3, [r3]
 80088aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f023 0301 	bic.w	r3, r3, #1
 80088b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3314      	adds	r3, #20
 80088ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088c4:	e841 2300 	strex	r3, r2, [r1]
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1e5      	bne.n	800889c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d119      	bne.n	800890c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	330c      	adds	r3, #12
 80088de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f023 0310 	bic.w	r3, r3, #16
 80088ee:	647b      	str	r3, [r7, #68]	; 0x44
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	330c      	adds	r3, #12
 80088f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088f8:	61ba      	str	r2, [r7, #24]
 80088fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	6979      	ldr	r1, [r7, #20]
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	613b      	str	r3, [r7, #16]
   return(result);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e5      	bne.n	80088d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2220      	movs	r2, #32
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	631a      	str	r2, [r3, #48]	; 0x30
}
 800891a:	bf00      	nop
 800891c:	3754      	adds	r7, #84	; 0x54
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f7ff fecb 	bl	80086dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800894e:	b480      	push	{r7}
 8008950:	b085      	sub	sp, #20
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b21      	cmp	r3, #33	; 0x21
 8008960:	d13e      	bne.n	80089e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800896a:	d114      	bne.n	8008996 <UART_Transmit_IT+0x48>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d110      	bne.n	8008996 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008988:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	1c9a      	adds	r2, r3, #2
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	621a      	str	r2, [r3, #32]
 8008994:	e008      	b.n	80089a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	1c59      	adds	r1, r3, #1
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	6211      	str	r1, [r2, #32]
 80089a0:	781a      	ldrb	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	3b01      	subs	r3, #1
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	4619      	mov	r1, r3
 80089b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10f      	bne.n	80089dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68da      	ldr	r2, [r3, #12]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	e000      	b.n	80089e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089e0:	2302      	movs	r3, #2
  }
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68da      	ldr	r2, [r3, #12]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff fe5a 	bl	80086c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b08c      	sub	sp, #48	; 0x30
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b22      	cmp	r3, #34	; 0x22
 8008a30:	f040 80ab 	bne.w	8008b8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3c:	d117      	bne.n	8008a6e <UART_Receive_IT+0x50>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d113      	bne.n	8008a6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	1c9a      	adds	r2, r3, #2
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8008a6c:	e026      	b.n	8008abc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a80:	d007      	beq.n	8008a92 <UART_Receive_IT+0x74>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10a      	bne.n	8008aa0 <UART_Receive_IT+0x82>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	e008      	b.n	8008ab2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d15a      	bne.n	8008b86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68da      	ldr	r2, [r3, #12]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f022 0220 	bic.w	r2, r2, #32
 8008ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	695a      	ldr	r2, [r3, #20]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0201 	bic.w	r2, r2, #1
 8008afe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2220      	movs	r2, #32
 8008b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d135      	bne.n	8008b7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	330c      	adds	r3, #12
 8008b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	e853 3f00 	ldrex	r3, [r3]
 8008b24:	613b      	str	r3, [r7, #16]
   return(result);
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f023 0310 	bic.w	r3, r3, #16
 8008b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	330c      	adds	r3, #12
 8008b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b36:	623a      	str	r2, [r7, #32]
 8008b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3a:	69f9      	ldr	r1, [r7, #28]
 8008b3c:	6a3a      	ldr	r2, [r7, #32]
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e5      	bne.n	8008b16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0310 	and.w	r3, r3, #16
 8008b54:	2b10      	cmp	r3, #16
 8008b56:	d10a      	bne.n	8008b6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff fdbb 	bl	80086f0 <HAL_UARTEx_RxEventCallback>
 8008b7a:	e002      	b.n	8008b82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7f8 ff35 	bl	80019ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e002      	b.n	8008b8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	e000      	b.n	8008b8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b8a:	2302      	movs	r3, #2
  }
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3730      	adds	r7, #48	; 0x30
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b98:	b0c0      	sub	sp, #256	; 0x100
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb0:	68d9      	ldr	r1, [r3, #12]
 8008bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	ea40 0301 	orr.w	r3, r0, r1
 8008bbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc2:	689a      	ldr	r2, [r3, #8]
 8008bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	431a      	orrs	r2, r3
 8008bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bec:	f021 010c 	bic.w	r1, r1, #12
 8008bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008bfa:	430b      	orrs	r3, r1
 8008bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0e:	6999      	ldr	r1, [r3, #24]
 8008c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	ea40 0301 	orr.w	r3, r0, r1
 8008c1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	4b8f      	ldr	r3, [pc, #572]	; (8008e60 <UART_SetConfig+0x2cc>)
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d005      	beq.n	8008c34 <UART_SetConfig+0xa0>
 8008c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	4b8d      	ldr	r3, [pc, #564]	; (8008e64 <UART_SetConfig+0x2d0>)
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d104      	bne.n	8008c3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c34:	f7fe ff62 	bl	8007afc <HAL_RCC_GetPCLK2Freq>
 8008c38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c3c:	e003      	b.n	8008c46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c3e:	f7fe ff49 	bl	8007ad4 <HAL_RCC_GetPCLK1Freq>
 8008c42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c50:	f040 810c 	bne.w	8008e6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c66:	4622      	mov	r2, r4
 8008c68:	462b      	mov	r3, r5
 8008c6a:	1891      	adds	r1, r2, r2
 8008c6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c6e:	415b      	adcs	r3, r3
 8008c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c76:	4621      	mov	r1, r4
 8008c78:	eb12 0801 	adds.w	r8, r2, r1
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	eb43 0901 	adc.w	r9, r3, r1
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	f04f 0300 	mov.w	r3, #0
 8008c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c96:	4690      	mov	r8, r2
 8008c98:	4699      	mov	r9, r3
 8008c9a:	4623      	mov	r3, r4
 8008c9c:	eb18 0303 	adds.w	r3, r8, r3
 8008ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ca4:	462b      	mov	r3, r5
 8008ca6:	eb49 0303 	adc.w	r3, r9, r3
 8008caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	18db      	adds	r3, r3, r3
 8008cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8008cc8:	4613      	mov	r3, r2
 8008cca:	eb42 0303 	adc.w	r3, r2, r3
 8008cce:	657b      	str	r3, [r7, #84]	; 0x54
 8008cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008cd8:	f7f7 fada 	bl	8000290 <__aeabi_uldivmod>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4b61      	ldr	r3, [pc, #388]	; (8008e68 <UART_SetConfig+0x2d4>)
 8008ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ce6:	095b      	lsrs	r3, r3, #5
 8008ce8:	011c      	lsls	r4, r3, #4
 8008cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008cf4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008cf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	464b      	mov	r3, r9
 8008d00:	1891      	adds	r1, r2, r2
 8008d02:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d04:	415b      	adcs	r3, r3
 8008d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d0c:	4641      	mov	r1, r8
 8008d0e:	eb12 0a01 	adds.w	sl, r2, r1
 8008d12:	4649      	mov	r1, r9
 8008d14:	eb43 0b01 	adc.w	fp, r3, r1
 8008d18:	f04f 0200 	mov.w	r2, #0
 8008d1c:	f04f 0300 	mov.w	r3, #0
 8008d20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d2c:	4692      	mov	sl, r2
 8008d2e:	469b      	mov	fp, r3
 8008d30:	4643      	mov	r3, r8
 8008d32:	eb1a 0303 	adds.w	r3, sl, r3
 8008d36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8008d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	18db      	adds	r3, r3, r3
 8008d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d5e:	4613      	mov	r3, r2
 8008d60:	eb42 0303 	adc.w	r3, r2, r3
 8008d64:	647b      	str	r3, [r7, #68]	; 0x44
 8008d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d6e:	f7f7 fa8f 	bl	8000290 <__aeabi_uldivmod>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4611      	mov	r1, r2
 8008d78:	4b3b      	ldr	r3, [pc, #236]	; (8008e68 <UART_SetConfig+0x2d4>)
 8008d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8008d7e:	095b      	lsrs	r3, r3, #5
 8008d80:	2264      	movs	r2, #100	; 0x64
 8008d82:	fb02 f303 	mul.w	r3, r2, r3
 8008d86:	1acb      	subs	r3, r1, r3
 8008d88:	00db      	lsls	r3, r3, #3
 8008d8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d8e:	4b36      	ldr	r3, [pc, #216]	; (8008e68 <UART_SetConfig+0x2d4>)
 8008d90:	fba3 2302 	umull	r2, r3, r3, r2
 8008d94:	095b      	lsrs	r3, r3, #5
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d9c:	441c      	add	r4, r3
 8008d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008da8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008dac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008db0:	4642      	mov	r2, r8
 8008db2:	464b      	mov	r3, r9
 8008db4:	1891      	adds	r1, r2, r2
 8008db6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008db8:	415b      	adcs	r3, r3
 8008dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	1851      	adds	r1, r2, r1
 8008dc4:	6339      	str	r1, [r7, #48]	; 0x30
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	414b      	adcs	r3, r1
 8008dca:	637b      	str	r3, [r7, #52]	; 0x34
 8008dcc:	f04f 0200 	mov.w	r2, #0
 8008dd0:	f04f 0300 	mov.w	r3, #0
 8008dd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008dd8:	4659      	mov	r1, fp
 8008dda:	00cb      	lsls	r3, r1, #3
 8008ddc:	4651      	mov	r1, sl
 8008dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008de2:	4651      	mov	r1, sl
 8008de4:	00ca      	lsls	r2, r1, #3
 8008de6:	4610      	mov	r0, r2
 8008de8:	4619      	mov	r1, r3
 8008dea:	4603      	mov	r3, r0
 8008dec:	4642      	mov	r2, r8
 8008dee:	189b      	adds	r3, r3, r2
 8008df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008df4:	464b      	mov	r3, r9
 8008df6:	460a      	mov	r2, r1
 8008df8:	eb42 0303 	adc.w	r3, r2, r3
 8008dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e14:	460b      	mov	r3, r1
 8008e16:	18db      	adds	r3, r3, r3
 8008e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	eb42 0303 	adc.w	r3, r2, r3
 8008e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e2a:	f7f7 fa31 	bl	8000290 <__aeabi_uldivmod>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <UART_SetConfig+0x2d4>)
 8008e34:	fba3 1302 	umull	r1, r3, r3, r2
 8008e38:	095b      	lsrs	r3, r3, #5
 8008e3a:	2164      	movs	r1, #100	; 0x64
 8008e3c:	fb01 f303 	mul.w	r3, r1, r3
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	3332      	adds	r3, #50	; 0x32
 8008e46:	4a08      	ldr	r2, [pc, #32]	; (8008e68 <UART_SetConfig+0x2d4>)
 8008e48:	fba2 2303 	umull	r2, r3, r2, r3
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	f003 0207 	and.w	r2, r3, #7
 8008e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4422      	add	r2, r4
 8008e5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e5c:	e106      	b.n	800906c <UART_SetConfig+0x4d8>
 8008e5e:	bf00      	nop
 8008e60:	40011000 	.word	0x40011000
 8008e64:	40011400 	.word	0x40011400
 8008e68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e7e:	4642      	mov	r2, r8
 8008e80:	464b      	mov	r3, r9
 8008e82:	1891      	adds	r1, r2, r2
 8008e84:	6239      	str	r1, [r7, #32]
 8008e86:	415b      	adcs	r3, r3
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
 8008e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e8e:	4641      	mov	r1, r8
 8008e90:	1854      	adds	r4, r2, r1
 8008e92:	4649      	mov	r1, r9
 8008e94:	eb43 0501 	adc.w	r5, r3, r1
 8008e98:	f04f 0200 	mov.w	r2, #0
 8008e9c:	f04f 0300 	mov.w	r3, #0
 8008ea0:	00eb      	lsls	r3, r5, #3
 8008ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ea6:	00e2      	lsls	r2, r4, #3
 8008ea8:	4614      	mov	r4, r2
 8008eaa:	461d      	mov	r5, r3
 8008eac:	4643      	mov	r3, r8
 8008eae:	18e3      	adds	r3, r4, r3
 8008eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008eb4:	464b      	mov	r3, r9
 8008eb6:	eb45 0303 	adc.w	r3, r5, r3
 8008eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008eca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ece:	f04f 0200 	mov.w	r2, #0
 8008ed2:	f04f 0300 	mov.w	r3, #0
 8008ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008eda:	4629      	mov	r1, r5
 8008edc:	008b      	lsls	r3, r1, #2
 8008ede:	4621      	mov	r1, r4
 8008ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	008a      	lsls	r2, r1, #2
 8008ee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008eec:	f7f7 f9d0 	bl	8000290 <__aeabi_uldivmod>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4b60      	ldr	r3, [pc, #384]	; (8009078 <UART_SetConfig+0x4e4>)
 8008ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8008efa:	095b      	lsrs	r3, r3, #5
 8008efc:	011c      	lsls	r4, r3, #4
 8008efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f10:	4642      	mov	r2, r8
 8008f12:	464b      	mov	r3, r9
 8008f14:	1891      	adds	r1, r2, r2
 8008f16:	61b9      	str	r1, [r7, #24]
 8008f18:	415b      	adcs	r3, r3
 8008f1a:	61fb      	str	r3, [r7, #28]
 8008f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f20:	4641      	mov	r1, r8
 8008f22:	1851      	adds	r1, r2, r1
 8008f24:	6139      	str	r1, [r7, #16]
 8008f26:	4649      	mov	r1, r9
 8008f28:	414b      	adcs	r3, r1
 8008f2a:	617b      	str	r3, [r7, #20]
 8008f2c:	f04f 0200 	mov.w	r2, #0
 8008f30:	f04f 0300 	mov.w	r3, #0
 8008f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f38:	4659      	mov	r1, fp
 8008f3a:	00cb      	lsls	r3, r1, #3
 8008f3c:	4651      	mov	r1, sl
 8008f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f42:	4651      	mov	r1, sl
 8008f44:	00ca      	lsls	r2, r1, #3
 8008f46:	4610      	mov	r0, r2
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	4642      	mov	r2, r8
 8008f4e:	189b      	adds	r3, r3, r2
 8008f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f54:	464b      	mov	r3, r9
 8008f56:	460a      	mov	r2, r1
 8008f58:	eb42 0303 	adc.w	r3, r2, r3
 8008f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	f04f 0300 	mov.w	r3, #0
 8008f74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f78:	4649      	mov	r1, r9
 8008f7a:	008b      	lsls	r3, r1, #2
 8008f7c:	4641      	mov	r1, r8
 8008f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f82:	4641      	mov	r1, r8
 8008f84:	008a      	lsls	r2, r1, #2
 8008f86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f8a:	f7f7 f981 	bl	8000290 <__aeabi_uldivmod>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4611      	mov	r1, r2
 8008f94:	4b38      	ldr	r3, [pc, #224]	; (8009078 <UART_SetConfig+0x4e4>)
 8008f96:	fba3 2301 	umull	r2, r3, r3, r1
 8008f9a:	095b      	lsrs	r3, r3, #5
 8008f9c:	2264      	movs	r2, #100	; 0x64
 8008f9e:	fb02 f303 	mul.w	r3, r2, r3
 8008fa2:	1acb      	subs	r3, r1, r3
 8008fa4:	011b      	lsls	r3, r3, #4
 8008fa6:	3332      	adds	r3, #50	; 0x32
 8008fa8:	4a33      	ldr	r2, [pc, #204]	; (8009078 <UART_SetConfig+0x4e4>)
 8008faa:	fba2 2303 	umull	r2, r3, r2, r3
 8008fae:	095b      	lsrs	r3, r3, #5
 8008fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fb4:	441c      	add	r4, r3
 8008fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fba:	2200      	movs	r2, #0
 8008fbc:	673b      	str	r3, [r7, #112]	; 0x70
 8008fbe:	677a      	str	r2, [r7, #116]	; 0x74
 8008fc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008fc4:	4642      	mov	r2, r8
 8008fc6:	464b      	mov	r3, r9
 8008fc8:	1891      	adds	r1, r2, r2
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	415b      	adcs	r3, r3
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fd4:	4641      	mov	r1, r8
 8008fd6:	1851      	adds	r1, r2, r1
 8008fd8:	6039      	str	r1, [r7, #0]
 8008fda:	4649      	mov	r1, r9
 8008fdc:	414b      	adcs	r3, r1
 8008fde:	607b      	str	r3, [r7, #4]
 8008fe0:	f04f 0200 	mov.w	r2, #0
 8008fe4:	f04f 0300 	mov.w	r3, #0
 8008fe8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008fec:	4659      	mov	r1, fp
 8008fee:	00cb      	lsls	r3, r1, #3
 8008ff0:	4651      	mov	r1, sl
 8008ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ff6:	4651      	mov	r1, sl
 8008ff8:	00ca      	lsls	r2, r1, #3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4603      	mov	r3, r0
 8009000:	4642      	mov	r2, r8
 8009002:	189b      	adds	r3, r3, r2
 8009004:	66bb      	str	r3, [r7, #104]	; 0x68
 8009006:	464b      	mov	r3, r9
 8009008:	460a      	mov	r2, r1
 800900a:	eb42 0303 	adc.w	r3, r2, r3
 800900e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	663b      	str	r3, [r7, #96]	; 0x60
 800901a:	667a      	str	r2, [r7, #100]	; 0x64
 800901c:	f04f 0200 	mov.w	r2, #0
 8009020:	f04f 0300 	mov.w	r3, #0
 8009024:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009028:	4649      	mov	r1, r9
 800902a:	008b      	lsls	r3, r1, #2
 800902c:	4641      	mov	r1, r8
 800902e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009032:	4641      	mov	r1, r8
 8009034:	008a      	lsls	r2, r1, #2
 8009036:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800903a:	f7f7 f929 	bl	8000290 <__aeabi_uldivmod>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <UART_SetConfig+0x4e4>)
 8009044:	fba3 1302 	umull	r1, r3, r3, r2
 8009048:	095b      	lsrs	r3, r3, #5
 800904a:	2164      	movs	r1, #100	; 0x64
 800904c:	fb01 f303 	mul.w	r3, r1, r3
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	3332      	adds	r3, #50	; 0x32
 8009056:	4a08      	ldr	r2, [pc, #32]	; (8009078 <UART_SetConfig+0x4e4>)
 8009058:	fba2 2303 	umull	r2, r3, r2, r3
 800905c:	095b      	lsrs	r3, r3, #5
 800905e:	f003 020f 	and.w	r2, r3, #15
 8009062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4422      	add	r2, r4
 800906a:	609a      	str	r2, [r3, #8]
}
 800906c:	bf00      	nop
 800906e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009072:	46bd      	mov	sp, r7
 8009074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009078:	51eb851f 	.word	0x51eb851f

0800907c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800907c:	b084      	sub	sp, #16
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	f107 001c 	add.w	r0, r7, #28
 800908a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	2b01      	cmp	r3, #1
 8009092:	d122      	bne.n	80090da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80090a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80090bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d105      	bne.n	80090ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f9c0 	bl	8009454 <USB_CoreReset>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]
 80090d8:	e01a      	b.n	8009110 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f9b4 	bl	8009454 <USB_CoreReset>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80090f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	639a      	str	r2, [r3, #56]	; 0x38
 8009102:	e005      	b.n	8009110 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009108:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	2b01      	cmp	r3, #1
 8009114:	d10b      	bne.n	800912e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f043 0206 	orr.w	r2, r3, #6
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f043 0220 	orr.w	r2, r3, #32
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800912e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800913a:	b004      	add	sp, #16
 800913c:	4770      	bx	lr

0800913e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f043 0201 	orr.w	r2, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f023 0201 	bic.w	r2, r3, #1
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800919e:	78fb      	ldrb	r3, [r7, #3]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d115      	bne.n	80091d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091b0:	2001      	movs	r0, #1
 80091b2:	f7f9 fb21 	bl	80027f8 <HAL_Delay>
      ms++;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3301      	adds	r3, #1
 80091ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f93a 	bl	8009436 <USB_GetMode>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d01e      	beq.n	8009206 <USB_SetCurrentMode+0x84>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b31      	cmp	r3, #49	; 0x31
 80091cc:	d9f0      	bls.n	80091b0 <USB_SetCurrentMode+0x2e>
 80091ce:	e01a      	b.n	8009206 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d115      	bne.n	8009202 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091e2:	2001      	movs	r0, #1
 80091e4:	f7f9 fb08 	bl	80027f8 <HAL_Delay>
      ms++;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3301      	adds	r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f921 	bl	8009436 <USB_GetMode>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d005      	beq.n	8009206 <USB_SetCurrentMode+0x84>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b31      	cmp	r3, #49	; 0x31
 80091fe:	d9f0      	bls.n	80091e2 <USB_SetCurrentMode+0x60>
 8009200:	e001      	b.n	8009206 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e005      	b.n	8009212 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b32      	cmp	r3, #50	; 0x32
 800920a:	d101      	bne.n	8009210 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e000      	b.n	8009212 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009226:	2300      	movs	r3, #0
 8009228:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3301      	adds	r3, #1
 800922e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4a13      	ldr	r2, [pc, #76]	; (8009280 <USB_FlushTxFifo+0x64>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d901      	bls.n	800923c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009238:	2303      	movs	r3, #3
 800923a:	e01b      	b.n	8009274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	daf2      	bge.n	800922a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	019b      	lsls	r3, r3, #6
 800924c:	f043 0220 	orr.w	r2, r3, #32
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	3301      	adds	r3, #1
 8009258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4a08      	ldr	r2, [pc, #32]	; (8009280 <USB_FlushTxFifo+0x64>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d901      	bls.n	8009266 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e006      	b.n	8009274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b20      	cmp	r3, #32
 8009270:	d0f0      	beq.n	8009254 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	00030d40 	.word	0x00030d40

08009284 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3301      	adds	r3, #1
 8009294:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4a11      	ldr	r2, [pc, #68]	; (80092e0 <USB_FlushRxFifo+0x5c>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d901      	bls.n	80092a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e018      	b.n	80092d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	daf2      	bge.n	8009290 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2210      	movs	r2, #16
 80092b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	3301      	adds	r3, #1
 80092b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	4a08      	ldr	r2, [pc, #32]	; (80092e0 <USB_FlushRxFifo+0x5c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d901      	bls.n	80092c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e006      	b.n	80092d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	f003 0310 	and.w	r3, r3, #16
 80092ce:	2b10      	cmp	r3, #16
 80092d0:	d0f0      	beq.n	80092b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	00030d40 	.word	0x00030d40

080092e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b089      	sub	sp, #36	; 0x24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	4611      	mov	r1, r2
 80092f0:	461a      	mov	r2, r3
 80092f2:	460b      	mov	r3, r1
 80092f4:	71fb      	strb	r3, [r7, #7]
 80092f6:	4613      	mov	r3, r2
 80092f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009302:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d123      	bne.n	8009352 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800930a:	88bb      	ldrh	r3, [r7, #4]
 800930c:	3303      	adds	r3, #3
 800930e:	089b      	lsrs	r3, r3, #2
 8009310:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009312:	2300      	movs	r3, #0
 8009314:	61bb      	str	r3, [r7, #24]
 8009316:	e018      	b.n	800934a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009318:	79fb      	ldrb	r3, [r7, #7]
 800931a:	031a      	lsls	r2, r3, #12
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	4413      	add	r3, r2
 8009320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009324:	461a      	mov	r2, r3
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	3301      	adds	r3, #1
 8009330:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	3301      	adds	r3, #1
 8009336:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	3301      	adds	r3, #1
 800933c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	3301      	adds	r3, #1
 8009342:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	3301      	adds	r3, #1
 8009348:	61bb      	str	r3, [r7, #24]
 800934a:	69ba      	ldr	r2, [r7, #24]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	429a      	cmp	r2, r3
 8009350:	d3e2      	bcc.n	8009318 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3724      	adds	r7, #36	; 0x24
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009360:	b480      	push	{r7}
 8009362:	b08b      	sub	sp, #44	; 0x2c
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	4613      	mov	r3, r2
 800936c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009376:	88fb      	ldrh	r3, [r7, #6]
 8009378:	089b      	lsrs	r3, r3, #2
 800937a:	b29b      	uxth	r3, r3
 800937c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	f003 0303 	and.w	r3, r3, #3
 8009384:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009386:	2300      	movs	r3, #0
 8009388:	623b      	str	r3, [r7, #32]
 800938a:	e014      	b.n	80093b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	601a      	str	r2, [r3, #0]
    pDest++;
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	3301      	adds	r3, #1
 800939c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	3301      	adds	r3, #1
 80093a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	3301      	adds	r3, #1
 80093a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	3301      	adds	r3, #1
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	3301      	adds	r3, #1
 80093b4:	623b      	str	r3, [r7, #32]
 80093b6:	6a3a      	ldr	r2, [r7, #32]
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d3e6      	bcc.n	800938c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093be:	8bfb      	ldrh	r3, [r7, #30]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d01e      	beq.n	8009402 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ce:	461a      	mov	r2, r3
 80093d0:	f107 0310 	add.w	r3, r7, #16
 80093d4:	6812      	ldr	r2, [r2, #0]
 80093d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	00db      	lsls	r3, r3, #3
 80093e0:	fa22 f303 	lsr.w	r3, r2, r3
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e8:	701a      	strb	r2, [r3, #0]
      i++;
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	3301      	adds	r3, #1
 80093ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	3301      	adds	r3, #1
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80093f6:	8bfb      	ldrh	r3, [r7, #30]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80093fc:	8bfb      	ldrh	r3, [r7, #30]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1ea      	bne.n	80093d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009404:	4618      	mov	r0, r3
 8009406:	372c      	adds	r7, #44	; 0x2c
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	4013      	ands	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009428:	68fb      	ldr	r3, [r7, #12]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	f003 0301 	and.w	r3, r3, #1
}
 8009446:	4618      	mov	r0, r3
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
	...

08009454 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800945c:	2300      	movs	r3, #0
 800945e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	3301      	adds	r3, #1
 8009464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	4a13      	ldr	r2, [pc, #76]	; (80094b8 <USB_CoreReset+0x64>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d901      	bls.n	8009472 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	e01b      	b.n	80094aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	daf2      	bge.n	8009460 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800947a:	2300      	movs	r3, #0
 800947c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	f043 0201 	orr.w	r2, r3, #1
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3301      	adds	r3, #1
 800948e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4a09      	ldr	r2, [pc, #36]	; (80094b8 <USB_CoreReset+0x64>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d901      	bls.n	800949c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e006      	b.n	80094aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d0f0      	beq.n	800948a <USB_CoreReset+0x36>

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	00030d40 	.word	0x00030d40

080094bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094bc:	b084      	sub	sp, #16
 80094be:	b580      	push	{r7, lr}
 80094c0:	b086      	sub	sp, #24
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094dc:	461a      	mov	r2, r3
 80094de:	2300      	movs	r3, #0
 80094e0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950e:	2b00      	cmp	r3, #0
 8009510:	d018      	beq.n	8009544 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009514:	2b01      	cmp	r3, #1
 8009516:	d10a      	bne.n	800952e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009526:	f043 0304 	orr.w	r3, r3, #4
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	e014      	b.n	8009558 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800953c:	f023 0304 	bic.w	r3, r3, #4
 8009540:	6013      	str	r3, [r2, #0]
 8009542:	e009      	b.n	8009558 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009552:	f023 0304 	bic.w	r3, r3, #4
 8009556:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009558:	2110      	movs	r1, #16
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff fe5e 	bl	800921c <USB_FlushTxFifo>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7ff fe8a 	bl	8009284 <USB_FlushRxFifo>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800957a:	2300      	movs	r3, #0
 800957c:	613b      	str	r3, [r7, #16]
 800957e:	e015      	b.n	80095ac <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4413      	add	r3, r2
 8009588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800958c:	461a      	mov	r2, r3
 800958e:	f04f 33ff 	mov.w	r3, #4294967295
 8009592:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	015a      	lsls	r2, r3, #5
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4413      	add	r3, r2
 800959c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a0:	461a      	mov	r2, r3
 80095a2:	2300      	movs	r3, #0
 80095a4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	3301      	adds	r3, #1
 80095aa:	613b      	str	r3, [r7, #16]
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d3e5      	bcc.n	8009580 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f04f 32ff 	mov.w	r2, #4294967295
 80095c0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00b      	beq.n	80095e6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095d4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a13      	ldr	r2, [pc, #76]	; (8009628 <USB_HostInit+0x16c>)
 80095da:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a13      	ldr	r2, [pc, #76]	; (800962c <USB_HostInit+0x170>)
 80095e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80095e4:	e009      	b.n	80095fa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2280      	movs	r2, #128	; 0x80
 80095ea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a10      	ldr	r2, [pc, #64]	; (8009630 <USB_HostInit+0x174>)
 80095f0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a0f      	ldr	r2, [pc, #60]	; (8009634 <USB_HostInit+0x178>)
 80095f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d105      	bne.n	800960c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	f043 0210 	orr.w	r2, r3, #16
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	699a      	ldr	r2, [r3, #24]
 8009610:	4b09      	ldr	r3, [pc, #36]	; (8009638 <USB_HostInit+0x17c>)
 8009612:	4313      	orrs	r3, r2
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009618:	7dfb      	ldrb	r3, [r7, #23]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009624:	b004      	add	sp, #16
 8009626:	4770      	bx	lr
 8009628:	01000200 	.word	0x01000200
 800962c:	00e00300 	.word	0x00e00300
 8009630:	00600080 	.word	0x00600080
 8009634:	004000e0 	.word	0x004000e0
 8009638:	a3200008 	.word	0xa3200008

0800963c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800965a:	f023 0303 	bic.w	r3, r3, #3
 800965e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	68f9      	ldr	r1, [r7, #12]
 8009670:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009674:	4313      	orrs	r3, r2
 8009676:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d107      	bne.n	800968e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009684:	461a      	mov	r2, r3
 8009686:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800968a:	6053      	str	r3, [r2, #4]
 800968c:	e009      	b.n	80096a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800968e:	78fb      	ldrb	r3, [r7, #3]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d106      	bne.n	80096a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800969a:	461a      	mov	r2, r3
 800969c:	f241 7370 	movw	r3, #6000	; 0x1770
 80096a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80096d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096de:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80096e0:	2064      	movs	r0, #100	; 0x64
 80096e2:	f7f9 f889 	bl	80027f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80096f4:	200a      	movs	r0, #10
 80096f6:	f7f9 f87f 	bl	80027f8 <HAL_Delay>

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009728:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d109      	bne.n	8009748 <USB_DriveVbus+0x44>
 8009734:	78fb      	ldrb	r3, [r7, #3]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d106      	bne.n	8009748 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009742:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009746:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800974e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009752:	d109      	bne.n	8009768 <USB_DriveVbus+0x64>
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009766:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009776:	b480      	push	{r7}
 8009778:	b085      	sub	sp, #20
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009782:	2300      	movs	r3, #0
 8009784:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	0c5b      	lsrs	r3, r3, #17
 8009794:	f003 0303 	and.w	r3, r3, #3
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	b29b      	uxth	r3, r3
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
	...

080097c8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	4608      	mov	r0, r1
 80097d2:	4611      	mov	r1, r2
 80097d4:	461a      	mov	r2, r3
 80097d6:	4603      	mov	r3, r0
 80097d8:	70fb      	strb	r3, [r7, #3]
 80097da:	460b      	mov	r3, r1
 80097dc:	70bb      	strb	r3, [r7, #2]
 80097de:	4613      	mov	r3, r2
 80097e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f6:	461a      	mov	r2, r3
 80097f8:	f04f 33ff 	mov.w	r3, #4294967295
 80097fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80097fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009802:	2b03      	cmp	r3, #3
 8009804:	d87e      	bhi.n	8009904 <USB_HC_Init+0x13c>
 8009806:	a201      	add	r2, pc, #4	; (adr r2, 800980c <USB_HC_Init+0x44>)
 8009808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980c:	0800981d 	.word	0x0800981d
 8009810:	080098c7 	.word	0x080098c7
 8009814:	0800981d 	.word	0x0800981d
 8009818:	08009889 	.word	0x08009889
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800981c:	78fb      	ldrb	r3, [r7, #3]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	4413      	add	r3, r2
 8009824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009828:	461a      	mov	r2, r3
 800982a:	f240 439d 	movw	r3, #1181	; 0x49d
 800982e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009830:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009834:	2b00      	cmp	r3, #0
 8009836:	da10      	bge.n	800985a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	4413      	add	r3, r2
 8009840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	78fa      	ldrb	r2, [r7, #3]
 8009848:	0151      	lsls	r1, r2, #5
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	440a      	add	r2, r1
 800984e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009856:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009858:	e057      	b.n	800990a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009862:	2b00      	cmp	r3, #0
 8009864:	d051      	beq.n	800990a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009866:	78fb      	ldrb	r3, [r7, #3]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	4413      	add	r3, r2
 800986e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	0151      	lsls	r1, r2, #5
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	440a      	add	r2, r1
 800987c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009880:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009884:	60d3      	str	r3, [r2, #12]
      break;
 8009886:	e040      	b.n	800990a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009888:	78fb      	ldrb	r3, [r7, #3]
 800988a:	015a      	lsls	r2, r3, #5
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	4413      	add	r3, r2
 8009890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009894:	461a      	mov	r2, r3
 8009896:	f240 639d 	movw	r3, #1693	; 0x69d
 800989a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800989c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da34      	bge.n	800990e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	78fa      	ldrb	r2, [r7, #3]
 80098b4:	0151      	lsls	r1, r2, #5
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	440a      	add	r2, r1
 80098ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098c2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80098c4:	e023      	b.n	800990e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80098c6:	78fb      	ldrb	r3, [r7, #3]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098d2:	461a      	mov	r2, r3
 80098d4:	f240 2325 	movw	r3, #549	; 0x225
 80098d8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80098da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da17      	bge.n	8009912 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80098e2:	78fb      	ldrb	r3, [r7, #3]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	0151      	lsls	r1, r2, #5
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	440a      	add	r2, r1
 80098f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098fc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009900:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009902:	e006      	b.n	8009912 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	77fb      	strb	r3, [r7, #31]
      break;
 8009908:	e004      	b.n	8009914 <USB_HC_Init+0x14c>
      break;
 800990a:	bf00      	nop
 800990c:	e002      	b.n	8009914 <USB_HC_Init+0x14c>
      break;
 800990e:	bf00      	nop
 8009910:	e000      	b.n	8009914 <USB_HC_Init+0x14c>
      break;
 8009912:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009914:	78fb      	ldrb	r3, [r7, #3]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	4413      	add	r3, r2
 800991c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	78fa      	ldrb	r2, [r7, #3]
 8009924:	0151      	lsls	r1, r2, #5
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	440a      	add	r2, r1
 800992a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800992e:	f043 0302 	orr.w	r3, r3, #2
 8009932:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800993a:	699a      	ldr	r2, [r3, #24]
 800993c:	78fb      	ldrb	r3, [r7, #3]
 800993e:	f003 030f 	and.w	r3, r3, #15
 8009942:	2101      	movs	r1, #1
 8009944:	fa01 f303 	lsl.w	r3, r1, r3
 8009948:	6939      	ldr	r1, [r7, #16]
 800994a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800994e:	4313      	orrs	r3, r2
 8009950:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800995e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009962:	2b00      	cmp	r3, #0
 8009964:	da03      	bge.n	800996e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800996a:	61bb      	str	r3, [r7, #24]
 800996c:	e001      	b.n	8009972 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7ff feff 	bl	8009776 <USB_GetHostSpeed>
 8009978:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800997a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800997e:	2b02      	cmp	r3, #2
 8009980:	d106      	bne.n	8009990 <USB_HC_Init+0x1c8>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b02      	cmp	r3, #2
 8009986:	d003      	beq.n	8009990 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	e001      	b.n	8009994 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009990:	2300      	movs	r3, #0
 8009992:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009994:	787b      	ldrb	r3, [r7, #1]
 8009996:	059b      	lsls	r3, r3, #22
 8009998:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800999c:	78bb      	ldrb	r3, [r7, #2]
 800999e:	02db      	lsls	r3, r3, #11
 80099a0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099a4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80099a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099aa:	049b      	lsls	r3, r3, #18
 80099ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80099b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80099b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80099b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099be:	78fb      	ldrb	r3, [r7, #3]
 80099c0:	0159      	lsls	r1, r3, #5
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	440b      	add	r3, r1
 80099c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ca:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099d0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80099d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d003      	beq.n	80099e2 <USB_HC_Init+0x21a>
 80099da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d10f      	bne.n	8009a02 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	78fa      	ldrb	r2, [r7, #3]
 80099f2:	0151      	lsls	r1, r2, #5
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	440a      	add	r2, r1
 80099f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a00:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009a02:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3720      	adds	r7, #32
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08c      	sub	sp, #48	; 0x30
 8009a10:	af02      	add	r7, sp, #8
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	4613      	mov	r3, r2
 8009a18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	785b      	ldrb	r3, [r3, #1]
 8009a22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a28:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d02d      	beq.n	8009a92 <USB_HC_StartXfer+0x86>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	791b      	ldrb	r3, [r3, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d129      	bne.n	8009a92 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d117      	bne.n	8009a74 <USB_HC_StartXfer+0x68>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	79db      	ldrb	r3, [r3, #7]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <USB_HC_StartXfer+0x48>
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	79db      	ldrb	r3, [r3, #7]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d10f      	bne.n	8009a74 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	6a3b      	ldr	r3, [r7, #32]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	69fa      	ldr	r2, [r7, #28]
 8009a64:	0151      	lsls	r1, r2, #5
 8009a66:	6a3a      	ldr	r2, [r7, #32]
 8009a68:	440a      	add	r2, r1
 8009a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a72:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009a74:	79fb      	ldrb	r3, [r7, #7]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10b      	bne.n	8009a92 <USB_HC_StartXfer+0x86>
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	795b      	ldrb	r3, [r3, #5]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d107      	bne.n	8009a92 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	785b      	ldrb	r3, [r3, #1]
 8009a86:	4619      	mov	r1, r3
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 fa0f 	bl	8009eac <USB_DoPing>
      return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	e0f8      	b.n	8009c84 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d018      	beq.n	8009acc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	8912      	ldrh	r2, [r2, #8]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	8912      	ldrh	r2, [r2, #8]
 8009aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009ab0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ab2:	8b7b      	ldrh	r3, [r7, #26]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d90b      	bls.n	8009ad0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009ab8:	8b7b      	ldrh	r3, [r7, #26]
 8009aba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009abc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	8912      	ldrh	r2, [r2, #8]
 8009ac2:	fb03 f202 	mul.w	r2, r3, r2
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	611a      	str	r2, [r3, #16]
 8009aca:	e001      	b.n	8009ad0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009acc:	2301      	movs	r3, #1
 8009ace:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	78db      	ldrb	r3, [r3, #3]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d007      	beq.n	8009ae8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009ad8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	8912      	ldrh	r2, [r2, #8]
 8009ade:	fb03 f202 	mul.w	r2, r3, r2
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	611a      	str	r2, [r3, #16]
 8009ae6:	e003      	b.n	8009af0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	695a      	ldr	r2, [r3, #20]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009af8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009afa:	04d9      	lsls	r1, r3, #19
 8009afc:	4b63      	ldr	r3, [pc, #396]	; (8009c8c <USB_HC_StartXfer+0x280>)
 8009afe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b00:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	7a9b      	ldrb	r3, [r3, #10]
 8009b06:	075b      	lsls	r3, r3, #29
 8009b08:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b0c:	69f9      	ldr	r1, [r7, #28]
 8009b0e:	0148      	lsls	r0, r1, #5
 8009b10:	6a39      	ldr	r1, [r7, #32]
 8009b12:	4401      	add	r1, r0
 8009b14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b18:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b1a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d009      	beq.n	8009b36 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	68d9      	ldr	r1, [r3, #12]
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b32:	460a      	mov	r2, r1
 8009b34:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	bf0c      	ite	eq
 8009b46:	2301      	moveq	r3, #1
 8009b48:	2300      	movne	r3, #0
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	015a      	lsls	r2, r3, #5
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	69fa      	ldr	r2, [r7, #28]
 8009b5e:	0151      	lsls	r1, r2, #5
 8009b60:	6a3a      	ldr	r2, [r7, #32]
 8009b62:	440a      	add	r2, r1
 8009b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b6c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	7e7b      	ldrb	r3, [r7, #25]
 8009b7e:	075b      	lsls	r3, r3, #29
 8009b80:	69f9      	ldr	r1, [r7, #28]
 8009b82:	0148      	lsls	r0, r1, #5
 8009b84:	6a39      	ldr	r1, [r7, #32]
 8009b86:	4401      	add	r1, r0
 8009b88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ba6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	78db      	ldrb	r3, [r3, #3]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d004      	beq.n	8009bba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb6:	613b      	str	r3, [r7, #16]
 8009bb8:	e003      	b.n	8009bc2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bc0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bc8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009bdc:	79fb      	ldrb	r3, [r7, #7]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	e04e      	b.n	8009c84 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	78db      	ldrb	r3, [r3, #3]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d149      	bne.n	8009c82 <USB_HC_StartXfer+0x276>
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d045      	beq.n	8009c82 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	79db      	ldrb	r3, [r3, #7]
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d830      	bhi.n	8009c60 <USB_HC_StartXfer+0x254>
 8009bfe:	a201      	add	r2, pc, #4	; (adr r2, 8009c04 <USB_HC_StartXfer+0x1f8>)
 8009c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c04:	08009c15 	.word	0x08009c15
 8009c08:	08009c39 	.word	0x08009c39
 8009c0c:	08009c15 	.word	0x08009c15
 8009c10:	08009c39 	.word	0x08009c39
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	3303      	adds	r3, #3
 8009c1a:	089b      	lsrs	r3, r3, #2
 8009c1c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009c1e:	8afa      	ldrh	r2, [r7, #22]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d91c      	bls.n	8009c64 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	f043 0220 	orr.w	r2, r3, #32
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c36:	e015      	b.n	8009c64 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	3303      	adds	r3, #3
 8009c3e:	089b      	lsrs	r3, r3, #2
 8009c40:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009c42:	8afa      	ldrh	r2, [r7, #22]
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d90a      	bls.n	8009c68 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c5e:	e003      	b.n	8009c68 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009c60:	bf00      	nop
 8009c62:	e002      	b.n	8009c6a <USB_HC_StartXfer+0x25e>
        break;
 8009c64:	bf00      	nop
 8009c66:	e000      	b.n	8009c6a <USB_HC_StartXfer+0x25e>
        break;
 8009c68:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	68d9      	ldr	r1, [r3, #12]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	785a      	ldrb	r2, [r3, #1]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	2000      	movs	r0, #0
 8009c7a:	9000      	str	r0, [sp, #0]
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f7ff fb31 	bl	80092e4 <USB_WritePacket>
  }

  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3728      	adds	r7, #40	; 0x28
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	1ff80000 	.word	0x1ff80000

08009c90 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	b29b      	uxth	r3, r3
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b089      	sub	sp, #36	; 0x24
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009cc2:	78fb      	ldrb	r3, [r7, #3]
 8009cc4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	0c9b      	lsrs	r3, r3, #18
 8009cda:	f003 0303 	and.w	r3, r3, #3
 8009cde:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	0fdb      	lsrs	r3, r3, #31
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b20      	cmp	r3, #32
 8009d00:	d104      	bne.n	8009d0c <USB_HC_Halt+0x5a>
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	e0c8      	b.n	8009e9e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d002      	beq.n	8009d18 <USB_HC_Halt+0x66>
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d163      	bne.n	8009de0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	69ba      	ldr	r2, [r7, #24]
 8009d28:	0151      	lsls	r1, r2, #5
 8009d2a:	69fa      	ldr	r2, [r7, #28]
 8009d2c:	440a      	add	r2, r1
 8009d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d36:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f003 0320 	and.w	r3, r3, #32
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f040 80ab 	bne.w	8009e9c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d133      	bne.n	8009dba <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	015a      	lsls	r2, r3, #5
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	4413      	add	r3, r2
 8009d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	0151      	lsls	r1, r2, #5
 8009d64:	69fa      	ldr	r2, [r7, #28]
 8009d66:	440a      	add	r2, r1
 8009d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d70:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	015a      	lsls	r2, r3, #5
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	69ba      	ldr	r2, [r7, #24]
 8009d82:	0151      	lsls	r1, r2, #5
 8009d84:	69fa      	ldr	r2, [r7, #28]
 8009d86:	440a      	add	r2, r1
 8009d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d90:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3301      	adds	r3, #1
 8009d96:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d9e:	d81d      	bhi.n	8009ddc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009db6:	d0ec      	beq.n	8009d92 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009db8:	e070      	b.n	8009e9c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	015a      	lsls	r2, r3, #5
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	0151      	lsls	r1, r2, #5
 8009dcc:	69fa      	ldr	r2, [r7, #28]
 8009dce:	440a      	add	r2, r1
 8009dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dd8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009dda:	e05f      	b.n	8009e9c <USB_HC_Halt+0x1ea>
            break;
 8009ddc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009dde:	e05d      	b.n	8009e9c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	015a      	lsls	r2, r3, #5
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	4413      	add	r3, r2
 8009de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	69ba      	ldr	r2, [r7, #24]
 8009df0:	0151      	lsls	r1, r2, #5
 8009df2:	69fa      	ldr	r2, [r7, #28]
 8009df4:	440a      	add	r2, r1
 8009df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dfe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d133      	bne.n	8009e78 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69ba      	ldr	r2, [r7, #24]
 8009e20:	0151      	lsls	r1, r2, #5
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	440a      	add	r2, r1
 8009e26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	0151      	lsls	r1, r2, #5
 8009e42:	69fa      	ldr	r2, [r7, #28]
 8009e44:	440a      	add	r2, r1
 8009e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e4e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	3301      	adds	r3, #1
 8009e54:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e5c:	d81d      	bhi.n	8009e9a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e74:	d0ec      	beq.n	8009e50 <USB_HC_Halt+0x19e>
 8009e76:	e011      	b.n	8009e9c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	015a      	lsls	r2, r3, #5
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	69ba      	ldr	r2, [r7, #24]
 8009e88:	0151      	lsls	r1, r2, #5
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	440a      	add	r2, r1
 8009e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	e000      	b.n	8009e9c <USB_HC_Halt+0x1ea>
          break;
 8009e9a:	bf00      	nop
    }
  }

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3724      	adds	r7, #36	; 0x24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
	...

08009eac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009ebc:	78fb      	ldrb	r3, [r7, #3]
 8009ebe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	04da      	lsls	r2, r3, #19
 8009ec8:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <USB_DoPing+0x74>)
 8009eca:	4013      	ands	r3, r2
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	0151      	lsls	r1, r2, #5
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	440a      	add	r2, r1
 8009ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ed8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009edc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ef4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009efc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	1ff80000 	.word	0x1ff80000

08009f24 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009f34:	2300      	movs	r3, #0
 8009f36:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7ff f911 	bl	8009160 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f3e:	2110      	movs	r1, #16
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7ff f96b 	bl	800921c <USB_FlushTxFifo>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7ff f997 	bl	8009284 <USB_FlushRxFifo>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009f60:	2300      	movs	r3, #0
 8009f62:	61bb      	str	r3, [r7, #24]
 8009f64:	e01f      	b.n	8009fa6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	015a      	lsls	r2, r3, #5
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f84:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f8c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	61bb      	str	r3, [r7, #24]
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	2b0f      	cmp	r3, #15
 8009faa:	d9dc      	bls.n	8009f66 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009fac:	2300      	movs	r3, #0
 8009fae:	61bb      	str	r3, [r7, #24]
 8009fb0:	e034      	b.n	800a01c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fc8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fd8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	015a      	lsls	r2, r3, #5
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ff8:	d80c      	bhi.n	800a014 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	4413      	add	r3, r2
 800a002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a00c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a010:	d0ec      	beq.n	8009fec <USB_StopHost+0xc8>
 800a012:	e000      	b.n	800a016 <USB_StopHost+0xf2>
        break;
 800a014:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	3301      	adds	r3, #1
 800a01a:	61bb      	str	r3, [r7, #24]
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	2b0f      	cmp	r3, #15
 800a020:	d9c7      	bls.n	8009fb2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a028:	461a      	mov	r2, r3
 800a02a:	f04f 33ff 	mov.w	r3, #4294967295
 800a02e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f04f 32ff 	mov.w	r2, #4294967295
 800a036:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7ff f880 	bl	800913e <USB_EnableGlobalInt>

  return ret;
 800a03e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3720      	adds	r7, #32
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a04c:	4904      	ldr	r1, [pc, #16]	; (800a060 <MX_FATFS_Init+0x18>)
 800a04e:	4805      	ldr	r0, [pc, #20]	; (800a064 <MX_FATFS_Init+0x1c>)
 800a050:	f006 fb36 	bl	80106c0 <FATFS_LinkDriver>
 800a054:	4603      	mov	r3, r0
 800a056:	461a      	mov	r2, r3
 800a058:	4b03      	ldr	r3, [pc, #12]	; (800a068 <MX_FATFS_Init+0x20>)
 800a05a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a05c:	bf00      	nop
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20001978 	.word	0x20001978
 800a064:	08011ad0 	.word	0x08011ad0
 800a068:	20001974 	.word	0x20001974

0800a06c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a070:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a072:	4618      	mov	r0, r3
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4808      	ldr	r0, [pc, #32]	; (800a0c8 <USBH_status+0x34>)
 800a0a8:	f000 fe32 	bl	800ad10 <USBH_MSC_UnitIsReady>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d002      	beq.n	800a0b8 <USBH_status+0x24>
  {
    res = RES_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]
 800a0b6:	e001      	b.n	800a0bc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20001de4 	.word	0x20001de4

0800a0cc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b094      	sub	sp, #80	; 0x50
 800a0d0:	af02      	add	r7, sp, #8
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a0e2:	7bf9      	ldrb	r1, [r7, #15]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	4813      	ldr	r0, [pc, #76]	; (800a13c <USBH_read+0x70>)
 800a0ee:	f000 fe59 	bl	800ada4 <USBH_MSC_Read>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d103      	bne.n	800a100 <USBH_read+0x34>
  {
    res = RES_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a0fe:	e017      	b.n	800a130 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a100:	f107 0210 	add.w	r2, r7, #16
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	4619      	mov	r1, r3
 800a108:	480c      	ldr	r0, [pc, #48]	; (800a13c <USBH_read+0x70>)
 800a10a:	f000 fe27 	bl	800ad5c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a10e:	7f7b      	ldrb	r3, [r7, #29]
 800a110:	2b3a      	cmp	r3, #58	; 0x3a
 800a112:	d005      	beq.n	800a120 <USBH_read+0x54>
 800a114:	2b3a      	cmp	r3, #58	; 0x3a
 800a116:	dc07      	bgt.n	800a128 <USBH_read+0x5c>
 800a118:	2b04      	cmp	r3, #4
 800a11a:	d001      	beq.n	800a120 <USBH_read+0x54>
 800a11c:	2b28      	cmp	r3, #40	; 0x28
 800a11e:	d103      	bne.n	800a128 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a120:	2303      	movs	r3, #3
 800a122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a126:	e003      	b.n	800a130 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a12e:	bf00      	nop
    }
  }

  return res;
 800a130:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a134:	4618      	mov	r0, r3
 800a136:	3748      	adds	r7, #72	; 0x48
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	20001de4 	.word	0x20001de4

0800a140 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b094      	sub	sp, #80	; 0x50
 800a144:	af02      	add	r7, sp, #8
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	607a      	str	r2, [r7, #4]
 800a14a:	603b      	str	r3, [r7, #0]
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a156:	7bf9      	ldrb	r1, [r7, #15]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	4817      	ldr	r0, [pc, #92]	; (800a1c0 <USBH_write+0x80>)
 800a162:	f000 fe88 	bl	800ae76 <USBH_MSC_Write>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d103      	bne.n	800a174 <USBH_write+0x34>
  {
    res = RES_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a172:	e01f      	b.n	800a1b4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a174:	f107 0210 	add.w	r2, r7, #16
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	4619      	mov	r1, r3
 800a17c:	4810      	ldr	r0, [pc, #64]	; (800a1c0 <USBH_write+0x80>)
 800a17e:	f000 fded 	bl	800ad5c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a182:	7f7b      	ldrb	r3, [r7, #29]
 800a184:	2b3a      	cmp	r3, #58	; 0x3a
 800a186:	d00d      	beq.n	800a1a4 <USBH_write+0x64>
 800a188:	2b3a      	cmp	r3, #58	; 0x3a
 800a18a:	dc0f      	bgt.n	800a1ac <USBH_write+0x6c>
 800a18c:	2b28      	cmp	r3, #40	; 0x28
 800a18e:	d009      	beq.n	800a1a4 <USBH_write+0x64>
 800a190:	2b28      	cmp	r3, #40	; 0x28
 800a192:	dc0b      	bgt.n	800a1ac <USBH_write+0x6c>
 800a194:	2b04      	cmp	r3, #4
 800a196:	d005      	beq.n	800a1a4 <USBH_write+0x64>
 800a198:	2b27      	cmp	r3, #39	; 0x27
 800a19a:	d107      	bne.n	800a1ac <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a19c:	2302      	movs	r3, #2
 800a19e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a1a2:	e007      	b.n	800a1b4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a1aa:	e003      	b.n	800a1b4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a1b2:	bf00      	nop
    }
  }

  return res;
 800a1b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3748      	adds	r7, #72	; 0x48
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	20001de4 	.word	0x20001de4

0800a1c4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b090      	sub	sp, #64	; 0x40
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	603a      	str	r2, [r7, #0]
 800a1ce:	71fb      	strb	r3, [r7, #7]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a1da:	79bb      	ldrb	r3, [r7, #6]
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d852      	bhi.n	800a286 <USBH_ioctl+0xc2>
 800a1e0:	a201      	add	r2, pc, #4	; (adr r2, 800a1e8 <USBH_ioctl+0x24>)
 800a1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e6:	bf00      	nop
 800a1e8:	0800a1f9 	.word	0x0800a1f9
 800a1ec:	0800a201 	.word	0x0800a201
 800a1f0:	0800a22b 	.word	0x0800a22b
 800a1f4:	0800a257 	.word	0x0800a257
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a1fe:	e045      	b.n	800a28c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a200:	f107 0208 	add.w	r2, r7, #8
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	4619      	mov	r1, r3
 800a208:	4823      	ldr	r0, [pc, #140]	; (800a298 <USBH_ioctl+0xd4>)
 800a20a:	f000 fda7 	bl	800ad5c <USBH_MSC_GetLUNInfo>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d106      	bne.n	800a222 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a220:	e034      	b.n	800a28c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a228:	e030      	b.n	800a28c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a22a:	f107 0208 	add.w	r2, r7, #8
 800a22e:	79fb      	ldrb	r3, [r7, #7]
 800a230:	4619      	mov	r1, r3
 800a232:	4819      	ldr	r0, [pc, #100]	; (800a298 <USBH_ioctl+0xd4>)
 800a234:	f000 fd92 	bl	800ad5c <USBH_MSC_GetLUNInfo>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d107      	bne.n	800a24e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a23e:	8a3b      	ldrh	r3, [r7, #16]
 800a240:	461a      	mov	r2, r3
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a24c:	e01e      	b.n	800a28c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a254:	e01a      	b.n	800a28c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a256:	f107 0208 	add.w	r2, r7, #8
 800a25a:	79fb      	ldrb	r3, [r7, #7]
 800a25c:	4619      	mov	r1, r3
 800a25e:	480e      	ldr	r0, [pc, #56]	; (800a298 <USBH_ioctl+0xd4>)
 800a260:	f000 fd7c 	bl	800ad5c <USBH_MSC_GetLUNInfo>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d109      	bne.n	800a27e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a26a:	8a3b      	ldrh	r3, [r7, #16]
 800a26c:	0a5b      	lsrs	r3, r3, #9
 800a26e:	b29b      	uxth	r3, r3
 800a270:	461a      	mov	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a27c:	e006      	b.n	800a28c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a284:	e002      	b.n	800a28c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a286:	2304      	movs	r3, #4
 800a288:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a28c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a290:	4618      	mov	r0, r3
 800a292:	3740      	adds	r7, #64	; 0x40
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	20001de4 	.word	0x20001de4

0800a29c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a29c:	b590      	push	{r4, r7, lr}
 800a29e:	b089      	sub	sp, #36	; 0x24
 800a2a0:	af04      	add	r7, sp, #16
 800a2a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2aa:	7919      	ldrb	r1, [r3, #4]
 800a2ac:	2350      	movs	r3, #80	; 0x50
 800a2ae:	2206      	movs	r2, #6
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 fc6b 	bl	800bb8c <USBH_FindInterface>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a2ba:	7bfb      	ldrb	r3, [r7, #15]
 800a2bc:	2bff      	cmp	r3, #255	; 0xff
 800a2be:	d002      	beq.n	800a2c6 <USBH_MSC_InterfaceInit+0x2a>
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d901      	bls.n	800a2ca <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e106      	b.n	800a4d8 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f001 fc40 	bl	800bb54 <USBH_SelectInterface>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e0fa      	b.n	800a4d8 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a2e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a2ec:	f006 fdf6 	bl	8010edc <malloc>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2fa:	69db      	ldr	r3, [r3, #28]
 800a2fc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a304:	2302      	movs	r3, #2
 800a306:	e0e7      	b.n	800a4d8 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a30c:	2100      	movs	r1, #0
 800a30e:	68b8      	ldr	r0, [r7, #8]
 800a310:	f006 fec0 	bl	8011094 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	211a      	movs	r1, #26
 800a31a:	fb01 f303 	mul.w	r3, r1, r3
 800a31e:	4413      	add	r3, r2
 800a320:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	b25b      	sxtb	r3, r3
 800a328:	2b00      	cmp	r3, #0
 800a32a:	da16      	bge.n	800a35a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	211a      	movs	r1, #26
 800a332:	fb01 f303 	mul.w	r3, r1, r3
 800a336:	4413      	add	r3, r2
 800a338:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a33c:	781a      	ldrb	r2, [r3, #0]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	211a      	movs	r1, #26
 800a348:	fb01 f303 	mul.w	r3, r1, r3
 800a34c:	4413      	add	r3, r2
 800a34e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a352:	881a      	ldrh	r2, [r3, #0]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	815a      	strh	r2, [r3, #10]
 800a358:	e015      	b.n	800a386 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	211a      	movs	r1, #26
 800a360:	fb01 f303 	mul.w	r3, r1, r3
 800a364:	4413      	add	r3, r2
 800a366:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a36a:	781a      	ldrb	r2, [r3, #0]
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	211a      	movs	r1, #26
 800a376:	fb01 f303 	mul.w	r3, r1, r3
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a380:	881a      	ldrh	r2, [r3, #0]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a386:	7bfb      	ldrb	r3, [r7, #15]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	211a      	movs	r1, #26
 800a38c:	fb01 f303 	mul.w	r3, r1, r3
 800a390:	4413      	add	r3, r2
 800a392:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	b25b      	sxtb	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	da16      	bge.n	800a3cc <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	211a      	movs	r1, #26
 800a3a4:	fb01 f303 	mul.w	r3, r1, r3
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a3ae:	781a      	ldrb	r2, [r3, #0]
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	211a      	movs	r1, #26
 800a3ba:	fb01 f303 	mul.w	r3, r1, r3
 800a3be:	4413      	add	r3, r2
 800a3c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a3c4:	881a      	ldrh	r2, [r3, #0]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	815a      	strh	r2, [r3, #10]
 800a3ca:	e015      	b.n	800a3f8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	211a      	movs	r1, #26
 800a3d2:	fb01 f303 	mul.w	r3, r1, r3
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a3dc:	781a      	ldrb	r2, [r3, #0]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	211a      	movs	r1, #26
 800a3e8:	fb01 f303 	mul.w	r3, r1, r3
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a3f2:	881a      	ldrh	r2, [r3, #0]
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	2200      	movs	r2, #0
 800a402:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	2200      	movs	r2, #0
 800a408:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	799b      	ldrb	r3, [r3, #6]
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f002 fed8 	bl	800d1c6 <USBH_AllocPipe>
 800a416:	4603      	mov	r3, r0
 800a418:	461a      	mov	r2, r3
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	79db      	ldrb	r3, [r3, #7]
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f002 fece 	bl	800d1c6 <USBH_AllocPipe>
 800a42a:	4603      	mov	r3, r0
 800a42c:	461a      	mov	r2, r3
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fdc4 	bl	800afc0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	799b      	ldrb	r3, [r3, #6]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d01e      	beq.n	800a47e <USBH_MSC_InterfaceInit+0x1e2>
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	891b      	ldrh	r3, [r3, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d01a      	beq.n	800a47e <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	7959      	ldrb	r1, [r3, #5]
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	7998      	ldrb	r0, [r3, #6]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	8912      	ldrh	r2, [r2, #8]
 800a460:	9202      	str	r2, [sp, #8]
 800a462:	2202      	movs	r2, #2
 800a464:	9201      	str	r2, [sp, #4]
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	4623      	mov	r3, r4
 800a46a:	4602      	mov	r2, r0
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f002 fe7b 	bl	800d168 <USBH_OpenPipe>
 800a472:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	79db      	ldrb	r3, [r3, #7]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d02c      	beq.n	800a4d6 <USBH_MSC_InterfaceInit+0x23a>
 800a47c:	e001      	b.n	800a482 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800a47e:	2303      	movs	r3, #3
 800a480:	e02a      	b.n	800a4d8 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	895b      	ldrh	r3, [r3, #10]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d025      	beq.n	800a4d6 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	7919      	ldrb	r1, [r3, #4]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	79d8      	ldrb	r0, [r3, #7]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	8952      	ldrh	r2, [r2, #10]
 800a4a2:	9202      	str	r2, [sp, #8]
 800a4a4:	2202      	movs	r2, #2
 800a4a6:	9201      	str	r2, [sp, #4]
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	4623      	mov	r3, r4
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f002 fe5a 	bl	800d168 <USBH_OpenPipe>
 800a4b4:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	791b      	ldrb	r3, [r3, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f006 fc58 	bl	8010d74 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	795b      	ldrb	r3, [r3, #5]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f006 fc51 	bl	8010d74 <USBH_LL_SetToggle>

  return USBH_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	e000      	b.n	800a4d8 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800a4d6:	2303      	movs	r3, #3
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd90      	pop	{r4, r7, pc}

0800a4e0 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ee:	69db      	ldr	r3, [r3, #28]
 800a4f0:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	795b      	ldrb	r3, [r3, #5]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00e      	beq.n	800a518 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	795b      	ldrb	r3, [r3, #5]
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f002 fe50 	bl	800d1a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	795b      	ldrb	r3, [r3, #5]
 800a50a:	4619      	mov	r1, r3
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f002 fe7b 	bl	800d208 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	791b      	ldrb	r3, [r3, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00e      	beq.n	800a53e <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	791b      	ldrb	r3, [r3, #4]
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f002 fe3d 	bl	800d1a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	791b      	ldrb	r3, [r3, #4]
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f002 fe68 	bl	800d208 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00b      	beq.n	800a562 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	4618      	mov	r0, r3
 800a554:	f006 fcca 	bl	8010eec <free>
    phost->pActiveClass->pData = 0U;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a55e:	2200      	movs	r2, #0
 800a560:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a57e:	2301      	movs	r3, #1
 800a580:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	7b9b      	ldrb	r3, [r3, #14]
 800a586:	2b03      	cmp	r3, #3
 800a588:	d041      	beq.n	800a60e <USBH_MSC_ClassRequest+0xa2>
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	dc4b      	bgt.n	800a626 <USBH_MSC_ClassRequest+0xba>
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <USBH_MSC_ClassRequest+0x2a>
 800a592:	2b02      	cmp	r3, #2
 800a594:	d147      	bne.n	800a626 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fcf1 	bl	800af82 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d104      	bne.n	800a5b4 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d137      	bne.n	800a62a <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d804      	bhi.n	800a5cc <USBH_MSC_ClassRequest+0x60>
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	e000      	b.n	800a5ce <USBH_MSC_ClassRequest+0x62>
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	73bb      	strb	r3, [r7, #14]
 800a5d6:	e014      	b.n	800a602 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	2134      	movs	r1, #52	; 0x34
 800a5de:	fb01 f303 	mul.w	r3, r1, r3
 800a5e2:	4413      	add	r3, r2
 800a5e4:	3392      	adds	r3, #146	; 0x92
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a5ea:	7bbb      	ldrb	r3, [r7, #14]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	2134      	movs	r1, #52	; 0x34
 800a5f0:	fb01 f303 	mul.w	r3, r1, r3
 800a5f4:	4413      	add	r3, r2
 800a5f6:	33c1      	adds	r3, #193	; 0xc1
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a5fc:	7bbb      	ldrb	r3, [r7, #14]
 800a5fe:	3301      	adds	r3, #1
 800a600:	73bb      	strb	r3, [r7, #14]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	7bba      	ldrb	r2, [r7, #14]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d3e5      	bcc.n	800a5d8 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800a60c:	e00d      	b.n	800a62a <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a60e:	2100      	movs	r1, #0
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f002 f888 	bl	800c726 <USBH_ClrFeature>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d108      	bne.n	800a62e <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	7bda      	ldrb	r2, [r3, #15]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	739a      	strb	r2, [r3, #14]
      }
      break;
 800a624:	e003      	b.n	800a62e <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800a626:	bf00      	nop
 800a628:	e002      	b.n	800a630 <USBH_MSC_ClassRequest+0xc4>
      break;
 800a62a:	bf00      	nop
 800a62c:	e000      	b.n	800a630 <USBH_MSC_ClassRequest+0xc4>
      break;
 800a62e:	bf00      	nop
  }

  return status;
 800a630:	7bfb      	ldrb	r3, [r7, #15]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
	...

0800a63c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a64a:	69db      	ldr	r3, [r3, #28]
 800a64c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a64e:	2301      	movs	r3, #1
 800a650:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a652:	2301      	movs	r3, #1
 800a654:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a656:	2301      	movs	r3, #1
 800a658:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	7b1b      	ldrb	r3, [r3, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <USBH_MSC_Process+0x2e>
 800a662:	2b01      	cmp	r3, #1
 800a664:	f000 8271 	beq.w	800ab4a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a668:	e272      	b.n	800ab50 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	b29b      	uxth	r3, r3
 800a676:	429a      	cmp	r2, r3
 800a678:	f080 824f 	bcs.w	800ab1a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a682:	4619      	mov	r1, r3
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	2334      	movs	r3, #52	; 0x34
 800a688:	fb01 f303 	mul.w	r3, r1, r3
 800a68c:	4413      	add	r3, r2
 800a68e:	3391      	adds	r3, #145	; 0x91
 800a690:	2201      	movs	r2, #1
 800a692:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a69a:	4619      	mov	r1, r3
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	2334      	movs	r3, #52	; 0x34
 800a6a0:	fb01 f303 	mul.w	r3, r1, r3
 800a6a4:	4413      	add	r3, r2
 800a6a6:	3390      	adds	r3, #144	; 0x90
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	2b08      	cmp	r3, #8
 800a6ac:	f200 8243 	bhi.w	800ab36 <USBH_MSC_Process+0x4fa>
 800a6b0:	a201      	add	r2, pc, #4	; (adr r2, 800a6b8 <USBH_MSC_Process+0x7c>)
 800a6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b6:	bf00      	nop
 800a6b8:	0800a6dd 	.word	0x0800a6dd
 800a6bc:	0800ab37 	.word	0x0800ab37
 800a6c0:	0800a7a5 	.word	0x0800a7a5
 800a6c4:	0800a929 	.word	0x0800a929
 800a6c8:	0800a703 	.word	0x0800a703
 800a6cc:	0800a9f5 	.word	0x0800a9f5
 800a6d0:	0800ab37 	.word	0x0800ab37
 800a6d4:	0800ab37 	.word	0x0800ab37
 800a6d8:	0800ab09 	.word	0x0800ab09
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	2334      	movs	r3, #52	; 0x34
 800a6e8:	fb01 f303 	mul.w	r3, r1, r3
 800a6ec:	4413      	add	r3, r2
 800a6ee:	3390      	adds	r3, #144	; 0x90
 800a6f0:	2204      	movs	r2, #4
 800a6f2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a700:	e222      	b.n	800ab48 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a708:	b2d9      	uxtb	r1, r3
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a710:	461a      	mov	r2, r3
 800a712:	2334      	movs	r3, #52	; 0x34
 800a714:	fb02 f303 	mul.w	r3, r2, r3
 800a718:	3398      	adds	r3, #152	; 0x98
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	4413      	add	r3, r2
 800a71e:	3307      	adds	r3, #7
 800a720:	461a      	mov	r2, r3
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 ff6a 	bl	800b5fc <USBH_MSC_SCSI_Inquiry>
 800a728:	4603      	mov	r3, r0
 800a72a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10b      	bne.n	800a74a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a738:	4619      	mov	r1, r3
 800a73a:	693a      	ldr	r2, [r7, #16]
 800a73c:	2334      	movs	r3, #52	; 0x34
 800a73e:	fb01 f303 	mul.w	r3, r1, r3
 800a742:	4413      	add	r3, r2
 800a744:	3390      	adds	r3, #144	; 0x90
 800a746:	2202      	movs	r2, #2
 800a748:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d10c      	bne.n	800a76a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a756:	4619      	mov	r1, r3
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	2334      	movs	r3, #52	; 0x34
 800a75c:	fb01 f303 	mul.w	r3, r1, r3
 800a760:	4413      	add	r3, r2
 800a762:	3390      	adds	r3, #144	; 0x90
 800a764:	2205      	movs	r2, #5
 800a766:	701a      	strb	r2, [r3, #0]
            break;
 800a768:	e1e7      	b.n	800ab3a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a76a:	7bfb      	ldrb	r3, [r7, #15]
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	f040 81e4 	bne.w	800ab3a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a778:	4619      	mov	r1, r3
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	2334      	movs	r3, #52	; 0x34
 800a77e:	fb01 f303 	mul.w	r3, r1, r3
 800a782:	4413      	add	r3, r2
 800a784:	3390      	adds	r3, #144	; 0x90
 800a786:	2201      	movs	r2, #1
 800a788:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a790:	4619      	mov	r1, r3
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	2334      	movs	r3, #52	; 0x34
 800a796:	fb01 f303 	mul.w	r3, r1, r3
 800a79a:	4413      	add	r3, r2
 800a79c:	3391      	adds	r3, #145	; 0x91
 800a79e:	2202      	movs	r2, #2
 800a7a0:	701a      	strb	r2, [r3, #0]
            break;
 800a7a2:	e1ca      	b.n	800ab3a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fe66 	bl	800b480 <USBH_MSC_SCSI_TestUnitReady>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d149      	bne.n	800a852 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	2334      	movs	r3, #52	; 0x34
 800a7ca:	fb01 f303 	mul.w	r3, r1, r3
 800a7ce:	4413      	add	r3, r2
 800a7d0:	3392      	adds	r3, #146	; 0x92
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00c      	beq.n	800a7f2 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7de:	4619      	mov	r1, r3
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	2334      	movs	r3, #52	; 0x34
 800a7e4:	fb01 f303 	mul.w	r3, r1, r3
 800a7e8:	4413      	add	r3, r2
 800a7ea:	33c1      	adds	r3, #193	; 0xc1
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	701a      	strb	r2, [r3, #0]
 800a7f0:	e00b      	b.n	800a80a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	2334      	movs	r3, #52	; 0x34
 800a7fe:	fb01 f303 	mul.w	r3, r1, r3
 800a802:	4413      	add	r3, r2
 800a804:	33c1      	adds	r3, #193	; 0xc1
 800a806:	2200      	movs	r2, #0
 800a808:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a810:	4619      	mov	r1, r3
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	2334      	movs	r3, #52	; 0x34
 800a816:	fb01 f303 	mul.w	r3, r1, r3
 800a81a:	4413      	add	r3, r2
 800a81c:	3390      	adds	r3, #144	; 0x90
 800a81e:	2203      	movs	r2, #3
 800a820:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a828:	4619      	mov	r1, r3
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	2334      	movs	r3, #52	; 0x34
 800a82e:	fb01 f303 	mul.w	r3, r1, r3
 800a832:	4413      	add	r3, r2
 800a834:	3391      	adds	r3, #145	; 0x91
 800a836:	2200      	movs	r2, #0
 800a838:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a840:	4619      	mov	r1, r3
 800a842:	693a      	ldr	r2, [r7, #16]
 800a844:	2334      	movs	r3, #52	; 0x34
 800a846:	fb01 f303 	mul.w	r3, r1, r3
 800a84a:	4413      	add	r3, r2
 800a84c:	3392      	adds	r3, #146	; 0x92
 800a84e:	2200      	movs	r2, #0
 800a850:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	2b02      	cmp	r3, #2
 800a856:	d14a      	bne.n	800a8ee <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a85e:	4619      	mov	r1, r3
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	2334      	movs	r3, #52	; 0x34
 800a864:	fb01 f303 	mul.w	r3, r1, r3
 800a868:	4413      	add	r3, r2
 800a86a:	3392      	adds	r3, #146	; 0x92
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d00c      	beq.n	800a88c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a878:	4619      	mov	r1, r3
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	2334      	movs	r3, #52	; 0x34
 800a87e:	fb01 f303 	mul.w	r3, r1, r3
 800a882:	4413      	add	r3, r2
 800a884:	33c1      	adds	r3, #193	; 0xc1
 800a886:	2201      	movs	r2, #1
 800a888:	701a      	strb	r2, [r3, #0]
 800a88a:	e00b      	b.n	800a8a4 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a892:	4619      	mov	r1, r3
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	2334      	movs	r3, #52	; 0x34
 800a898:	fb01 f303 	mul.w	r3, r1, r3
 800a89c:	4413      	add	r3, r2
 800a89e:	33c1      	adds	r3, #193	; 0xc1
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	2334      	movs	r3, #52	; 0x34
 800a8b0:	fb01 f303 	mul.w	r3, r1, r3
 800a8b4:	4413      	add	r3, r2
 800a8b6:	3390      	adds	r3, #144	; 0x90
 800a8b8:	2205      	movs	r2, #5
 800a8ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	2334      	movs	r3, #52	; 0x34
 800a8c8:	fb01 f303 	mul.w	r3, r1, r3
 800a8cc:	4413      	add	r3, r2
 800a8ce:	3391      	adds	r3, #145	; 0x91
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8da:	4619      	mov	r1, r3
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	2334      	movs	r3, #52	; 0x34
 800a8e0:	fb01 f303 	mul.w	r3, r1, r3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	3392      	adds	r3, #146	; 0x92
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	701a      	strb	r2, [r3, #0]
            break;
 800a8ec:	e127      	b.n	800ab3e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	2b04      	cmp	r3, #4
 800a8f2:	f040 8124 	bne.w	800ab3e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	693a      	ldr	r2, [r7, #16]
 800a900:	2334      	movs	r3, #52	; 0x34
 800a902:	fb01 f303 	mul.w	r3, r1, r3
 800a906:	4413      	add	r3, r2
 800a908:	3390      	adds	r3, #144	; 0x90
 800a90a:	2201      	movs	r2, #1
 800a90c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a914:	4619      	mov	r1, r3
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	2334      	movs	r3, #52	; 0x34
 800a91a:	fb01 f303 	mul.w	r3, r1, r3
 800a91e:	4413      	add	r3, r2
 800a920:	3391      	adds	r3, #145	; 0x91
 800a922:	2202      	movs	r2, #2
 800a924:	701a      	strb	r2, [r3, #0]
            break;
 800a926:	e10a      	b.n	800ab3e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a92e:	b2d9      	uxtb	r1, r3
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a936:	461a      	mov	r2, r3
 800a938:	2334      	movs	r3, #52	; 0x34
 800a93a:	fb02 f303 	mul.w	r3, r2, r3
 800a93e:	3390      	adds	r3, #144	; 0x90
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	4413      	add	r3, r2
 800a944:	3304      	adds	r3, #4
 800a946:	461a      	mov	r2, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fddc 	bl	800b506 <USBH_MSC_SCSI_ReadCapacity>
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d120      	bne.n	800a99a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a95e:	4619      	mov	r1, r3
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	2334      	movs	r3, #52	; 0x34
 800a964:	fb01 f303 	mul.w	r3, r1, r3
 800a968:	4413      	add	r3, r2
 800a96a:	3390      	adds	r3, #144	; 0x90
 800a96c:	2201      	movs	r2, #1
 800a96e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a976:	4619      	mov	r1, r3
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	2334      	movs	r3, #52	; 0x34
 800a97c:	fb01 f303 	mul.w	r3, r1, r3
 800a980:	4413      	add	r3, r2
 800a982:	3391      	adds	r3, #145	; 0x91
 800a984:	2200      	movs	r2, #0
 800a986:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a98e:	3301      	adds	r3, #1
 800a990:	b29a      	uxth	r2, r3
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a998:	e0d3      	b.n	800ab42 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	d10c      	bne.n	800a9ba <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	693a      	ldr	r2, [r7, #16]
 800a9aa:	2334      	movs	r3, #52	; 0x34
 800a9ac:	fb01 f303 	mul.w	r3, r1, r3
 800a9b0:	4413      	add	r3, r2
 800a9b2:	3390      	adds	r3, #144	; 0x90
 800a9b4:	2205      	movs	r2, #5
 800a9b6:	701a      	strb	r2, [r3, #0]
            break;
 800a9b8:	e0c3      	b.n	800ab42 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	f040 80c0 	bne.w	800ab42 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	2334      	movs	r3, #52	; 0x34
 800a9ce:	fb01 f303 	mul.w	r3, r1, r3
 800a9d2:	4413      	add	r3, r2
 800a9d4:	3390      	adds	r3, #144	; 0x90
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	2334      	movs	r3, #52	; 0x34
 800a9e6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ea:	4413      	add	r3, r2
 800a9ec:	3391      	adds	r3, #145	; 0x91
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	701a      	strb	r2, [r3, #0]
            break;
 800a9f2:	e0a6      	b.n	800ab42 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9fa:	b2d9      	uxtb	r1, r3
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa02:	461a      	mov	r2, r3
 800aa04:	2334      	movs	r3, #52	; 0x34
 800aa06:	fb02 f303 	mul.w	r3, r2, r3
 800aa0a:	3398      	adds	r3, #152	; 0x98
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	4413      	add	r3, r2
 800aa10:	3304      	adds	r3, #4
 800aa12:	461a      	mov	r2, r3
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fe96 	bl	800b746 <USBH_MSC_SCSI_RequestSense>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d145      	bne.n	800aab0 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	2334      	movs	r3, #52	; 0x34
 800aa30:	fb01 f303 	mul.w	r3, r1, r3
 800aa34:	4413      	add	r3, r2
 800aa36:	339c      	adds	r3, #156	; 0x9c
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b06      	cmp	r3, #6
 800aa3c:	d00c      	beq.n	800aa58 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa44:	4619      	mov	r1, r3
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	2334      	movs	r3, #52	; 0x34
 800aa4a:	fb01 f303 	mul.w	r3, r1, r3
 800aa4e:	4413      	add	r3, r2
 800aa50:	339c      	adds	r3, #156	; 0x9c
 800aa52:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d117      	bne.n	800aa88 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	f242 720f 	movw	r2, #9999	; 0x270f
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d80c      	bhi.n	800aa88 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa74:	4619      	mov	r1, r3
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	2334      	movs	r3, #52	; 0x34
 800aa7a:	fb01 f303 	mul.w	r3, r1, r3
 800aa7e:	4413      	add	r3, r2
 800aa80:	3390      	adds	r3, #144	; 0x90
 800aa82:	2202      	movs	r2, #2
 800aa84:	701a      	strb	r2, [r3, #0]
                  break;
 800aa86:	e05f      	b.n	800ab48 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa8e:	4619      	mov	r1, r3
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	2334      	movs	r3, #52	; 0x34
 800aa94:	fb01 f303 	mul.w	r3, r1, r3
 800aa98:	4413      	add	r3, r2
 800aa9a:	3390      	adds	r3, #144	; 0x90
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d10c      	bne.n	800aad0 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aabc:	4619      	mov	r1, r3
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	2334      	movs	r3, #52	; 0x34
 800aac2:	fb01 f303 	mul.w	r3, r1, r3
 800aac6:	4413      	add	r3, r2
 800aac8:	3390      	adds	r3, #144	; 0x90
 800aaca:	2208      	movs	r2, #8
 800aacc:	701a      	strb	r2, [r3, #0]
            break;
 800aace:	e03a      	b.n	800ab46 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
 800aad2:	2b04      	cmp	r3, #4
 800aad4:	d137      	bne.n	800ab46 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aadc:	4619      	mov	r1, r3
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	2334      	movs	r3, #52	; 0x34
 800aae2:	fb01 f303 	mul.w	r3, r1, r3
 800aae6:	4413      	add	r3, r2
 800aae8:	3390      	adds	r3, #144	; 0x90
 800aaea:	2201      	movs	r2, #1
 800aaec:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	2334      	movs	r3, #52	; 0x34
 800aafa:	fb01 f303 	mul.w	r3, r1, r3
 800aafe:	4413      	add	r3, r2
 800ab00:	3391      	adds	r3, #145	; 0x91
 800ab02:	2202      	movs	r2, #2
 800ab04:	701a      	strb	r2, [r3, #0]
            break;
 800ab06:	e01e      	b.n	800ab46 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab0e:	3301      	adds	r3, #1
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800ab18:	e016      	b.n	800ab48 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2201      	movs	r2, #1
 800ab26:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab2e:	2102      	movs	r1, #2
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	4798      	blx	r3
      break;
 800ab34:	e00c      	b.n	800ab50 <USBH_MSC_Process+0x514>
            break;
 800ab36:	bf00      	nop
 800ab38:	e00a      	b.n	800ab50 <USBH_MSC_Process+0x514>
            break;
 800ab3a:	bf00      	nop
 800ab3c:	e008      	b.n	800ab50 <USBH_MSC_Process+0x514>
            break;
 800ab3e:	bf00      	nop
 800ab40:	e006      	b.n	800ab50 <USBH_MSC_Process+0x514>
            break;
 800ab42:	bf00      	nop
 800ab44:	e004      	b.n	800ab50 <USBH_MSC_Process+0x514>
            break;
 800ab46:	bf00      	nop
      break;
 800ab48:	e002      	b.n	800ab50 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab4e:	bf00      	nop
  }
  return error;
 800ab50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3718      	adds	r7, #24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop

0800ab5c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	370c      	adds	r7, #12
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr

0800ab72 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b088      	sub	sp, #32
 800ab76:	af02      	add	r7, sp, #8
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800ab90:	78fb      	ldrb	r3, [r7, #3]
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	2134      	movs	r1, #52	; 0x34
 800ab96:	fb01 f303 	mul.w	r3, r1, r3
 800ab9a:	4413      	add	r3, r2
 800ab9c:	3390      	adds	r3, #144	; 0x90
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	2b07      	cmp	r3, #7
 800aba2:	d03c      	beq.n	800ac1e <USBH_MSC_RdWrProcess+0xac>
 800aba4:	2b07      	cmp	r3, #7
 800aba6:	f300 80a7 	bgt.w	800acf8 <USBH_MSC_RdWrProcess+0x186>
 800abaa:	2b05      	cmp	r3, #5
 800abac:	d06c      	beq.n	800ac88 <USBH_MSC_RdWrProcess+0x116>
 800abae:	2b06      	cmp	r3, #6
 800abb0:	f040 80a2 	bne.w	800acf8 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800abb4:	78f9      	ldrb	r1, [r7, #3]
 800abb6:	2300      	movs	r3, #0
 800abb8:	9300      	str	r3, [sp, #0]
 800abba:	2300      	movs	r3, #0
 800abbc:	2200      	movs	r2, #0
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fea5 	bl	800b90e <USBH_MSC_SCSI_Read>
 800abc4:	4603      	mov	r3, r0
 800abc6:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10b      	bne.n	800abe6 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800abce:	78fb      	ldrb	r3, [r7, #3]
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	2134      	movs	r1, #52	; 0x34
 800abd4:	fb01 f303 	mul.w	r3, r1, r3
 800abd8:	4413      	add	r3, r2
 800abda:	3390      	adds	r3, #144	; 0x90
 800abdc:	2201      	movs	r2, #1
 800abde:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800abe4:	e08a      	b.n	800acfc <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d109      	bne.n	800ac00 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800abec:	78fb      	ldrb	r3, [r7, #3]
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	2134      	movs	r1, #52	; 0x34
 800abf2:	fb01 f303 	mul.w	r3, r1, r3
 800abf6:	4413      	add	r3, r2
 800abf8:	3390      	adds	r3, #144	; 0x90
 800abfa:	2205      	movs	r2, #5
 800abfc:	701a      	strb	r2, [r3, #0]
      break;
 800abfe:	e07d      	b.n	800acfc <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
 800ac02:	2b04      	cmp	r3, #4
 800ac04:	d17a      	bne.n	800acfc <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ac06:	78fb      	ldrb	r3, [r7, #3]
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	2134      	movs	r1, #52	; 0x34
 800ac0c:	fb01 f303 	mul.w	r3, r1, r3
 800ac10:	4413      	add	r3, r2
 800ac12:	3390      	adds	r3, #144	; 0x90
 800ac14:	2208      	movs	r2, #8
 800ac16:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ac18:	2302      	movs	r3, #2
 800ac1a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac1c:	e06e      	b.n	800acfc <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800ac1e:	78f9      	ldrb	r1, [r7, #3]
 800ac20:	2300      	movs	r3, #0
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	2300      	movs	r3, #0
 800ac26:	2200      	movs	r2, #0
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fe05 	bl	800b838 <USBH_MSC_SCSI_Write>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10b      	bne.n	800ac50 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	2134      	movs	r1, #52	; 0x34
 800ac3e:	fb01 f303 	mul.w	r3, r1, r3
 800ac42:	4413      	add	r3, r2
 800ac44:	3390      	adds	r3, #144	; 0x90
 800ac46:	2201      	movs	r2, #1
 800ac48:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac4e:	e057      	b.n	800ad00 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d109      	bne.n	800ac6a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	2134      	movs	r1, #52	; 0x34
 800ac5c:	fb01 f303 	mul.w	r3, r1, r3
 800ac60:	4413      	add	r3, r2
 800ac62:	3390      	adds	r3, #144	; 0x90
 800ac64:	2205      	movs	r2, #5
 800ac66:	701a      	strb	r2, [r3, #0]
      break;
 800ac68:	e04a      	b.n	800ad00 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ac6a:	7bfb      	ldrb	r3, [r7, #15]
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d147      	bne.n	800ad00 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ac70:	78fb      	ldrb	r3, [r7, #3]
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	2134      	movs	r1, #52	; 0x34
 800ac76:	fb01 f303 	mul.w	r3, r1, r3
 800ac7a:	4413      	add	r3, r2
 800ac7c:	3390      	adds	r3, #144	; 0x90
 800ac7e:	2208      	movs	r2, #8
 800ac80:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ac82:	2302      	movs	r3, #2
 800ac84:	75fb      	strb	r3, [r7, #23]
      break;
 800ac86:	e03b      	b.n	800ad00 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800ac88:	78fb      	ldrb	r3, [r7, #3]
 800ac8a:	2234      	movs	r2, #52	; 0x34
 800ac8c:	fb02 f303 	mul.w	r3, r2, r3
 800ac90:	3398      	adds	r3, #152	; 0x98
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	4413      	add	r3, r2
 800ac96:	1d1a      	adds	r2, r3, #4
 800ac98:	78fb      	ldrb	r3, [r7, #3]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fd52 	bl	800b746 <USBH_MSC_SCSI_RequestSense>
 800aca2:	4603      	mov	r3, r0
 800aca4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800aca6:	7bfb      	ldrb	r3, [r7, #15]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d113      	bne.n	800acd4 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	2134      	movs	r1, #52	; 0x34
 800acb2:	fb01 f303 	mul.w	r3, r1, r3
 800acb6:	4413      	add	r3, r2
 800acb8:	3390      	adds	r3, #144	; 0x90
 800acba:	2201      	movs	r2, #1
 800acbc:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800acbe:	78fb      	ldrb	r3, [r7, #3]
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	2134      	movs	r1, #52	; 0x34
 800acc4:	fb01 f303 	mul.w	r3, r1, r3
 800acc8:	4413      	add	r3, r2
 800acca:	3391      	adds	r3, #145	; 0x91
 800accc:	2202      	movs	r2, #2
 800acce:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800acd0:	2302      	movs	r3, #2
 800acd2:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d014      	beq.n	800ad04 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800acda:	7bfb      	ldrb	r3, [r7, #15]
 800acdc:	2b04      	cmp	r3, #4
 800acde:	d111      	bne.n	800ad04 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	2134      	movs	r1, #52	; 0x34
 800ace6:	fb01 f303 	mul.w	r3, r1, r3
 800acea:	4413      	add	r3, r2
 800acec:	3390      	adds	r3, #144	; 0x90
 800acee:	2208      	movs	r2, #8
 800acf0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800acf2:	2302      	movs	r3, #2
 800acf4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800acf6:	e005      	b.n	800ad04 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800acf8:	bf00      	nop
 800acfa:	e004      	b.n	800ad06 <USBH_MSC_RdWrProcess+0x194>
      break;
 800acfc:	bf00      	nop
 800acfe:	e002      	b.n	800ad06 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ad00:	bf00      	nop
 800ad02:	e000      	b.n	800ad06 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ad04:	bf00      	nop

  }
  return error;
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad22:	69db      	ldr	r3, [r3, #28]
 800ad24:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b0b      	cmp	r3, #11
 800ad2e:	d10c      	bne.n	800ad4a <USBH_MSC_UnitIsReady+0x3a>
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	2134      	movs	r1, #52	; 0x34
 800ad36:	fb01 f303 	mul.w	r3, r1, r3
 800ad3a:	4413      	add	r3, r2
 800ad3c:	3391      	adds	r3, #145	; 0x91
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d102      	bne.n	800ad4a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800ad44:	2301      	movs	r3, #1
 800ad46:	73fb      	strb	r3, [r7, #15]
 800ad48:	e001      	b.n	800ad4e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	460b      	mov	r3, r1
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	2b0b      	cmp	r3, #11
 800ad7c:	d10d      	bne.n	800ad9a <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800ad7e:	7afb      	ldrb	r3, [r7, #11]
 800ad80:	2234      	movs	r2, #52	; 0x34
 800ad82:	fb02 f303 	mul.w	r3, r2, r3
 800ad86:	3390      	adds	r3, #144	; 0x90
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	2234      	movs	r2, #52	; 0x34
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f006 f9fb 	bl	801118c <memcpy>
    return USBH_OK;
 800ad96:	2300      	movs	r3, #0
 800ad98:	e000      	b.n	800ad9c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800ad9a:	2302      	movs	r3, #2
  }
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af02      	add	r7, sp, #8
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	607a      	str	r2, [r7, #4]
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	460b      	mov	r3, r1
 800adb2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00e      	beq.n	800ade8 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800add0:	2b0b      	cmp	r3, #11
 800add2:	d109      	bne.n	800ade8 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800add4:	7afb      	ldrb	r3, [r7, #11]
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	2134      	movs	r1, #52	; 0x34
 800adda:	fb01 f303 	mul.w	r3, r1, r3
 800adde:	4413      	add	r3, r2
 800ade0:	3390      	adds	r3, #144	; 0x90
 800ade2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d001      	beq.n	800adec <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800ade8:	2302      	movs	r3, #2
 800adea:	e040      	b.n	800ae6e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	2206      	movs	r2, #6
 800adf0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800adf2:	7afb      	ldrb	r3, [r7, #11]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	2134      	movs	r1, #52	; 0x34
 800adf8:	fb01 f303 	mul.w	r3, r1, r3
 800adfc:	4413      	add	r3, r2
 800adfe:	3390      	adds	r3, #144	; 0x90
 800ae00:	2206      	movs	r2, #6
 800ae02:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ae04:	7afb      	ldrb	r3, [r7, #11]
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800ae0e:	7af9      	ldrb	r1, [r7, #11]
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f000 fd78 	bl	800b90e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae24:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ae26:	e016      	b.n	800ae56 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	1ad2      	subs	r2, r2, r3
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	f242 7110 	movw	r1, #10000	; 0x2710
 800ae38:	fb01 f303 	mul.w	r3, r1, r3
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d805      	bhi.n	800ae4c <USBH_MSC_Read+0xa8>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d104      	bne.n	800ae56 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800ae52:	2302      	movs	r3, #2
 800ae54:	e00b      	b.n	800ae6e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ae56:	7afb      	ldrb	r3, [r7, #11]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f7ff fe89 	bl	800ab72 <USBH_MSC_RdWrProcess>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d0e0      	beq.n	800ae28 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b088      	sub	sp, #32
 800ae7a:	af02      	add	r7, sp, #8
 800ae7c:	60f8      	str	r0, [r7, #12]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	603b      	str	r3, [r7, #0]
 800ae82:	460b      	mov	r3, r1
 800ae84:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae8c:	69db      	ldr	r3, [r3, #28]
 800ae8e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00e      	beq.n	800aeba <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800aea2:	2b0b      	cmp	r3, #11
 800aea4:	d109      	bne.n	800aeba <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800aea6:	7afb      	ldrb	r3, [r7, #11]
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	2134      	movs	r1, #52	; 0x34
 800aeac:	fb01 f303 	mul.w	r3, r1, r3
 800aeb0:	4413      	add	r3, r2
 800aeb2:	3390      	adds	r3, #144	; 0x90
 800aeb4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d001      	beq.n	800aebe <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800aeba:	2302      	movs	r3, #2
 800aebc:	e040      	b.n	800af40 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2207      	movs	r2, #7
 800aec2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800aec4:	7afb      	ldrb	r3, [r7, #11]
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	2134      	movs	r1, #52	; 0x34
 800aeca:	fb01 f303 	mul.w	r3, r1, r3
 800aece:	4413      	add	r3, r2
 800aed0:	3390      	adds	r3, #144	; 0x90
 800aed2:	2207      	movs	r2, #7
 800aed4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800aed6:	7afb      	ldrb	r3, [r7, #11]
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800aee0:	7af9      	ldrb	r1, [r7, #11]
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 fca4 	bl	800b838 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aef6:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800aef8:	e016      	b.n	800af28 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	1ad2      	subs	r2, r2, r3
 800af04:	6a3b      	ldr	r3, [r7, #32]
 800af06:	f242 7110 	movw	r1, #10000	; 0x2710
 800af0a:	fb01 f303 	mul.w	r3, r1, r3
 800af0e:	429a      	cmp	r2, r3
 800af10:	d805      	bhi.n	800af1e <USBH_MSC_Write+0xa8>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d104      	bne.n	800af28 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2201      	movs	r2, #1
 800af22:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800af24:	2302      	movs	r3, #2
 800af26:	e00b      	b.n	800af40 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	4619      	mov	r1, r3
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7ff fe20 	bl	800ab72 <USBH_MSC_RdWrProcess>
 800af32:	4603      	mov	r3, r0
 800af34:	2b01      	cmp	r3, #1
 800af36:	d0e0      	beq.n	800aefa <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	2201      	movs	r2, #1
 800af3c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2221      	movs	r2, #33	; 0x21
 800af54:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	22ff      	movs	r2, #255	; 0xff
 800af5a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800af6e:	2200      	movs	r2, #0
 800af70:	2100      	movs	r1, #0
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f001 fea6 	bl	800ccc4 <USBH_CtlReq>
 800af78:	4603      	mov	r3, r0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	22a1      	movs	r2, #161	; 0xa1
 800af90:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	22fe      	movs	r2, #254	; 0xfe
 800af96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800afaa:	2201      	movs	r2, #1
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f001 fe88 	bl	800ccc4 <USBH_CtlReq>
 800afb4:	4603      	mov	r3, r0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afce:	69db      	ldr	r3, [r3, #28]
 800afd0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	4a09      	ldr	r2, [pc, #36]	; (800affc <USBH_MSC_BOT_Init+0x3c>)
 800afd6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	4a09      	ldr	r2, [pc, #36]	; (800b000 <USBH_MSC_BOT_Init+0x40>)
 800afdc:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2201      	movs	r2, #1
 800afe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2201      	movs	r2, #1
 800afea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	43425355 	.word	0x43425355
 800b000:	20304050 	.word	0x20304050

0800b004 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af02      	add	r7, sp, #8
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b010:	2301      	movs	r3, #1
 800b012:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b014:	2301      	movs	r3, #1
 800b016:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b018:	2301      	movs	r3, #1
 800b01a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b01c:	2300      	movs	r3, #0
 800b01e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b026:	69db      	ldr	r3, [r3, #28]
 800b028:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b034:	3b01      	subs	r3, #1
 800b036:	2b0a      	cmp	r3, #10
 800b038:	f200 819e 	bhi.w	800b378 <USBH_MSC_BOT_Process+0x374>
 800b03c:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <USBH_MSC_BOT_Process+0x40>)
 800b03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b042:	bf00      	nop
 800b044:	0800b071 	.word	0x0800b071
 800b048:	0800b099 	.word	0x0800b099
 800b04c:	0800b103 	.word	0x0800b103
 800b050:	0800b121 	.word	0x0800b121
 800b054:	0800b1a5 	.word	0x0800b1a5
 800b058:	0800b1c7 	.word	0x0800b1c7
 800b05c:	0800b25f 	.word	0x0800b25f
 800b060:	0800b27b 	.word	0x0800b27b
 800b064:	0800b2cd 	.word	0x0800b2cd
 800b068:	0800b2fd 	.word	0x0800b2fd
 800b06c:	0800b35f 	.word	0x0800b35f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	78fa      	ldrb	r2, [r7, #3]
 800b074:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	2202      	movs	r2, #2
 800b07c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	795b      	ldrb	r3, [r3, #5]
 800b08a:	2201      	movs	r2, #1
 800b08c:	9200      	str	r2, [sp, #0]
 800b08e:	221f      	movs	r2, #31
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f002 f826 	bl	800d0e2 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b096:	e17e      	b.n	800b396 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	795b      	ldrb	r3, [r3, #5]
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f005 fe3e 	bl	8010d20 <USBH_LL_GetURBState>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b0a8:	7d3b      	ldrb	r3, [r7, #20]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d118      	bne.n	800b0e0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00f      	beq.n	800b0d6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b0bc:	b25b      	sxtb	r3, r3
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	da04      	bge.n	800b0cc <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2203      	movs	r2, #3
 800b0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b0ca:	e157      	b.n	800b37c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	2205      	movs	r2, #5
 800b0d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b0d4:	e152      	b.n	800b37c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2207      	movs	r2, #7
 800b0da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b0de:	e14d      	b.n	800b37c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b0e0:	7d3b      	ldrb	r3, [r7, #20]
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d104      	bne.n	800b0f0 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b0ee:	e145      	b.n	800b37c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b0f0:	7d3b      	ldrb	r3, [r7, #20]
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	f040 8142 	bne.w	800b37c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	220a      	movs	r2, #10
 800b0fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b100:	e13c      	b.n	800b37c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	895a      	ldrh	r2, [r3, #10]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	791b      	ldrb	r3, [r3, #4]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f002 f80b 	bl	800d12c <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	2204      	movs	r2, #4
 800b11a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b11e:	e13a      	b.n	800b396 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	791b      	ldrb	r3, [r3, #4]
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f005 fdfa 	bl	8010d20 <USBH_LL_GetURBState>
 800b12c:	4603      	mov	r3, r0
 800b12e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b130:	7d3b      	ldrb	r3, [r7, #20]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d12d      	bne.n	800b192 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	8952      	ldrh	r2, [r2, #10]
 800b13e:	4293      	cmp	r3, r2
 800b140:	d910      	bls.n	800b164 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b148:	693a      	ldr	r2, [r7, #16]
 800b14a:	8952      	ldrh	r2, [r2, #10]
 800b14c:	441a      	add	r2, r3
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	8952      	ldrh	r2, [r2, #10]
 800b15c:	1a9a      	subs	r2, r3, r2
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	65da      	str	r2, [r3, #92]	; 0x5c
 800b162:	e002      	b.n	800b16a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	2200      	movs	r2, #0
 800b168:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00a      	beq.n	800b188 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	895a      	ldrh	r2, [r3, #10]
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	791b      	ldrb	r3, [r3, #4]
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f001 ffd3 	bl	800d12c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b186:	e0fb      	b.n	800b380 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	2207      	movs	r2, #7
 800b18c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b190:	e0f6      	b.n	800b380 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b192:	7d3b      	ldrb	r3, [r7, #20]
 800b194:	2b05      	cmp	r3, #5
 800b196:	f040 80f3 	bne.w	800b380 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	2209      	movs	r2, #9
 800b19e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b1a2:	e0ed      	b.n	800b380 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	891a      	ldrh	r2, [r3, #8]
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	795b      	ldrb	r3, [r3, #5]
 800b1b2:	2001      	movs	r0, #1
 800b1b4:	9000      	str	r0, [sp, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f001 ff93 	bl	800d0e2 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2206      	movs	r2, #6
 800b1c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b1c4:	e0e7      	b.n	800b396 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	795b      	ldrb	r3, [r3, #5]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f005 fda7 	bl	8010d20 <USBH_LL_GetURBState>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b1d6:	7d3b      	ldrb	r3, [r7, #20]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d12f      	bne.n	800b23c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	8912      	ldrh	r2, [r2, #8]
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d910      	bls.n	800b20a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	8912      	ldrh	r2, [r2, #8]
 800b1f2:	441a      	add	r2, r3
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	8912      	ldrh	r2, [r2, #8]
 800b202:	1a9a      	subs	r2, r3, r2
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	65da      	str	r2, [r3, #92]	; 0x5c
 800b208:	e002      	b.n	800b210 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	2200      	movs	r2, #0
 800b20e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00c      	beq.n	800b232 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	891a      	ldrh	r2, [r3, #8]
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	795b      	ldrb	r3, [r3, #5]
 800b226:	2001      	movs	r0, #1
 800b228:	9000      	str	r0, [sp, #0]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f001 ff59 	bl	800d0e2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800b230:	e0a8      	b.n	800b384 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	2207      	movs	r2, #7
 800b236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b23a:	e0a3      	b.n	800b384 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b23c:	7d3b      	ldrb	r3, [r7, #20]
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d104      	bne.n	800b24c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	2205      	movs	r2, #5
 800b246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b24a:	e09b      	b.n	800b384 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800b24c:	7d3b      	ldrb	r3, [r7, #20]
 800b24e:	2b05      	cmp	r3, #5
 800b250:	f040 8098 	bne.w	800b384 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	220a      	movs	r2, #10
 800b258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b25c:	e092      	b.n	800b384 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	791b      	ldrb	r3, [r3, #4]
 800b268:	220d      	movs	r2, #13
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 ff5e 	bl	800d12c <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	2208      	movs	r2, #8
 800b274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b278:	e08d      	b.n	800b396 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	791b      	ldrb	r3, [r3, #4]
 800b27e:	4619      	mov	r1, r3
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f005 fd4d 	bl	8010d20 <USBH_LL_GetURBState>
 800b286:	4603      	mov	r3, r0
 800b288:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b28a:	7d3b      	ldrb	r3, [r7, #20]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d115      	bne.n	800b2bc <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f8a9 	bl	800b3f8 <USBH_MSC_DecodeCSW>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b2aa:	7d7b      	ldrb	r3, [r7, #21]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d102      	bne.n	800b2b6 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800b2b4:	e068      	b.n	800b388 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800b2b6:	2302      	movs	r3, #2
 800b2b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b2ba:	e065      	b.n	800b388 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800b2bc:	7d3b      	ldrb	r3, [r7, #20]
 800b2be:	2b05      	cmp	r3, #5
 800b2c0:	d162      	bne.n	800b388 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	2209      	movs	r2, #9
 800b2c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b2ca:	e05d      	b.n	800b388 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b2cc:	78fb      	ldrb	r3, [r7, #3]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f864 	bl	800b3a0 <USBH_MSC_BOT_Abort>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b2dc:	7dbb      	ldrb	r3, [r7, #22]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d104      	bne.n	800b2ec <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2207      	movs	r2, #7
 800b2e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b2ea:	e04f      	b.n	800b38c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b2ec:	7dbb      	ldrb	r3, [r7, #22]
 800b2ee:	2b04      	cmp	r3, #4
 800b2f0:	d14c      	bne.n	800b38c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	220b      	movs	r2, #11
 800b2f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b2fa:	e047      	b.n	800b38c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	2201      	movs	r2, #1
 800b300:	4619      	mov	r1, r3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f84c 	bl	800b3a0 <USBH_MSC_BOT_Abort>
 800b308:	4603      	mov	r3, r0
 800b30a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b30c:	7dbb      	ldrb	r3, [r7, #22]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d11d      	bne.n	800b34e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	795b      	ldrb	r3, [r3, #5]
 800b316:	4619      	mov	r1, r3
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f005 fd5b 	bl	8010dd4 <USBH_LL_GetToggle>
 800b31e:	4603      	mov	r3, r0
 800b320:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	7959      	ldrb	r1, [r3, #5]
 800b326:	7bfb      	ldrb	r3, [r7, #15]
 800b328:	f1c3 0301 	rsb	r3, r3, #1
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	461a      	mov	r2, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f005 fd1f 	bl	8010d74 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	791b      	ldrb	r3, [r3, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f005 fd18 	bl	8010d74 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	2209      	movs	r2, #9
 800b348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b34c:	e020      	b.n	800b390 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800b34e:	7dbb      	ldrb	r3, [r7, #22]
 800b350:	2b04      	cmp	r3, #4
 800b352:	d11d      	bne.n	800b390 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	220b      	movs	r2, #11
 800b358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b35c:	e018      	b.n	800b390 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7ff fdf2 	bl	800af48 <USBH_MSC_BOT_REQ_Reset>
 800b364:	4603      	mov	r3, r0
 800b366:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b368:	7dfb      	ldrb	r3, [r7, #23]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d112      	bne.n	800b394 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	2201      	movs	r2, #1
 800b372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800b376:	e00d      	b.n	800b394 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800b378:	bf00      	nop
 800b37a:	e00c      	b.n	800b396 <USBH_MSC_BOT_Process+0x392>
      break;
 800b37c:	bf00      	nop
 800b37e:	e00a      	b.n	800b396 <USBH_MSC_BOT_Process+0x392>
      break;
 800b380:	bf00      	nop
 800b382:	e008      	b.n	800b396 <USBH_MSC_BOT_Process+0x392>
      break;
 800b384:	bf00      	nop
 800b386:	e006      	b.n	800b396 <USBH_MSC_BOT_Process+0x392>
      break;
 800b388:	bf00      	nop
 800b38a:	e004      	b.n	800b396 <USBH_MSC_BOT_Process+0x392>
      break;
 800b38c:	bf00      	nop
 800b38e:	e002      	b.n	800b396 <USBH_MSC_BOT_Process+0x392>
      break;
 800b390:	bf00      	nop
 800b392:	e000      	b.n	800b396 <USBH_MSC_BOT_Process+0x392>
      break;
 800b394:	bf00      	nop
  }
  return status;
 800b396:	7dfb      	ldrb	r3, [r7, #23]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70fb      	strb	r3, [r7, #3]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b3be:	78bb      	ldrb	r3, [r7, #2]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <USBH_MSC_BOT_Abort+0x2a>
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d009      	beq.n	800b3dc <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b3c8:	e011      	b.n	800b3ee <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	79db      	ldrb	r3, [r3, #7]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f001 f9a8 	bl	800c726 <USBH_ClrFeature>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b3da:	e008      	b.n	800b3ee <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	799b      	ldrb	r3, [r3, #6]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f001 f99f 	bl	800c726 <USBH_ClrFeature>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ec:	bf00      	nop
  }
  return status;
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b406:	69db      	ldr	r3, [r3, #28]
 800b408:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b40a:	2301      	movs	r3, #1
 800b40c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	791b      	ldrb	r3, [r3, #4]
 800b412:	4619      	mov	r1, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f005 fbf1 	bl	8010bfc <USBH_LL_GetLastXferSize>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b0d      	cmp	r3, #13
 800b41e:	d002      	beq.n	800b426 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b420:	2302      	movs	r3, #2
 800b422:	73fb      	strb	r3, [r7, #15]
 800b424:	e024      	b.n	800b470 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b42a:	4a14      	ldr	r2, [pc, #80]	; (800b47c <USBH_MSC_DecodeCSW+0x84>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d11d      	bne.n	800b46c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b438:	429a      	cmp	r2, r3
 800b43a:	d119      	bne.n	800b470 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b442:	2b00      	cmp	r3, #0
 800b444:	d102      	bne.n	800b44c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b446:	2300      	movs	r3, #0
 800b448:	73fb      	strb	r3, [r7, #15]
 800b44a:	e011      	b.n	800b470 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b452:	2b01      	cmp	r3, #1
 800b454:	d102      	bne.n	800b45c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b456:	2301      	movs	r3, #1
 800b458:	73fb      	strb	r3, [r7, #15]
 800b45a:	e009      	b.n	800b470 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b462:	2b02      	cmp	r3, #2
 800b464:	d104      	bne.n	800b470 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b466:	2302      	movs	r3, #2
 800b468:	73fb      	strb	r3, [r7, #15]
 800b46a:	e001      	b.n	800b470 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b46c:	2302      	movs	r3, #2
 800b46e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b470:	7bfb      	ldrb	r3, [r7, #15]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	53425355 	.word	0x53425355

0800b480 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b48c:	2302      	movs	r3, #2
 800b48e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d002      	beq.n	800b4aa <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d021      	beq.n	800b4ec <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b4a8:	e028      	b.n	800b4fc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	220a      	movs	r2, #10
 800b4bc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	3363      	adds	r3, #99	; 0x63
 800b4c4:	2210      	movs	r2, #16
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f005 fde3 	bl	8011094 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	2202      	movs	r2, #2
 800b4e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ea:	e007      	b.n	800b4fc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b4ec:	78fb      	ldrb	r3, [r7, #3]
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7ff fd87 	bl	800b004 <USBH_MSC_BOT_Process>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4fa:	bf00      	nop
  }

  return error;
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b086      	sub	sp, #24
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	460b      	mov	r3, r1
 800b510:	607a      	str	r2, [r7, #4]
 800b512:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b514:	2301      	movs	r3, #1
 800b516:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b51e:	69db      	ldr	r3, [r3, #28]
 800b520:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d002      	beq.n	800b532 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	d027      	beq.n	800b580 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b530:	e05f      	b.n	800b5f2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	2208      	movs	r2, #8
 800b536:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	2280      	movs	r2, #128	; 0x80
 800b53c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	220a      	movs	r2, #10
 800b544:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	3363      	adds	r3, #99	; 0x63
 800b54c:	2210      	movs	r2, #16
 800b54e:	2100      	movs	r1, #0
 800b550:	4618      	mov	r0, r3
 800b552:	f005 fd9f 	bl	8011094 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	2225      	movs	r2, #37	; 0x25
 800b55a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	2202      	movs	r2, #2
 800b56a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	f103 0210 	add.w	r2, r3, #16
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b57a:	2301      	movs	r3, #1
 800b57c:	75fb      	strb	r3, [r7, #23]
      break;
 800b57e:	e038      	b.n	800b5f2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	4619      	mov	r1, r3
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f7ff fd3d 	bl	800b004 <USBH_MSC_BOT_Process>
 800b58a:	4603      	mov	r3, r0
 800b58c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d12d      	bne.n	800b5f0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b59a:	3303      	adds	r3, #3
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5a6:	3302      	adds	r3, #2
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	021b      	lsls	r3, r3, #8
 800b5ac:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b5ba:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	061b      	lsls	r3, r3, #24
 800b5c6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5d2:	3307      	adds	r3, #7
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5de:	3306      	adds	r3, #6
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	021b      	lsls	r3, r3, #8
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	809a      	strh	r2, [r3, #4]
      break;
 800b5f0:	bf00      	nop
  }

  return error;
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	460b      	mov	r3, r1
 800b606:	607a      	str	r2, [r7, #4]
 800b608:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b60a:	2302      	movs	r3, #2
 800b60c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d002      	beq.n	800b628 <USBH_MSC_SCSI_Inquiry+0x2c>
 800b622:	2b02      	cmp	r3, #2
 800b624:	d03d      	beq.n	800b6a2 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b626:	e089      	b.n	800b73c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	2224      	movs	r2, #36	; 0x24
 800b62c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	2280      	movs	r2, #128	; 0x80
 800b632:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	220a      	movs	r2, #10
 800b63a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	3363      	adds	r3, #99	; 0x63
 800b642:	220a      	movs	r2, #10
 800b644:	2100      	movs	r1, #0
 800b646:	4618      	mov	r0, r3
 800b648:	f005 fd24 	bl	8011094 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	2212      	movs	r2, #18
 800b650:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b654:	7afb      	ldrb	r3, [r7, #11]
 800b656:	015b      	lsls	r3, r3, #5
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2224      	movs	r2, #36	; 0x24
 800b674:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	2202      	movs	r2, #2
 800b68c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f103 0210 	add.w	r2, r3, #16
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b69c:	2301      	movs	r3, #1
 800b69e:	75fb      	strb	r3, [r7, #23]
      break;
 800b6a0:	e04c      	b.n	800b73c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b6a2:	7afb      	ldrb	r3, [r7, #11]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f7ff fcac 	bl	800b004 <USBH_MSC_BOT_Process>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b6b0:	7dfb      	ldrb	r3, [r7, #23]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d141      	bne.n	800b73a <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b6b6:	2222      	movs	r2, #34	; 0x22
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f005 fcea 	bl	8011094 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 031f 	and.w	r3, r3, #31
 800b6cc:	b2da      	uxtb	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	095b      	lsrs	r3, r3, #5
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	b25b      	sxtb	r3, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	da03      	bge.n	800b6fa <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	709a      	strb	r2, [r3, #2]
 800b6f8:	e002      	b.n	800b700 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	1cd8      	adds	r0, r3, #3
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b70a:	3308      	adds	r3, #8
 800b70c:	2208      	movs	r2, #8
 800b70e:	4619      	mov	r1, r3
 800b710:	f005 fd3c 	bl	801118c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f103 000c 	add.w	r0, r3, #12
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b720:	3310      	adds	r3, #16
 800b722:	2210      	movs	r2, #16
 800b724:	4619      	mov	r1, r3
 800b726:	f005 fd31 	bl	801118c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	331d      	adds	r3, #29
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b734:	3220      	adds	r2, #32
 800b736:	6812      	ldr	r2, [r2, #0]
 800b738:	601a      	str	r2, [r3, #0]
      break;
 800b73a:	bf00      	nop
  }

  return error;
 800b73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3718      	adds	r7, #24
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b086      	sub	sp, #24
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	460b      	mov	r3, r1
 800b750:	607a      	str	r2, [r7, #4]
 800b752:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b754:	2302      	movs	r3, #2
 800b756:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b75e:	69db      	ldr	r3, [r3, #28]
 800b760:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d002      	beq.n	800b772 <USBH_MSC_SCSI_RequestSense+0x2c>
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d03d      	beq.n	800b7ec <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b770:	e05d      	b.n	800b82e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	220e      	movs	r2, #14
 800b776:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	2280      	movs	r2, #128	; 0x80
 800b77c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	220a      	movs	r2, #10
 800b784:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	3363      	adds	r3, #99	; 0x63
 800b78c:	2210      	movs	r2, #16
 800b78e:	2100      	movs	r1, #0
 800b790:	4618      	mov	r0, r3
 800b792:	f005 fc7f 	bl	8011094 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	2203      	movs	r2, #3
 800b79a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b79e:	7afb      	ldrb	r3, [r7, #11]
 800b7a0:	015b      	lsls	r3, r3, #5
 800b7a2:	b2da      	uxtb	r2, r3
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	220e      	movs	r2, #14
 800b7be:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	2202      	movs	r2, #2
 800b7d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	f103 0210 	add.w	r2, r3, #16
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ea:	e020      	b.n	800b82e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b7ec:	7afb      	ldrb	r3, [r7, #11]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f7ff fc07 	bl	800b004 <USBH_MSC_BOT_Process>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d115      	bne.n	800b82c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b806:	3302      	adds	r3, #2
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	f003 030f 	and.w	r3, r3, #15
 800b80e:	b2da      	uxtb	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b81a:	7b1a      	ldrb	r2, [r3, #12]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b826:	7b5a      	ldrb	r2, [r3, #13]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	709a      	strb	r2, [r3, #2]
      break;
 800b82c:	bf00      	nop
  }

  return error;
 800b82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3718      	adds	r7, #24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	607a      	str	r2, [r7, #4]
 800b842:	603b      	str	r3, [r7, #0]
 800b844:	460b      	mov	r3, r1
 800b846:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b848:	2302      	movs	r3, #2
 800b84a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b852:	69db      	ldr	r3, [r3, #28]
 800b854:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d002      	beq.n	800b866 <USBH_MSC_SCSI_Write+0x2e>
 800b860:	2b02      	cmp	r3, #2
 800b862:	d047      	beq.n	800b8f4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b864:	e04e      	b.n	800b904 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b86c:	461a      	mov	r2, r3
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	fb03 f202 	mul.w	r2, r3, r2
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	220a      	movs	r2, #10
 800b884:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	3363      	adds	r3, #99	; 0x63
 800b88c:	2210      	movs	r2, #16
 800b88e:	2100      	movs	r1, #0
 800b890:	4618      	mov	r0, r3
 800b892:	f005 fbff 	bl	8011094 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	222a      	movs	r2, #42	; 0x2a
 800b89a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b89e:	79fa      	ldrb	r2, [r7, #7]
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b8a6:	79ba      	ldrb	r2, [r7, #6]
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b8ae:	797a      	ldrb	r2, [r7, #5]
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b8b6:	1d3b      	adds	r3, r7, #4
 800b8b8:	781a      	ldrb	r2, [r3, #0]
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b8c0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b8ca:	f107 0320 	add.w	r3, r7, #32
 800b8ce:	781a      	ldrb	r2, [r3, #0]
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	2202      	movs	r2, #2
 800b8e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b8f2:	e007      	b.n	800b904 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b8f4:	7afb      	ldrb	r3, [r7, #11]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f7ff fb83 	bl	800b004 <USBH_MSC_BOT_Process>
 800b8fe:	4603      	mov	r3, r0
 800b900:	75fb      	strb	r3, [r7, #23]
      break;
 800b902:	bf00      	nop
  }

  return error;
 800b904:	7dfb      	ldrb	r3, [r7, #23]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3718      	adds	r7, #24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b086      	sub	sp, #24
 800b912:	af00      	add	r7, sp, #0
 800b914:	60f8      	str	r0, [r7, #12]
 800b916:	607a      	str	r2, [r7, #4]
 800b918:	603b      	str	r3, [r7, #0]
 800b91a:	460b      	mov	r3, r1
 800b91c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b91e:	2302      	movs	r3, #2
 800b920:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b928:	69db      	ldr	r3, [r3, #28]
 800b92a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b932:	2b01      	cmp	r3, #1
 800b934:	d002      	beq.n	800b93c <USBH_MSC_SCSI_Read+0x2e>
 800b936:	2b02      	cmp	r3, #2
 800b938:	d047      	beq.n	800b9ca <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b93a:	e04e      	b.n	800b9da <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b942:	461a      	mov	r2, r3
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	fb03 f202 	mul.w	r2, r3, r2
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	2280      	movs	r2, #128	; 0x80
 800b952:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	220a      	movs	r2, #10
 800b95a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	3363      	adds	r3, #99	; 0x63
 800b962:	2210      	movs	r2, #16
 800b964:	2100      	movs	r1, #0
 800b966:	4618      	mov	r0, r3
 800b968:	f005 fb94 	bl	8011094 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	2228      	movs	r2, #40	; 0x28
 800b970:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b974:	79fa      	ldrb	r2, [r7, #7]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b97c:	79ba      	ldrb	r2, [r7, #6]
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b984:	797a      	ldrb	r2, [r7, #5]
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b98c:	1d3b      	adds	r3, r7, #4
 800b98e:	781a      	ldrb	r2, [r3, #0]
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b996:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b9a0:	f107 0320 	add.w	r3, r7, #32
 800b9a4:	781a      	ldrb	r2, [r3, #0]
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c8:	e007      	b.n	800b9da <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b9ca:	7afb      	ldrb	r3, [r7, #11]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f7ff fb18 	bl	800b004 <USBH_MSC_BOT_Process>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b9d8:	bf00      	nop
  }

  return error;
 800b9da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d101      	bne.n	800b9fc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	e029      	b.n	800ba50 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	79fa      	ldrb	r2, [r7, #7]
 800ba00:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f000 f81f 	bl	800ba58 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d003      	beq.n	800ba48 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f005 f823 	bl	8010a94 <USBH_LL_Init>

  return USBH_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ba60:	2300      	movs	r3, #0
 800ba62:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ba64:	2300      	movs	r3, #0
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	e009      	b.n	800ba7e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	33e0      	adds	r3, #224	; 0xe0
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	2200      	movs	r2, #0
 800ba76:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	60fb      	str	r3, [r7, #12]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2b0f      	cmp	r3, #15
 800ba82:	d9f2      	bls.n	800ba6a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ba84:	2300      	movs	r3, #0
 800ba86:	60fb      	str	r3, [r7, #12]
 800ba88:	e009      	b.n	800ba9e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba94:	2200      	movs	r2, #0
 800ba96:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	60fb      	str	r3, [r7, #12]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baa4:	d3f1      	bcc.n	800ba8a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2201      	movs	r2, #1
 800bab6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2240      	movs	r2, #64	; 0x40
 800baca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800baf2:	2300      	movs	r3, #0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3714      	adds	r7, #20
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d016      	beq.n	800bb42 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10e      	bne.n	800bb3c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bb24:	1c59      	adds	r1, r3, #1
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	33de      	adds	r3, #222	; 0xde
 800bb30:	6839      	ldr	r1, [r7, #0]
 800bb32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	73fb      	strb	r3, [r7, #15]
 800bb3a:	e004      	b.n	800bb46 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	73fb      	strb	r3, [r7, #15]
 800bb40:	e001      	b.n	800bb46 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bb42:	2302      	movs	r3, #2
 800bb44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bb6a:	78fa      	ldrb	r2, [r7, #3]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d204      	bcs.n	800bb7a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	78fa      	ldrb	r2, [r7, #3]
 800bb74:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bb78:	e001      	b.n	800bb7e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bb7a:	2302      	movs	r3, #2
 800bb7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3714      	adds	r7, #20
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b087      	sub	sp, #28
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	4608      	mov	r0, r1
 800bb96:	4611      	mov	r1, r2
 800bb98:	461a      	mov	r2, r3
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	70fb      	strb	r3, [r7, #3]
 800bb9e:	460b      	mov	r3, r1
 800bba0:	70bb      	strb	r3, [r7, #2]
 800bba2:	4613      	mov	r3, r2
 800bba4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bba6:	2300      	movs	r3, #0
 800bba8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bbb4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bbb6:	e025      	b.n	800bc04 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
 800bbba:	221a      	movs	r2, #26
 800bbbc:	fb02 f303 	mul.w	r3, r2, r3
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	3302      	adds	r3, #2
 800bbc8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	795b      	ldrb	r3, [r3, #5]
 800bbce:	78fa      	ldrb	r2, [r7, #3]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d002      	beq.n	800bbda <USBH_FindInterface+0x4e>
 800bbd4:	78fb      	ldrb	r3, [r7, #3]
 800bbd6:	2bff      	cmp	r3, #255	; 0xff
 800bbd8:	d111      	bne.n	800bbfe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bbde:	78ba      	ldrb	r2, [r7, #2]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d002      	beq.n	800bbea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bbe4:	78bb      	ldrb	r3, [r7, #2]
 800bbe6:	2bff      	cmp	r3, #255	; 0xff
 800bbe8:	d109      	bne.n	800bbfe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bbee:	787a      	ldrb	r2, [r7, #1]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d002      	beq.n	800bbfa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bbf4:	787b      	ldrb	r3, [r7, #1]
 800bbf6:	2bff      	cmp	r3, #255	; 0xff
 800bbf8:	d101      	bne.n	800bbfe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
 800bbfc:	e006      	b.n	800bc0c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	3301      	adds	r3, #1
 800bc02:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bc04:	7dfb      	ldrb	r3, [r7, #23]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d9d6      	bls.n	800bbb8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bc0a:	23ff      	movs	r3, #255	; 0xff
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	371c      	adds	r7, #28
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f004 ff73 	bl	8010b0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bc26:	2101      	movs	r1, #1
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f005 f88c 	bl	8010d46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b088      	sub	sp, #32
 800bc3c:	af04      	add	r7, sp, #16
 800bc3e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bc40:	2302      	movs	r3, #2
 800bc42:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d102      	bne.n	800bc5a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2203      	movs	r2, #3
 800bc58:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	2b0b      	cmp	r3, #11
 800bc62:	f200 81be 	bhi.w	800bfe2 <USBH_Process+0x3aa>
 800bc66:	a201      	add	r2, pc, #4	; (adr r2, 800bc6c <USBH_Process+0x34>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bc9d 	.word	0x0800bc9d
 800bc70:	0800bccf 	.word	0x0800bccf
 800bc74:	0800bd37 	.word	0x0800bd37
 800bc78:	0800bf7d 	.word	0x0800bf7d
 800bc7c:	0800bfe3 	.word	0x0800bfe3
 800bc80:	0800bddb 	.word	0x0800bddb
 800bc84:	0800bf23 	.word	0x0800bf23
 800bc88:	0800be11 	.word	0x0800be11
 800bc8c:	0800be31 	.word	0x0800be31
 800bc90:	0800be51 	.word	0x0800be51
 800bc94:	0800be95 	.word	0x0800be95
 800bc98:	0800bf65 	.word	0x0800bf65
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f000 819e 	beq.w	800bfe6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bcb0:	20c8      	movs	r0, #200	; 0xc8
 800bcb2:	f005 f8bf 	bl	8010e34 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f004 ff85 	bl	8010bc6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bccc:	e18b      	b.n	800bfe6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d107      	bne.n	800bce8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2202      	movs	r2, #2
 800bce4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bce6:	e18d      	b.n	800c004 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bcee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcf2:	d914      	bls.n	800bd1e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d903      	bls.n	800bd16 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	220d      	movs	r2, #13
 800bd12:	701a      	strb	r2, [r3, #0]
      break;
 800bd14:	e176      	b.n	800c004 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	701a      	strb	r2, [r3, #0]
      break;
 800bd1c:	e172      	b.n	800c004 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bd24:	f103 020a 	add.w	r2, r3, #10
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bd2e:	200a      	movs	r0, #10
 800bd30:	f005 f880 	bl	8010e34 <USBH_Delay>
      break;
 800bd34:	e166      	b.n	800c004 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d005      	beq.n	800bd4c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd46:	2104      	movs	r1, #4
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bd4c:	2064      	movs	r0, #100	; 0x64
 800bd4e:	f005 f871 	bl	8010e34 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f004 ff10 	bl	8010b78 <USBH_LL_GetSpeed>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2205      	movs	r2, #5
 800bd66:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bd68:	2100      	movs	r1, #0
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f001 fa2b 	bl	800d1c6 <USBH_AllocPipe>
 800bd70:	4603      	mov	r3, r0
 800bd72:	461a      	mov	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bd78:	2180      	movs	r1, #128	; 0x80
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f001 fa23 	bl	800d1c6 <USBH_AllocPipe>
 800bd80:	4603      	mov	r3, r0
 800bd82:	461a      	mov	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	7919      	ldrb	r1, [r3, #4]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd9c:	b292      	uxth	r2, r2
 800bd9e:	9202      	str	r2, [sp, #8]
 800bda0:	2200      	movs	r2, #0
 800bda2:	9201      	str	r2, [sp, #4]
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	4603      	mov	r3, r0
 800bda8:	2280      	movs	r2, #128	; 0x80
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f001 f9dc 	bl	800d168 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	7959      	ldrb	r1, [r3, #5]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bdc4:	b292      	uxth	r2, r2
 800bdc6:	9202      	str	r2, [sp, #8]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	9201      	str	r2, [sp, #4]
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f001 f9c8 	bl	800d168 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bdd8:	e114      	b.n	800c004 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f918 	bl	800c010 <USBH_HandleEnum>
 800bde0:	4603      	mov	r3, r0
 800bde2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bde4:	7bbb      	ldrb	r3, [r7, #14]
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f040 80fe 	bne.w	800bfea <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d103      	bne.n	800be08 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2208      	movs	r2, #8
 800be04:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be06:	e0f0      	b.n	800bfea <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2207      	movs	r2, #7
 800be0c:	701a      	strb	r2, [r3, #0]
      break;
 800be0e:	e0ec      	b.n	800bfea <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 80e9 	beq.w	800bfee <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be22:	2101      	movs	r1, #1
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2208      	movs	r2, #8
 800be2c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800be2e:	e0de      	b.n	800bfee <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800be36:	b29b      	uxth	r3, r3
 800be38:	4619      	mov	r1, r3
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fc2c 	bl	800c698 <USBH_SetCfg>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	f040 80d5 	bne.w	800bff2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2209      	movs	r2, #9
 800be4c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be4e:	e0d0      	b.n	800bff2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800be56:	f003 0320 	and.w	r3, r3, #32
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d016      	beq.n	800be8c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800be5e:	2101      	movs	r1, #1
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fc3c 	bl	800c6de <USBH_SetFeature>
 800be66:	4603      	mov	r3, r0
 800be68:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800be6a:	7bbb      	ldrb	r3, [r7, #14]
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d103      	bne.n	800be7a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	220a      	movs	r2, #10
 800be76:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be78:	e0bd      	b.n	800bff6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800be7a:	7bbb      	ldrb	r3, [r7, #14]
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	2b03      	cmp	r3, #3
 800be80:	f040 80b9 	bne.w	800bff6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	220a      	movs	r2, #10
 800be88:	701a      	strb	r2, [r3, #0]
      break;
 800be8a:	e0b4      	b.n	800bff6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	220a      	movs	r2, #10
 800be90:	701a      	strb	r2, [r3, #0]
      break;
 800be92:	e0b0      	b.n	800bff6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f000 80ad 	beq.w	800bffa <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bea8:	2300      	movs	r3, #0
 800beaa:	73fb      	strb	r3, [r7, #15]
 800beac:	e016      	b.n	800bedc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800beae:	7bfa      	ldrb	r2, [r7, #15]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	32de      	adds	r2, #222	; 0xde
 800beb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb8:	791a      	ldrb	r2, [r3, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d108      	bne.n	800bed6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bec4:	7bfa      	ldrb	r2, [r7, #15]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	32de      	adds	r2, #222	; 0xde
 800beca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bed4:	e005      	b.n	800bee2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bed6:	7bfb      	ldrb	r3, [r7, #15]
 800bed8:	3301      	adds	r3, #1
 800beda:	73fb      	strb	r3, [r7, #15]
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d0e5      	beq.n	800beae <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d016      	beq.n	800bf1a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	4798      	blx	r3
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d109      	bne.n	800bf12 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2206      	movs	r2, #6
 800bf02:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf0a:	2103      	movs	r1, #3
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf10:	e073      	b.n	800bffa <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	220d      	movs	r2, #13
 800bf16:	701a      	strb	r2, [r3, #0]
      break;
 800bf18:	e06f      	b.n	800bffa <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	220d      	movs	r2, #13
 800bf1e:	701a      	strb	r2, [r3, #0]
      break;
 800bf20:	e06b      	b.n	800bffa <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d017      	beq.n	800bf5c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	4798      	blx	r3
 800bf38:	4603      	mov	r3, r0
 800bf3a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bf3c:	7bbb      	ldrb	r3, [r7, #14]
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d103      	bne.n	800bf4c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	220b      	movs	r2, #11
 800bf48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf4a:	e058      	b.n	800bffe <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800bf4c:	7bbb      	ldrb	r3, [r7, #14]
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d154      	bne.n	800bffe <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	220d      	movs	r2, #13
 800bf58:	701a      	strb	r2, [r3, #0]
      break;
 800bf5a:	e050      	b.n	800bffe <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	220d      	movs	r2, #13
 800bf60:	701a      	strb	r2, [r3, #0]
      break;
 800bf62:	e04c      	b.n	800bffe <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d049      	beq.n	800c002 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	4798      	blx	r3
      }
      break;
 800bf7a:	e042      	b.n	800c002 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff fd67 	bl	800ba58 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d009      	beq.n	800bfa8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d005      	beq.n	800bfbe <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfb8:	2105      	movs	r1, #5
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d107      	bne.n	800bfda <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff fe20 	bl	800bc18 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bfd8:	e014      	b.n	800c004 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f004 fd96 	bl	8010b0c <USBH_LL_Start>
      break;
 800bfe0:	e010      	b.n	800c004 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800bfe2:	bf00      	nop
 800bfe4:	e00e      	b.n	800c004 <USBH_Process+0x3cc>
      break;
 800bfe6:	bf00      	nop
 800bfe8:	e00c      	b.n	800c004 <USBH_Process+0x3cc>
      break;
 800bfea:	bf00      	nop
 800bfec:	e00a      	b.n	800c004 <USBH_Process+0x3cc>
    break;
 800bfee:	bf00      	nop
 800bff0:	e008      	b.n	800c004 <USBH_Process+0x3cc>
      break;
 800bff2:	bf00      	nop
 800bff4:	e006      	b.n	800c004 <USBH_Process+0x3cc>
      break;
 800bff6:	bf00      	nop
 800bff8:	e004      	b.n	800c004 <USBH_Process+0x3cc>
      break;
 800bffa:	bf00      	nop
 800bffc:	e002      	b.n	800c004 <USBH_Process+0x3cc>
      break;
 800bffe:	bf00      	nop
 800c000:	e000      	b.n	800c004 <USBH_Process+0x3cc>
      break;
 800c002:	bf00      	nop
  }
  return USBH_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop

0800c010 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b088      	sub	sp, #32
 800c014:	af04      	add	r7, sp, #16
 800c016:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c018:	2301      	movs	r3, #1
 800c01a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c01c:	2301      	movs	r3, #1
 800c01e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	785b      	ldrb	r3, [r3, #1]
 800c024:	2b07      	cmp	r3, #7
 800c026:	f200 81c1 	bhi.w	800c3ac <USBH_HandleEnum+0x39c>
 800c02a:	a201      	add	r2, pc, #4	; (adr r2, 800c030 <USBH_HandleEnum+0x20>)
 800c02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c030:	0800c051 	.word	0x0800c051
 800c034:	0800c10f 	.word	0x0800c10f
 800c038:	0800c179 	.word	0x0800c179
 800c03c:	0800c207 	.word	0x0800c207
 800c040:	0800c271 	.word	0x0800c271
 800c044:	0800c2e1 	.word	0x0800c2e1
 800c048:	0800c327 	.word	0x0800c327
 800c04c:	0800c36d 	.word	0x0800c36d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c050:	2108      	movs	r1, #8
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fa50 	bl	800c4f8 <USBH_Get_DevDesc>
 800c058:	4603      	mov	r3, r0
 800c05a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d130      	bne.n	800c0c4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	7919      	ldrb	r1, [r3, #4]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c086:	b292      	uxth	r2, r2
 800c088:	9202      	str	r2, [sp, #8]
 800c08a:	2200      	movs	r2, #0
 800c08c:	9201      	str	r2, [sp, #4]
 800c08e:	9300      	str	r3, [sp, #0]
 800c090:	4603      	mov	r3, r0
 800c092:	2280      	movs	r2, #128	; 0x80
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f001 f867 	bl	800d168 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	7959      	ldrb	r1, [r3, #5]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c0ae:	b292      	uxth	r2, r2
 800c0b0:	9202      	str	r2, [sp, #8]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	9201      	str	r2, [sp, #4]
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f001 f853 	bl	800d168 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c0c2:	e175      	b.n	800c3b0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0c4:	7bbb      	ldrb	r3, [r7, #14]
 800c0c6:	2b03      	cmp	r3, #3
 800c0c8:	f040 8172 	bne.w	800c3b0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0e2:	2b03      	cmp	r3, #3
 800c0e4:	d903      	bls.n	800c0ee <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	220d      	movs	r2, #13
 800c0ea:	701a      	strb	r2, [r3, #0]
      break;
 800c0ec:	e160      	b.n	800c3b0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	795b      	ldrb	r3, [r3, #5]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f001 f887 	bl	800d208 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	791b      	ldrb	r3, [r3, #4]
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f001 f881 	bl	800d208 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	701a      	strb	r2, [r3, #0]
      break;
 800c10c:	e150      	b.n	800c3b0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c10e:	2112      	movs	r1, #18
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f9f1 	bl	800c4f8 <USBH_Get_DevDesc>
 800c116:	4603      	mov	r3, r0
 800c118:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c11a:	7bbb      	ldrb	r3, [r7, #14]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d103      	bne.n	800c128 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2202      	movs	r2, #2
 800c124:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c126:	e145      	b.n	800c3b4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	2b03      	cmp	r3, #3
 800c12c:	f040 8142 	bne.w	800c3b4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c136:	3301      	adds	r3, #1
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c146:	2b03      	cmp	r3, #3
 800c148:	d903      	bls.n	800c152 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	220d      	movs	r2, #13
 800c14e:	701a      	strb	r2, [r3, #0]
      break;
 800c150:	e130      	b.n	800c3b4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	795b      	ldrb	r3, [r3, #5]
 800c156:	4619      	mov	r1, r3
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f001 f855 	bl	800d208 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	791b      	ldrb	r3, [r3, #4]
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f001 f84f 	bl	800d208 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	701a      	strb	r2, [r3, #0]
      break;
 800c176:	e11d      	b.n	800c3b4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c178:	2101      	movs	r1, #1
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fa68 	bl	800c650 <USBH_SetAddress>
 800c180:	4603      	mov	r3, r0
 800c182:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c184:	7bbb      	ldrb	r3, [r7, #14]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d132      	bne.n	800c1f0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c18a:	2002      	movs	r0, #2
 800c18c:	f004 fe52 	bl	8010e34 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2203      	movs	r2, #3
 800c19c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	7919      	ldrb	r1, [r3, #4]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c1b2:	b292      	uxth	r2, r2
 800c1b4:	9202      	str	r2, [sp, #8]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	9201      	str	r2, [sp, #4]
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2280      	movs	r2, #128	; 0x80
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 ffd1 	bl	800d168 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	7959      	ldrb	r1, [r3, #5]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1da:	b292      	uxth	r2, r2
 800c1dc:	9202      	str	r2, [sp, #8]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	9201      	str	r2, [sp, #4]
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 ffbd 	bl	800d168 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c1ee:	e0e3      	b.n	800c3b8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	2b03      	cmp	r3, #3
 800c1f4:	f040 80e0 	bne.w	800c3b8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	220d      	movs	r2, #13
 800c1fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	705a      	strb	r2, [r3, #1]
      break;
 800c204:	e0d8      	b.n	800c3b8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c206:	2109      	movs	r1, #9
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 f99d 	bl	800c548 <USBH_Get_CfgDesc>
 800c20e:	4603      	mov	r3, r0
 800c210:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d103      	bne.n	800c220 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2204      	movs	r2, #4
 800c21c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c21e:	e0cd      	b.n	800c3bc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	2b03      	cmp	r3, #3
 800c224:	f040 80ca 	bne.w	800c3bc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c22e:	3301      	adds	r3, #1
 800c230:	b2da      	uxtb	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c23e:	2b03      	cmp	r3, #3
 800c240:	d903      	bls.n	800c24a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	220d      	movs	r2, #13
 800c246:	701a      	strb	r2, [r3, #0]
      break;
 800c248:	e0b8      	b.n	800c3bc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	795b      	ldrb	r3, [r3, #5]
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 ffd9 	bl	800d208 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	791b      	ldrb	r3, [r3, #4]
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 ffd3 	bl	800d208 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	701a      	strb	r2, [r3, #0]
      break;
 800c26e:	e0a5      	b.n	800c3bc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f965 	bl	800c548 <USBH_Get_CfgDesc>
 800c27e:	4603      	mov	r3, r0
 800c280:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c282:	7bbb      	ldrb	r3, [r7, #14]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d103      	bne.n	800c290 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2205      	movs	r2, #5
 800c28c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c28e:	e097      	b.n	800c3c0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	2b03      	cmp	r3, #3
 800c294:	f040 8094 	bne.w	800c3c0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c29e:	3301      	adds	r3, #1
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d903      	bls.n	800c2ba <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	220d      	movs	r2, #13
 800c2b6:	701a      	strb	r2, [r3, #0]
      break;
 800c2b8:	e082      	b.n	800c3c0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	795b      	ldrb	r3, [r3, #5]
 800c2be:	4619      	mov	r1, r3
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 ffa1 	bl	800d208 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	791b      	ldrb	r3, [r3, #4]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 ff9b 	bl	800d208 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	701a      	strb	r2, [r3, #0]
      break;
 800c2de:	e06f      	b.n	800c3c0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d019      	beq.n	800c31e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c2f6:	23ff      	movs	r3, #255	; 0xff
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 f949 	bl	800c590 <USBH_Get_StringDesc>
 800c2fe:	4603      	mov	r3, r0
 800c300:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c302:	7bbb      	ldrb	r3, [r7, #14]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d103      	bne.n	800c310 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2206      	movs	r2, #6
 800c30c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c30e:	e059      	b.n	800c3c4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c310:	7bbb      	ldrb	r3, [r7, #14]
 800c312:	2b03      	cmp	r3, #3
 800c314:	d156      	bne.n	800c3c4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2206      	movs	r2, #6
 800c31a:	705a      	strb	r2, [r3, #1]
      break;
 800c31c:	e052      	b.n	800c3c4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2206      	movs	r2, #6
 800c322:	705a      	strb	r2, [r3, #1]
      break;
 800c324:	e04e      	b.n	800c3c4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d019      	beq.n	800c364 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c33c:	23ff      	movs	r3, #255	; 0xff
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f926 	bl	800c590 <USBH_Get_StringDesc>
 800c344:	4603      	mov	r3, r0
 800c346:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c348:	7bbb      	ldrb	r3, [r7, #14]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d103      	bne.n	800c356 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2207      	movs	r2, #7
 800c352:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c354:	e038      	b.n	800c3c8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c356:	7bbb      	ldrb	r3, [r7, #14]
 800c358:	2b03      	cmp	r3, #3
 800c35a:	d135      	bne.n	800c3c8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2207      	movs	r2, #7
 800c360:	705a      	strb	r2, [r3, #1]
      break;
 800c362:	e031      	b.n	800c3c8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2207      	movs	r2, #7
 800c368:	705a      	strb	r2, [r3, #1]
      break;
 800c36a:	e02d      	b.n	800c3c8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c372:	2b00      	cmp	r3, #0
 800c374:	d017      	beq.n	800c3a6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c382:	23ff      	movs	r3, #255	; 0xff
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f903 	bl	800c590 <USBH_Get_StringDesc>
 800c38a:	4603      	mov	r3, r0
 800c38c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c38e:	7bbb      	ldrb	r3, [r7, #14]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c394:	2300      	movs	r3, #0
 800c396:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c398:	e018      	b.n	800c3cc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c39a:	7bbb      	ldrb	r3, [r7, #14]
 800c39c:	2b03      	cmp	r3, #3
 800c39e:	d115      	bne.n	800c3cc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c3a4:	e012      	b.n	800c3cc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c3aa:	e00f      	b.n	800c3cc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c3ac:	bf00      	nop
 800c3ae:	e00e      	b.n	800c3ce <USBH_HandleEnum+0x3be>
      break;
 800c3b0:	bf00      	nop
 800c3b2:	e00c      	b.n	800c3ce <USBH_HandleEnum+0x3be>
      break;
 800c3b4:	bf00      	nop
 800c3b6:	e00a      	b.n	800c3ce <USBH_HandleEnum+0x3be>
      break;
 800c3b8:	bf00      	nop
 800c3ba:	e008      	b.n	800c3ce <USBH_HandleEnum+0x3be>
      break;
 800c3bc:	bf00      	nop
 800c3be:	e006      	b.n	800c3ce <USBH_HandleEnum+0x3be>
      break;
 800c3c0:	bf00      	nop
 800c3c2:	e004      	b.n	800c3ce <USBH_HandleEnum+0x3be>
      break;
 800c3c4:	bf00      	nop
 800c3c6:	e002      	b.n	800c3ce <USBH_HandleEnum+0x3be>
      break;
 800c3c8:	bf00      	nop
 800c3ca:	e000      	b.n	800c3ce <USBH_HandleEnum+0x3be>
      break;
 800c3cc:	bf00      	nop
  }
  return Status;
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	683a      	ldr	r2, [r7, #0]
 800c3e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c3ea:	bf00      	nop
 800c3ec:	370c      	adds	r7, #12
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr

0800c3f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 f804 	bl	800c41a <USBH_HandleSof>
}
 800c412:	bf00      	nop
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b082      	sub	sp, #8
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	2b0b      	cmp	r3, #11
 800c42a:	d10a      	bne.n	800c442 <USBH_HandleSof+0x28>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c432:	2b00      	cmp	r3, #0
 800c434:	d005      	beq.n	800c442 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	4798      	blx	r3
  }
}
 800c442:	bf00      	nop
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c44a:	b480      	push	{r7}
 800c44c:	b083      	sub	sp, #12
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2201      	movs	r2, #1
 800c456:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c45a:	bf00      	nop
}
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c466:	b480      	push	{r7}
 800c468:	b083      	sub	sp, #12
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c476:	bf00      	nop
}
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c482:	b480      	push	{r7}
 800c484:	b083      	sub	sp, #12
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f004 fb36 	bl	8010b42 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	791b      	ldrb	r3, [r3, #4]
 800c4da:	4619      	mov	r1, r3
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fe93 	bl	800d208 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	795b      	ldrb	r3, [r3, #5]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 fe8d 	bl	800d208 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c4ee:	2300      	movs	r3, #0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af02      	add	r7, sp, #8
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	460b      	mov	r3, r1
 800c502:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c50a:	78fb      	ldrb	r3, [r7, #3]
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	4613      	mov	r3, r2
 800c512:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c516:	2100      	movs	r1, #0
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f864 	bl	800c5e6 <USBH_GetDescriptor>
 800c51e:	4603      	mov	r3, r0
 800c520:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c522:	7bfb      	ldrb	r3, [r7, #15]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10a      	bne.n	800c53e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c534:	78fa      	ldrb	r2, [r7, #3]
 800c536:	b292      	uxth	r2, r2
 800c538:	4619      	mov	r1, r3
 800c53a:	f000 f919 	bl	800c770 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af02      	add	r7, sp, #8
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	331c      	adds	r3, #28
 800c558:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c55a:	887b      	ldrh	r3, [r7, #2]
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c564:	2100      	movs	r1, #0
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 f83d 	bl	800c5e6 <USBH_GetDescriptor>
 800c56c:	4603      	mov	r3, r0
 800c56e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c570:	7bfb      	ldrb	r3, [r7, #15]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d107      	bne.n	800c586 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c576:	887b      	ldrh	r3, [r7, #2]
 800c578:	461a      	mov	r2, r3
 800c57a:	68b9      	ldr	r1, [r7, #8]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f989 	bl	800c894 <USBH_ParseCfgDesc>
 800c582:	4603      	mov	r3, r0
 800c584:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c586:	7bfb      	ldrb	r3, [r7, #15]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b088      	sub	sp, #32
 800c594:	af02      	add	r7, sp, #8
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	607a      	str	r2, [r7, #4]
 800c59a:	461a      	mov	r2, r3
 800c59c:	460b      	mov	r3, r1
 800c59e:	72fb      	strb	r3, [r7, #11]
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c5a4:	7afb      	ldrb	r3, [r7, #11]
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c5ac:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c5b4:	893b      	ldrh	r3, [r7, #8]
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f000 f812 	bl	800c5e6 <USBH_GetDescriptor>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c5c6:	7dfb      	ldrb	r3, [r7, #23]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d107      	bne.n	800c5dc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c5d2:	893a      	ldrh	r2, [r7, #8]
 800c5d4:	6879      	ldr	r1, [r7, #4]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f000 fb26 	bl	800cc28 <USBH_ParseStringDesc>
  }

  return status;
 800c5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3718      	adds	r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	60f8      	str	r0, [r7, #12]
 800c5ee:	607b      	str	r3, [r7, #4]
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	72fb      	strb	r3, [r7, #11]
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	789b      	ldrb	r3, [r3, #2]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d11c      	bne.n	800c63a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c600:	7afb      	ldrb	r3, [r7, #11]
 800c602:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c606:	b2da      	uxtb	r2, r3
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2206      	movs	r2, #6
 800c610:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	893a      	ldrh	r2, [r7, #8]
 800c616:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c618:	893b      	ldrh	r3, [r7, #8]
 800c61a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c61e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c622:	d104      	bne.n	800c62e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f240 4209 	movw	r2, #1033	; 0x409
 800c62a:	829a      	strh	r2, [r3, #20]
 800c62c:	e002      	b.n	800c634 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	8b3a      	ldrh	r2, [r7, #24]
 800c638:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c63a:	8b3b      	ldrh	r3, [r7, #24]
 800c63c:	461a      	mov	r2, r3
 800c63e:	6879      	ldr	r1, [r7, #4]
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f000 fb3f 	bl	800ccc4 <USBH_CtlReq>
 800c646:	4603      	mov	r3, r0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	460b      	mov	r3, r1
 800c65a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	789b      	ldrb	r3, [r3, #2]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d10f      	bne.n	800c684 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2205      	movs	r2, #5
 800c66e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c670:	78fb      	ldrb	r3, [r7, #3]
 800c672:	b29a      	uxth	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c684:	2200      	movs	r2, #0
 800c686:	2100      	movs	r1, #0
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fb1b 	bl	800ccc4 <USBH_CtlReq>
 800c68e:	4603      	mov	r3, r0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	789b      	ldrb	r3, [r3, #2]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d10e      	bne.n	800c6ca <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2209      	movs	r2, #9
 800c6b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	887a      	ldrh	r2, [r7, #2]
 800c6bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 faf8 	bl	800ccc4 <USBH_CtlReq>
 800c6d4:	4603      	mov	r3, r0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b082      	sub	sp, #8
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	789b      	ldrb	r3, [r3, #2]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d10f      	bne.n	800c712 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2203      	movs	r2, #3
 800c6fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c6fe:	78fb      	ldrb	r3, [r7, #3]
 800c700:	b29a      	uxth	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c712:	2200      	movs	r2, #0
 800c714:	2100      	movs	r1, #0
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fad4 	bl	800ccc4 <USBH_CtlReq>
 800c71c:	4603      	mov	r3, r0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	460b      	mov	r3, r1
 800c730:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	789b      	ldrb	r3, [r3, #2]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d10f      	bne.n	800c75a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2202      	movs	r2, #2
 800c73e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c74c:	78fb      	ldrb	r3, [r7, #3]
 800c74e:	b29a      	uxth	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c75a:	2200      	movs	r2, #0
 800c75c:	2100      	movs	r1, #0
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 fab0 	bl	800ccc4 <USBH_CtlReq>
 800c764:	4603      	mov	r3, r0
}
 800c766:	4618      	mov	r0, r3
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
	...

0800c770 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	4613      	mov	r3, r2
 800c77c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	781a      	ldrb	r2, [r3, #0]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	785a      	ldrb	r2, [r3, #1]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	3302      	adds	r3, #2
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	b29a      	uxth	r2, r3
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	3303      	adds	r3, #3
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	021b      	lsls	r3, r3, #8
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	791a      	ldrb	r2, [r3, #4]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	795a      	ldrb	r2, [r3, #5]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	799a      	ldrb	r2, [r3, #6]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	79da      	ldrb	r2, [r3, #7]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	79db      	ldrb	r3, [r3, #7]
 800c7ce:	2b20      	cmp	r3, #32
 800c7d0:	dc0f      	bgt.n	800c7f2 <USBH_ParseDevDesc+0x82>
 800c7d2:	2b08      	cmp	r3, #8
 800c7d4:	db14      	blt.n	800c800 <USBH_ParseDevDesc+0x90>
 800c7d6:	3b08      	subs	r3, #8
 800c7d8:	4a2d      	ldr	r2, [pc, #180]	; (800c890 <USBH_ParseDevDesc+0x120>)
 800c7da:	fa22 f303 	lsr.w	r3, r2, r3
 800c7de:	f003 0301 	and.w	r3, r3, #1
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	bf14      	ite	ne
 800c7e6:	2301      	movne	r3, #1
 800c7e8:	2300      	moveq	r3, #0
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d102      	bne.n	800c7f6 <USBH_ParseDevDesc+0x86>
 800c7f0:	e006      	b.n	800c800 <USBH_ParseDevDesc+0x90>
 800c7f2:	2b40      	cmp	r3, #64	; 0x40
 800c7f4:	d104      	bne.n	800c800 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	79da      	ldrb	r2, [r3, #7]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	71da      	strb	r2, [r3, #7]
      break;
 800c7fe:	e003      	b.n	800c808 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2240      	movs	r2, #64	; 0x40
 800c804:	71da      	strb	r2, [r3, #7]
      break;
 800c806:	bf00      	nop
  }

  if (length > 8U)
 800c808:	88fb      	ldrh	r3, [r7, #6]
 800c80a:	2b08      	cmp	r3, #8
 800c80c:	d939      	bls.n	800c882 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	3308      	adds	r3, #8
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	b29a      	uxth	r2, r3
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	3309      	adds	r3, #9
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	021b      	lsls	r3, r3, #8
 800c820:	b29b      	uxth	r3, r3
 800c822:	4313      	orrs	r3, r2
 800c824:	b29a      	uxth	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	330a      	adds	r3, #10
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	b29a      	uxth	r2, r3
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	330b      	adds	r3, #11
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	b29b      	uxth	r3, r3
 800c83a:	021b      	lsls	r3, r3, #8
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	4313      	orrs	r3, r2
 800c840:	b29a      	uxth	r2, r3
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	330c      	adds	r3, #12
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	330d      	adds	r3, #13
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	b29b      	uxth	r3, r3
 800c856:	021b      	lsls	r3, r3, #8
 800c858:	b29b      	uxth	r3, r3
 800c85a:	4313      	orrs	r3, r2
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	7b9a      	ldrb	r2, [r3, #14]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	7bda      	ldrb	r2, [r3, #15]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	7c1a      	ldrb	r2, [r3, #16]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	7c5a      	ldrb	r2, [r3, #17]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	745a      	strb	r2, [r3, #17]
  }
}
 800c882:	bf00      	nop
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	01000101 	.word	0x01000101

0800c894 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b08c      	sub	sp, #48	; 0x30
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c8a8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	781a      	ldrb	r2, [r3, #0]
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	785a      	ldrb	r2, [r3, #1]
 800c8d0:	6a3b      	ldr	r3, [r7, #32]
 800c8d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	3302      	adds	r3, #2
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	3303      	adds	r3, #3
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	021b      	lsls	r3, r3, #8
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8f0:	bf28      	it	cs
 800c8f2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	791a      	ldrb	r2, [r3, #4]
 800c900:	6a3b      	ldr	r3, [r7, #32]
 800c902:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	795a      	ldrb	r2, [r3, #5]
 800c908:	6a3b      	ldr	r3, [r7, #32]
 800c90a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	799a      	ldrb	r2, [r3, #6]
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	79da      	ldrb	r2, [r3, #7]
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	7a1a      	ldrb	r2, [r3, #8]
 800c920:	6a3b      	ldr	r3, [r7, #32]
 800c922:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c924:	6a3b      	ldr	r3, [r7, #32]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	2b09      	cmp	r3, #9
 800c92a:	d002      	beq.n	800c932 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c92c:	6a3b      	ldr	r3, [r7, #32]
 800c92e:	2209      	movs	r2, #9
 800c930:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c932:	88fb      	ldrh	r3, [r7, #6]
 800c934:	2b09      	cmp	r3, #9
 800c936:	f240 809d 	bls.w	800ca74 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c93a:	2309      	movs	r3, #9
 800c93c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c93e:	2300      	movs	r3, #0
 800c940:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c942:	e081      	b.n	800ca48 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c944:	f107 0316 	add.w	r3, r7, #22
 800c948:	4619      	mov	r1, r3
 800c94a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c94c:	f000 f99f 	bl	800cc8e <USBH_GetNextDesc>
 800c950:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	785b      	ldrb	r3, [r3, #1]
 800c956:	2b04      	cmp	r3, #4
 800c958:	d176      	bne.n	800ca48 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	2b09      	cmp	r3, #9
 800c960:	d002      	beq.n	800c968 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	2209      	movs	r2, #9
 800c966:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c96c:	221a      	movs	r2, #26
 800c96e:	fb02 f303 	mul.w	r3, r2, r3
 800c972:	3308      	adds	r3, #8
 800c974:	6a3a      	ldr	r2, [r7, #32]
 800c976:	4413      	add	r3, r2
 800c978:	3302      	adds	r3, #2
 800c97a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c97c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c97e:	69f8      	ldr	r0, [r7, #28]
 800c980:	f000 f87e 	bl	800ca80 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c984:	2300      	movs	r3, #0
 800c986:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c98e:	e043      	b.n	800ca18 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c990:	f107 0316 	add.w	r3, r7, #22
 800c994:	4619      	mov	r1, r3
 800c996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c998:	f000 f979 	bl	800cc8e <USBH_GetNextDesc>
 800c99c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a0:	785b      	ldrb	r3, [r3, #1]
 800c9a2:	2b05      	cmp	r3, #5
 800c9a4:	d138      	bne.n	800ca18 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	795b      	ldrb	r3, [r3, #5]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d10f      	bne.n	800c9ce <USBH_ParseCfgDesc+0x13a>
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	799b      	ldrb	r3, [r3, #6]
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d10b      	bne.n	800c9ce <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	79db      	ldrb	r3, [r3, #7]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10f      	bne.n	800c9de <USBH_ParseCfgDesc+0x14a>
 800c9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b09      	cmp	r3, #9
 800c9c4:	d00b      	beq.n	800c9de <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c8:	2209      	movs	r2, #9
 800c9ca:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c9cc:	e007      	b.n	800c9de <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	2b07      	cmp	r3, #7
 800c9d4:	d004      	beq.n	800c9e0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d8:	2207      	movs	r2, #7
 800c9da:	701a      	strb	r2, [r3, #0]
 800c9dc:	e000      	b.n	800c9e0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c9de:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c9e8:	3201      	adds	r2, #1
 800c9ea:	00d2      	lsls	r2, r2, #3
 800c9ec:	211a      	movs	r1, #26
 800c9ee:	fb01 f303 	mul.w	r3, r1, r3
 800c9f2:	4413      	add	r3, r2
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	6a3a      	ldr	r2, [r7, #32]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c9fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca00:	69b9      	ldr	r1, [r7, #24]
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f000 f86b 	bl	800cade <USBH_ParseEPDesc>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ca0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca12:	3301      	adds	r3, #1
 800ca14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	791b      	ldrb	r3, [r3, #4]
 800ca1c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d204      	bcs.n	800ca2e <USBH_ParseCfgDesc+0x19a>
 800ca24:	6a3b      	ldr	r3, [r7, #32]
 800ca26:	885a      	ldrh	r2, [r3, #2]
 800ca28:	8afb      	ldrh	r3, [r7, #22]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d8b0      	bhi.n	800c990 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	791b      	ldrb	r3, [r3, #4]
 800ca32:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d201      	bcs.n	800ca3e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ca3a:	2303      	movs	r3, #3
 800ca3c:	e01c      	b.n	800ca78 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ca3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca42:	3301      	adds	r3, #1
 800ca44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d805      	bhi.n	800ca5c <USBH_ParseCfgDesc+0x1c8>
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	885a      	ldrh	r2, [r3, #2]
 800ca54:	8afb      	ldrh	r3, [r7, #22]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	f63f af74 	bhi.w	800c944 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ca5c:	6a3b      	ldr	r3, [r7, #32]
 800ca5e:	791b      	ldrb	r3, [r3, #4]
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	bf28      	it	cs
 800ca64:	2302      	movcs	r3, #2
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d201      	bcs.n	800ca74 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ca70:	2303      	movs	r3, #3
 800ca72:	e001      	b.n	800ca78 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ca74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3730      	adds	r7, #48	; 0x30
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	781a      	ldrb	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	785a      	ldrb	r2, [r3, #1]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	789a      	ldrb	r2, [r3, #2]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	78da      	ldrb	r2, [r3, #3]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	791a      	ldrb	r2, [r3, #4]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	795a      	ldrb	r2, [r3, #5]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	799a      	ldrb	r2, [r3, #6]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	79da      	ldrb	r2, [r3, #7]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	7a1a      	ldrb	r2, [r3, #8]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	721a      	strb	r2, [r3, #8]
}
 800cad2:	bf00      	nop
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800cade:	b480      	push	{r7}
 800cae0:	b087      	sub	sp, #28
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	60f8      	str	r0, [r7, #12]
 800cae6:	60b9      	str	r1, [r7, #8]
 800cae8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800caea:	2300      	movs	r3, #0
 800caec:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	781a      	ldrb	r2, [r3, #0]
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	785a      	ldrb	r2, [r3, #1]
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	789a      	ldrb	r2, [r3, #2]
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	78da      	ldrb	r2, [r3, #3]
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	3304      	adds	r3, #4
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3305      	adds	r3, #5
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	021b      	lsls	r3, r3, #8
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	4313      	orrs	r3, r2
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	799a      	ldrb	r2, [r3, #6]
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	889b      	ldrh	r3, [r3, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d102      	bne.n	800cb40 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	75fb      	strb	r3, [r7, #23]
 800cb3e:	e033      	b.n	800cba8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	889b      	ldrh	r3, [r3, #4]
 800cb44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cb48:	f023 0307 	bic.w	r3, r3, #7
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	889b      	ldrh	r3, [r3, #4]
 800cb56:	b21a      	sxth	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	b299      	uxth	r1, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	3305      	adds	r3, #5
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	021b      	lsls	r3, r3, #8
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	430b      	orrs	r3, r1
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d110      	bne.n	800cb9a <USBH_ParseEPDesc+0xbc>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	b299      	uxth	r1, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3305      	adds	r3, #5
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	021b      	lsls	r3, r3, #8
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	430b      	orrs	r3, r1
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	b21b      	sxth	r3, r3
 800cb92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb96:	b21b      	sxth	r3, r3
 800cb98:	e001      	b.n	800cb9e <USBH_ParseEPDesc+0xc0>
 800cb9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	b21b      	sxth	r3, r3
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d116      	bne.n	800cbe0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	78db      	ldrb	r3, [r3, #3]
 800cbb6:	f003 0303 	and.w	r3, r3, #3
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d005      	beq.n	800cbca <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	78db      	ldrb	r3, [r3, #3]
 800cbc2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cbc6:	2b03      	cmp	r3, #3
 800cbc8:	d127      	bne.n	800cc1a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	799b      	ldrb	r3, [r3, #6]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d003      	beq.n	800cbda <USBH_ParseEPDesc+0xfc>
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	799b      	ldrb	r3, [r3, #6]
 800cbd6:	2b10      	cmp	r3, #16
 800cbd8:	d91f      	bls.n	800cc1a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cbda:	2303      	movs	r3, #3
 800cbdc:	75fb      	strb	r3, [r7, #23]
 800cbde:	e01c      	b.n	800cc1a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	78db      	ldrb	r3, [r3, #3]
 800cbe4:	f003 0303 	and.w	r3, r3, #3
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d10a      	bne.n	800cc02 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	799b      	ldrb	r3, [r3, #6]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d003      	beq.n	800cbfc <USBH_ParseEPDesc+0x11e>
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	799b      	ldrb	r3, [r3, #6]
 800cbf8:	2b10      	cmp	r3, #16
 800cbfa:	d90e      	bls.n	800cc1a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cbfc:	2303      	movs	r3, #3
 800cbfe:	75fb      	strb	r3, [r7, #23]
 800cc00:	e00b      	b.n	800cc1a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	78db      	ldrb	r3, [r3, #3]
 800cc06:	f003 0303 	and.w	r3, r3, #3
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	d105      	bne.n	800cc1a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	799b      	ldrb	r3, [r3, #6]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d101      	bne.n	800cc1a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cc16:	2303      	movs	r3, #3
 800cc18:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800cc1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	371c      	adds	r7, #28
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b087      	sub	sp, #28
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	4613      	mov	r3, r2
 800cc34:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	2b03      	cmp	r3, #3
 800cc3e:	d120      	bne.n	800cc82 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	1e9a      	subs	r2, r3, #2
 800cc46:	88fb      	ldrh	r3, [r7, #6]
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	bf28      	it	cs
 800cc4c:	4613      	movcs	r3, r2
 800cc4e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3302      	adds	r3, #2
 800cc54:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cc56:	2300      	movs	r3, #0
 800cc58:	82fb      	strh	r3, [r7, #22]
 800cc5a:	e00b      	b.n	800cc74 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cc5c:	8afb      	ldrh	r3, [r7, #22]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	4413      	add	r3, r2
 800cc62:	781a      	ldrb	r2, [r3, #0]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cc6e:	8afb      	ldrh	r3, [r7, #22]
 800cc70:	3302      	adds	r3, #2
 800cc72:	82fb      	strh	r3, [r7, #22]
 800cc74:	8afa      	ldrh	r2, [r7, #22]
 800cc76:	8abb      	ldrh	r3, [r7, #20]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d3ef      	bcc.n	800cc5c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	701a      	strb	r2, [r3, #0]
  }
}
 800cc82:	bf00      	nop
 800cc84:	371c      	adds	r7, #28
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr

0800cc8e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cc8e:	b480      	push	{r7}
 800cc90:	b085      	sub	sp, #20
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	881a      	ldrh	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	4413      	add	r3, r2
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3714      	adds	r7, #20
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	789b      	ldrb	r3, [r3, #2]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d002      	beq.n	800cce4 <USBH_CtlReq+0x20>
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d00f      	beq.n	800cd02 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cce2:	e027      	b.n	800cd34 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	68ba      	ldr	r2, [r7, #8]
 800cce8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	88fa      	ldrh	r2, [r7, #6]
 800ccee:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2202      	movs	r2, #2
 800ccfa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	75fb      	strb	r3, [r7, #23]
      break;
 800cd00:	e018      	b.n	800cd34 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800cd02:	68f8      	ldr	r0, [r7, #12]
 800cd04:	f000 f81c 	bl	800cd40 <USBH_HandleControl>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <USBH_CtlReq+0x54>
 800cd12:	7dfb      	ldrb	r3, [r7, #23]
 800cd14:	2b03      	cmp	r3, #3
 800cd16:	d106      	bne.n	800cd26 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2200      	movs	r2, #0
 800cd22:	761a      	strb	r2, [r3, #24]
      break;
 800cd24:	e005      	b.n	800cd32 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	d102      	bne.n	800cd32 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	709a      	strb	r2, [r3, #2]
      break;
 800cd32:	bf00      	nop
  }
  return status;
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
	...

0800cd40 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af02      	add	r7, sp, #8
 800cd46:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	7e1b      	ldrb	r3, [r3, #24]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	2b0a      	cmp	r3, #10
 800cd58:	f200 8156 	bhi.w	800d008 <USBH_HandleControl+0x2c8>
 800cd5c:	a201      	add	r2, pc, #4	; (adr r2, 800cd64 <USBH_HandleControl+0x24>)
 800cd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd62:	bf00      	nop
 800cd64:	0800cd91 	.word	0x0800cd91
 800cd68:	0800cdab 	.word	0x0800cdab
 800cd6c:	0800ce15 	.word	0x0800ce15
 800cd70:	0800ce3b 	.word	0x0800ce3b
 800cd74:	0800ce73 	.word	0x0800ce73
 800cd78:	0800ce9d 	.word	0x0800ce9d
 800cd7c:	0800ceef 	.word	0x0800ceef
 800cd80:	0800cf11 	.word	0x0800cf11
 800cd84:	0800cf4d 	.word	0x0800cf4d
 800cd88:	0800cf73 	.word	0x0800cf73
 800cd8c:	0800cfb1 	.word	0x0800cfb1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f103 0110 	add.w	r1, r3, #16
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	795b      	ldrb	r3, [r3, #5]
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 f943 	bl	800d028 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2202      	movs	r2, #2
 800cda6:	761a      	strb	r2, [r3, #24]
      break;
 800cda8:	e139      	b.n	800d01e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	795b      	ldrb	r3, [r3, #5]
 800cdae:	4619      	mov	r1, r3
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f003 ffb5 	bl	8010d20 <USBH_LL_GetURBState>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cdba:	7bbb      	ldrb	r3, [r7, #14]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d11e      	bne.n	800cdfe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	7c1b      	ldrb	r3, [r3, #16]
 800cdc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cdc8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	8adb      	ldrh	r3, [r3, #22]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00a      	beq.n	800cde8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cdd2:	7b7b      	ldrb	r3, [r7, #13]
 800cdd4:	2b80      	cmp	r3, #128	; 0x80
 800cdd6:	d103      	bne.n	800cde0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2203      	movs	r2, #3
 800cddc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cdde:	e115      	b.n	800d00c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2205      	movs	r2, #5
 800cde4:	761a      	strb	r2, [r3, #24]
      break;
 800cde6:	e111      	b.n	800d00c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cde8:	7b7b      	ldrb	r3, [r7, #13]
 800cdea:	2b80      	cmp	r3, #128	; 0x80
 800cdec:	d103      	bne.n	800cdf6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2209      	movs	r2, #9
 800cdf2:	761a      	strb	r2, [r3, #24]
      break;
 800cdf4:	e10a      	b.n	800d00c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2207      	movs	r2, #7
 800cdfa:	761a      	strb	r2, [r3, #24]
      break;
 800cdfc:	e106      	b.n	800d00c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cdfe:	7bbb      	ldrb	r3, [r7, #14]
 800ce00:	2b04      	cmp	r3, #4
 800ce02:	d003      	beq.n	800ce0c <USBH_HandleControl+0xcc>
 800ce04:	7bbb      	ldrb	r3, [r7, #14]
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	f040 8100 	bne.w	800d00c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	220b      	movs	r2, #11
 800ce10:	761a      	strb	r2, [r3, #24]
      break;
 800ce12:	e0fb      	b.n	800d00c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6899      	ldr	r1, [r3, #8]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	899a      	ldrh	r2, [r3, #12]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	791b      	ldrb	r3, [r3, #4]
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 f93a 	bl	800d0a6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2204      	movs	r2, #4
 800ce36:	761a      	strb	r2, [r3, #24]
      break;
 800ce38:	e0f1      	b.n	800d01e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	791b      	ldrb	r3, [r3, #4]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f003 ff6d 	bl	8010d20 <USBH_LL_GetURBState>
 800ce46:	4603      	mov	r3, r0
 800ce48:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ce4a:	7bbb      	ldrb	r3, [r7, #14]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d102      	bne.n	800ce56 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2209      	movs	r2, #9
 800ce54:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ce56:	7bbb      	ldrb	r3, [r7, #14]
 800ce58:	2b05      	cmp	r3, #5
 800ce5a:	d102      	bne.n	800ce62 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ce5c:	2303      	movs	r3, #3
 800ce5e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce60:	e0d6      	b.n	800d010 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ce62:	7bbb      	ldrb	r3, [r7, #14]
 800ce64:	2b04      	cmp	r3, #4
 800ce66:	f040 80d3 	bne.w	800d010 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	220b      	movs	r2, #11
 800ce6e:	761a      	strb	r2, [r3, #24]
      break;
 800ce70:	e0ce      	b.n	800d010 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6899      	ldr	r1, [r3, #8]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	899a      	ldrh	r2, [r3, #12]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	795b      	ldrb	r3, [r3, #5]
 800ce7e:	2001      	movs	r0, #1
 800ce80:	9000      	str	r0, [sp, #0]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 f8ea 	bl	800d05c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2206      	movs	r2, #6
 800ce98:	761a      	strb	r2, [r3, #24]
      break;
 800ce9a:	e0c0      	b.n	800d01e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	795b      	ldrb	r3, [r3, #5]
 800cea0:	4619      	mov	r1, r3
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f003 ff3c 	bl	8010d20 <USBH_LL_GetURBState>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ceac:	7bbb      	ldrb	r3, [r7, #14]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d103      	bne.n	800ceba <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2207      	movs	r2, #7
 800ceb6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ceb8:	e0ac      	b.n	800d014 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ceba:	7bbb      	ldrb	r3, [r7, #14]
 800cebc:	2b05      	cmp	r3, #5
 800cebe:	d105      	bne.n	800cecc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	220c      	movs	r2, #12
 800cec4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cec6:	2303      	movs	r3, #3
 800cec8:	73fb      	strb	r3, [r7, #15]
      break;
 800ceca:	e0a3      	b.n	800d014 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cecc:	7bbb      	ldrb	r3, [r7, #14]
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d103      	bne.n	800ceda <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2205      	movs	r2, #5
 800ced6:	761a      	strb	r2, [r3, #24]
      break;
 800ced8:	e09c      	b.n	800d014 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ceda:	7bbb      	ldrb	r3, [r7, #14]
 800cedc:	2b04      	cmp	r3, #4
 800cede:	f040 8099 	bne.w	800d014 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	220b      	movs	r2, #11
 800cee6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cee8:	2302      	movs	r3, #2
 800ceea:	73fb      	strb	r3, [r7, #15]
      break;
 800ceec:	e092      	b.n	800d014 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	791b      	ldrb	r3, [r3, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	2100      	movs	r1, #0
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f8d5 	bl	800d0a6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf02:	b29a      	uxth	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	761a      	strb	r2, [r3, #24]

      break;
 800cf0e:	e086      	b.n	800d01e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	791b      	ldrb	r3, [r3, #4]
 800cf14:	4619      	mov	r1, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f003 ff02 	bl	8010d20 <USBH_LL_GetURBState>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cf20:	7bbb      	ldrb	r3, [r7, #14]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d105      	bne.n	800cf32 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	220d      	movs	r2, #13
 800cf2a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf30:	e072      	b.n	800d018 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
 800cf34:	2b04      	cmp	r3, #4
 800cf36:	d103      	bne.n	800cf40 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	220b      	movs	r2, #11
 800cf3c:	761a      	strb	r2, [r3, #24]
      break;
 800cf3e:	e06b      	b.n	800d018 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cf40:	7bbb      	ldrb	r3, [r7, #14]
 800cf42:	2b05      	cmp	r3, #5
 800cf44:	d168      	bne.n	800d018 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cf46:	2303      	movs	r3, #3
 800cf48:	73fb      	strb	r3, [r7, #15]
      break;
 800cf4a:	e065      	b.n	800d018 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	795b      	ldrb	r3, [r3, #5]
 800cf50:	2201      	movs	r2, #1
 800cf52:	9200      	str	r2, [sp, #0]
 800cf54:	2200      	movs	r2, #0
 800cf56:	2100      	movs	r1, #0
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 f87f 	bl	800d05c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	220a      	movs	r2, #10
 800cf6e:	761a      	strb	r2, [r3, #24]
      break;
 800cf70:	e055      	b.n	800d01e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	795b      	ldrb	r3, [r3, #5]
 800cf76:	4619      	mov	r1, r3
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f003 fed1 	bl	8010d20 <USBH_LL_GetURBState>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cf82:	7bbb      	ldrb	r3, [r7, #14]
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d105      	bne.n	800cf94 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	220d      	movs	r2, #13
 800cf90:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf92:	e043      	b.n	800d01c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cf94:	7bbb      	ldrb	r3, [r7, #14]
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d103      	bne.n	800cfa2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2209      	movs	r2, #9
 800cf9e:	761a      	strb	r2, [r3, #24]
      break;
 800cfa0:	e03c      	b.n	800d01c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cfa2:	7bbb      	ldrb	r3, [r7, #14]
 800cfa4:	2b04      	cmp	r3, #4
 800cfa6:	d139      	bne.n	800d01c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	220b      	movs	r2, #11
 800cfac:	761a      	strb	r2, [r3, #24]
      break;
 800cfae:	e035      	b.n	800d01c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	7e5b      	ldrb	r3, [r3, #25]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	b2da      	uxtb	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	765a      	strb	r2, [r3, #25]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7e5b      	ldrb	r3, [r3, #25]
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d806      	bhi.n	800cfd2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cfd0:	e025      	b.n	800d01e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfd8:	2106      	movs	r1, #6
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	795b      	ldrb	r3, [r3, #5]
 800cfe8:	4619      	mov	r1, r3
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 f90c 	bl	800d208 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	791b      	ldrb	r3, [r3, #4]
 800cff4:	4619      	mov	r1, r3
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 f906 	bl	800d208 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d002:	2302      	movs	r3, #2
 800d004:	73fb      	strb	r3, [r7, #15]
      break;
 800d006:	e00a      	b.n	800d01e <USBH_HandleControl+0x2de>

    default:
      break;
 800d008:	bf00      	nop
 800d00a:	e008      	b.n	800d01e <USBH_HandleControl+0x2de>
      break;
 800d00c:	bf00      	nop
 800d00e:	e006      	b.n	800d01e <USBH_HandleControl+0x2de>
      break;
 800d010:	bf00      	nop
 800d012:	e004      	b.n	800d01e <USBH_HandleControl+0x2de>
      break;
 800d014:	bf00      	nop
 800d016:	e002      	b.n	800d01e <USBH_HandleControl+0x2de>
      break;
 800d018:	bf00      	nop
 800d01a:	e000      	b.n	800d01e <USBH_HandleControl+0x2de>
      break;
 800d01c:	bf00      	nop
  }

  return status;
 800d01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d020:	4618      	mov	r0, r3
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b088      	sub	sp, #32
 800d02c:	af04      	add	r7, sp, #16
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	4613      	mov	r3, r2
 800d034:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d036:	79f9      	ldrb	r1, [r7, #7]
 800d038:	2300      	movs	r3, #0
 800d03a:	9303      	str	r3, [sp, #12]
 800d03c:	2308      	movs	r3, #8
 800d03e:	9302      	str	r3, [sp, #8]
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	9301      	str	r3, [sp, #4]
 800d044:	2300      	movs	r3, #0
 800d046:	9300      	str	r3, [sp, #0]
 800d048:	2300      	movs	r3, #0
 800d04a:	2200      	movs	r2, #0
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f003 fe36 	bl	8010cbe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d052:	2300      	movs	r3, #0
}
 800d054:	4618      	mov	r0, r3
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b088      	sub	sp, #32
 800d060:	af04      	add	r7, sp, #16
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	4611      	mov	r1, r2
 800d068:	461a      	mov	r2, r3
 800d06a:	460b      	mov	r3, r1
 800d06c:	80fb      	strh	r3, [r7, #6]
 800d06e:	4613      	mov	r3, r2
 800d070:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d001      	beq.n	800d080 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d07c:	2300      	movs	r3, #0
 800d07e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d080:	7979      	ldrb	r1, [r7, #5]
 800d082:	7e3b      	ldrb	r3, [r7, #24]
 800d084:	9303      	str	r3, [sp, #12]
 800d086:	88fb      	ldrh	r3, [r7, #6]
 800d088:	9302      	str	r3, [sp, #8]
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	9301      	str	r3, [sp, #4]
 800d08e:	2301      	movs	r3, #1
 800d090:	9300      	str	r3, [sp, #0]
 800d092:	2300      	movs	r3, #0
 800d094:	2200      	movs	r2, #0
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f003 fe11 	bl	8010cbe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d09c:	2300      	movs	r3, #0
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b088      	sub	sp, #32
 800d0aa:	af04      	add	r7, sp, #16
 800d0ac:	60f8      	str	r0, [r7, #12]
 800d0ae:	60b9      	str	r1, [r7, #8]
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	80fb      	strh	r3, [r7, #6]
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d0bc:	7979      	ldrb	r1, [r7, #5]
 800d0be:	2300      	movs	r3, #0
 800d0c0:	9303      	str	r3, [sp, #12]
 800d0c2:	88fb      	ldrh	r3, [r7, #6]
 800d0c4:	9302      	str	r3, [sp, #8]
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	9301      	str	r3, [sp, #4]
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	9300      	str	r3, [sp, #0]
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f003 fdf3 	bl	8010cbe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d0d8:	2300      	movs	r3, #0

}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3710      	adds	r7, #16
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b088      	sub	sp, #32
 800d0e6:	af04      	add	r7, sp, #16
 800d0e8:	60f8      	str	r0, [r7, #12]
 800d0ea:	60b9      	str	r1, [r7, #8]
 800d0ec:	4611      	mov	r1, r2
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	80fb      	strh	r3, [r7, #6]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d001      	beq.n	800d106 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d102:	2300      	movs	r3, #0
 800d104:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d106:	7979      	ldrb	r1, [r7, #5]
 800d108:	7e3b      	ldrb	r3, [r7, #24]
 800d10a:	9303      	str	r3, [sp, #12]
 800d10c:	88fb      	ldrh	r3, [r7, #6]
 800d10e:	9302      	str	r3, [sp, #8]
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	9301      	str	r3, [sp, #4]
 800d114:	2301      	movs	r3, #1
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	2302      	movs	r3, #2
 800d11a:	2200      	movs	r2, #0
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f003 fdce 	bl	8010cbe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b088      	sub	sp, #32
 800d130:	af04      	add	r7, sp, #16
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	4611      	mov	r1, r2
 800d138:	461a      	mov	r2, r3
 800d13a:	460b      	mov	r3, r1
 800d13c:	80fb      	strh	r3, [r7, #6]
 800d13e:	4613      	mov	r3, r2
 800d140:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d142:	7979      	ldrb	r1, [r7, #5]
 800d144:	2300      	movs	r3, #0
 800d146:	9303      	str	r3, [sp, #12]
 800d148:	88fb      	ldrh	r3, [r7, #6]
 800d14a:	9302      	str	r3, [sp, #8]
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	9301      	str	r3, [sp, #4]
 800d150:	2301      	movs	r3, #1
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	2302      	movs	r3, #2
 800d156:	2201      	movs	r2, #1
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f003 fdb0 	bl	8010cbe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af04      	add	r7, sp, #16
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	4608      	mov	r0, r1
 800d172:	4611      	mov	r1, r2
 800d174:	461a      	mov	r2, r3
 800d176:	4603      	mov	r3, r0
 800d178:	70fb      	strb	r3, [r7, #3]
 800d17a:	460b      	mov	r3, r1
 800d17c:	70bb      	strb	r3, [r7, #2]
 800d17e:	4613      	mov	r3, r2
 800d180:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d182:	7878      	ldrb	r0, [r7, #1]
 800d184:	78ba      	ldrb	r2, [r7, #2]
 800d186:	78f9      	ldrb	r1, [r7, #3]
 800d188:	8b3b      	ldrh	r3, [r7, #24]
 800d18a:	9302      	str	r3, [sp, #8]
 800d18c:	7d3b      	ldrb	r3, [r7, #20]
 800d18e:	9301      	str	r3, [sp, #4]
 800d190:	7c3b      	ldrb	r3, [r7, #16]
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	4603      	mov	r3, r0
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f003 fd43 	bl	8010c22 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b082      	sub	sp, #8
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d1b2:	78fb      	ldrb	r3, [r7, #3]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f003 fd62 	bl	8010c80 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b084      	sub	sp, #16
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 f836 	bl	800d244 <USBH_GetFreePipe>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d1dc:	89fb      	ldrh	r3, [r7, #14]
 800d1de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d00a      	beq.n	800d1fc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d1e6:	78fa      	ldrb	r2, [r7, #3]
 800d1e8:	89fb      	ldrh	r3, [r7, #14]
 800d1ea:	f003 030f 	and.w	r3, r3, #15
 800d1ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1f2:	6879      	ldr	r1, [r7, #4]
 800d1f4:	33e0      	adds	r3, #224	; 0xe0
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	440b      	add	r3, r1
 800d1fa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d1fc:	89fb      	ldrh	r3, [r7, #14]
 800d1fe:	b2db      	uxtb	r3, r3
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d214:	78fb      	ldrb	r3, [r7, #3]
 800d216:	2b0f      	cmp	r3, #15
 800d218:	d80d      	bhi.n	800d236 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d21a:	78fb      	ldrb	r3, [r7, #3]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	33e0      	adds	r3, #224	; 0xe0
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	4413      	add	r3, r2
 800d224:	685a      	ldr	r2, [r3, #4]
 800d226:	78fb      	ldrb	r3, [r7, #3]
 800d228:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d22c:	6879      	ldr	r1, [r7, #4]
 800d22e:	33e0      	adds	r3, #224	; 0xe0
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	440b      	add	r3, r1
 800d234:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d24c:	2300      	movs	r3, #0
 800d24e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d250:	2300      	movs	r3, #0
 800d252:	73fb      	strb	r3, [r7, #15]
 800d254:	e00f      	b.n	800d276 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d256:	7bfb      	ldrb	r3, [r7, #15]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	33e0      	adds	r3, #224	; 0xe0
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4413      	add	r3, r2
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d266:	2b00      	cmp	r3, #0
 800d268:	d102      	bne.n	800d270 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d26a:	7bfb      	ldrb	r3, [r7, #15]
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	e007      	b.n	800d280 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d270:	7bfb      	ldrb	r3, [r7, #15]
 800d272:	3301      	adds	r3, #1
 800d274:	73fb      	strb	r3, [r7, #15]
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	2b0f      	cmp	r3, #15
 800d27a:	d9ec      	bls.n	800d256 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d27c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d280:	4618      	mov	r0, r3
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	4603      	mov	r3, r0
 800d294:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d296:	79fb      	ldrb	r3, [r7, #7]
 800d298:	4a08      	ldr	r2, [pc, #32]	; (800d2bc <disk_status+0x30>)
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4413      	add	r3, r2
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	79fa      	ldrb	r2, [r7, #7]
 800d2a4:	4905      	ldr	r1, [pc, #20]	; (800d2bc <disk_status+0x30>)
 800d2a6:	440a      	add	r2, r1
 800d2a8:	7a12      	ldrb	r2, [r2, #8]
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	4798      	blx	r3
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	20001dd8 	.word	0x20001dd8

0800d2c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d2ce:	79fb      	ldrb	r3, [r7, #7]
 800d2d0:	4a0d      	ldr	r2, [pc, #52]	; (800d308 <disk_initialize+0x48>)
 800d2d2:	5cd3      	ldrb	r3, [r2, r3]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d111      	bne.n	800d2fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d2d8:	79fb      	ldrb	r3, [r7, #7]
 800d2da:	4a0b      	ldr	r2, [pc, #44]	; (800d308 <disk_initialize+0x48>)
 800d2dc:	2101      	movs	r1, #1
 800d2de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d2e0:	79fb      	ldrb	r3, [r7, #7]
 800d2e2:	4a09      	ldr	r2, [pc, #36]	; (800d308 <disk_initialize+0x48>)
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	79fa      	ldrb	r2, [r7, #7]
 800d2ee:	4906      	ldr	r1, [pc, #24]	; (800d308 <disk_initialize+0x48>)
 800d2f0:	440a      	add	r2, r1
 800d2f2:	7a12      	ldrb	r2, [r2, #8]
 800d2f4:	4610      	mov	r0, r2
 800d2f6:	4798      	blx	r3
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	20001dd8 	.word	0x20001dd8

0800d30c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d30c:	b590      	push	{r4, r7, lr}
 800d30e:	b087      	sub	sp, #28
 800d310:	af00      	add	r7, sp, #0
 800d312:	60b9      	str	r1, [r7, #8]
 800d314:	607a      	str	r2, [r7, #4]
 800d316:	603b      	str	r3, [r7, #0]
 800d318:	4603      	mov	r3, r0
 800d31a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d31c:	7bfb      	ldrb	r3, [r7, #15]
 800d31e:	4a0a      	ldr	r2, [pc, #40]	; (800d348 <disk_read+0x3c>)
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4413      	add	r3, r2
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	689c      	ldr	r4, [r3, #8]
 800d328:	7bfb      	ldrb	r3, [r7, #15]
 800d32a:	4a07      	ldr	r2, [pc, #28]	; (800d348 <disk_read+0x3c>)
 800d32c:	4413      	add	r3, r2
 800d32e:	7a18      	ldrb	r0, [r3, #8]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	68b9      	ldr	r1, [r7, #8]
 800d336:	47a0      	blx	r4
 800d338:	4603      	mov	r3, r0
 800d33a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d33e:	4618      	mov	r0, r3
 800d340:	371c      	adds	r7, #28
 800d342:	46bd      	mov	sp, r7
 800d344:	bd90      	pop	{r4, r7, pc}
 800d346:	bf00      	nop
 800d348:	20001dd8 	.word	0x20001dd8

0800d34c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d34c:	b590      	push	{r4, r7, lr}
 800d34e:	b087      	sub	sp, #28
 800d350:	af00      	add	r7, sp, #0
 800d352:	60b9      	str	r1, [r7, #8]
 800d354:	607a      	str	r2, [r7, #4]
 800d356:	603b      	str	r3, [r7, #0]
 800d358:	4603      	mov	r3, r0
 800d35a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d35c:	7bfb      	ldrb	r3, [r7, #15]
 800d35e:	4a0a      	ldr	r2, [pc, #40]	; (800d388 <disk_write+0x3c>)
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	4413      	add	r3, r2
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	68dc      	ldr	r4, [r3, #12]
 800d368:	7bfb      	ldrb	r3, [r7, #15]
 800d36a:	4a07      	ldr	r2, [pc, #28]	; (800d388 <disk_write+0x3c>)
 800d36c:	4413      	add	r3, r2
 800d36e:	7a18      	ldrb	r0, [r3, #8]
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	68b9      	ldr	r1, [r7, #8]
 800d376:	47a0      	blx	r4
 800d378:	4603      	mov	r3, r0
 800d37a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	371c      	adds	r7, #28
 800d382:	46bd      	mov	sp, r7
 800d384:	bd90      	pop	{r4, r7, pc}
 800d386:	bf00      	nop
 800d388:	20001dd8 	.word	0x20001dd8

0800d38c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	4603      	mov	r3, r0
 800d394:	603a      	str	r2, [r7, #0]
 800d396:	71fb      	strb	r3, [r7, #7]
 800d398:	460b      	mov	r3, r1
 800d39a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d39c:	79fb      	ldrb	r3, [r7, #7]
 800d39e:	4a09      	ldr	r2, [pc, #36]	; (800d3c4 <disk_ioctl+0x38>)
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	4413      	add	r3, r2
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	691b      	ldr	r3, [r3, #16]
 800d3a8:	79fa      	ldrb	r2, [r7, #7]
 800d3aa:	4906      	ldr	r1, [pc, #24]	; (800d3c4 <disk_ioctl+0x38>)
 800d3ac:	440a      	add	r2, r1
 800d3ae:	7a10      	ldrb	r0, [r2, #8]
 800d3b0:	79b9      	ldrb	r1, [r7, #6]
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	4798      	blx	r3
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	73fb      	strb	r3, [r7, #15]
  return res;
 800d3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	20001dd8 	.word	0x20001dd8

0800d3c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b085      	sub	sp, #20
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d3d8:	89fb      	ldrh	r3, [r7, #14]
 800d3da:	021b      	lsls	r3, r3, #8
 800d3dc:	b21a      	sxth	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	b21b      	sxth	r3, r3
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	b21b      	sxth	r3, r3
 800d3e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d3ea:	89fb      	ldrh	r3, [r7, #14]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	3303      	adds	r3, #3
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	021b      	lsls	r3, r3, #8
 800d40c:	687a      	ldr	r2, [r7, #4]
 800d40e:	3202      	adds	r2, #2
 800d410:	7812      	ldrb	r2, [r2, #0]
 800d412:	4313      	orrs	r3, r2
 800d414:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	021b      	lsls	r3, r3, #8
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	3201      	adds	r2, #1
 800d41e:	7812      	ldrb	r2, [r2, #0]
 800d420:	4313      	orrs	r3, r2
 800d422:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	021b      	lsls	r3, r3, #8
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	7812      	ldrb	r2, [r2, #0]
 800d42c:	4313      	orrs	r3, r2
 800d42e:	60fb      	str	r3, [r7, #12]
	return rv;
 800d430:	68fb      	ldr	r3, [r7, #12]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3714      	adds	r7, #20
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr

0800d43e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d43e:	b480      	push	{r7}
 800d440:	b083      	sub	sp, #12
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
 800d446:	460b      	mov	r3, r1
 800d448:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	1c5a      	adds	r2, r3, #1
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	887a      	ldrh	r2, [r7, #2]
 800d452:	b2d2      	uxtb	r2, r2
 800d454:	701a      	strb	r2, [r3, #0]
 800d456:	887b      	ldrh	r3, [r7, #2]
 800d458:	0a1b      	lsrs	r3, r3, #8
 800d45a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	607a      	str	r2, [r7, #4]
 800d462:	887a      	ldrh	r2, [r7, #2]
 800d464:	b2d2      	uxtb	r2, r2
 800d466:	701a      	strb	r2, [r3, #0]
}
 800d468:	bf00      	nop
 800d46a:	370c      	adds	r7, #12
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	1c5a      	adds	r2, r3, #1
 800d482:	607a      	str	r2, [r7, #4]
 800d484:	683a      	ldr	r2, [r7, #0]
 800d486:	b2d2      	uxtb	r2, r2
 800d488:	701a      	strb	r2, [r3, #0]
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	0a1b      	lsrs	r3, r3, #8
 800d48e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	1c5a      	adds	r2, r3, #1
 800d494:	607a      	str	r2, [r7, #4]
 800d496:	683a      	ldr	r2, [r7, #0]
 800d498:	b2d2      	uxtb	r2, r2
 800d49a:	701a      	strb	r2, [r3, #0]
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	0a1b      	lsrs	r3, r3, #8
 800d4a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	1c5a      	adds	r2, r3, #1
 800d4a6:	607a      	str	r2, [r7, #4]
 800d4a8:	683a      	ldr	r2, [r7, #0]
 800d4aa:	b2d2      	uxtb	r2, r2
 800d4ac:	701a      	strb	r2, [r3, #0]
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	0a1b      	lsrs	r3, r3, #8
 800d4b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	1c5a      	adds	r2, r3, #1
 800d4b8:	607a      	str	r2, [r7, #4]
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	b2d2      	uxtb	r2, r2
 800d4be:	701a      	strb	r2, [r3, #0]
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d4cc:	b480      	push	{r7}
 800d4ce:	b087      	sub	sp, #28
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00d      	beq.n	800d502 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	1c53      	adds	r3, r2, #1
 800d4ea:	613b      	str	r3, [r7, #16]
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	1c59      	adds	r1, r3, #1
 800d4f0:	6179      	str	r1, [r7, #20]
 800d4f2:	7812      	ldrb	r2, [r2, #0]
 800d4f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	3b01      	subs	r3, #1
 800d4fa:	607b      	str	r3, [r7, #4]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1f1      	bne.n	800d4e6 <mem_cpy+0x1a>
	}
}
 800d502:	bf00      	nop
 800d504:	371c      	adds	r7, #28
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr

0800d50e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d50e:	b480      	push	{r7}
 800d510:	b087      	sub	sp, #28
 800d512:	af00      	add	r7, sp, #0
 800d514:	60f8      	str	r0, [r7, #12]
 800d516:	60b9      	str	r1, [r7, #8]
 800d518:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	1c5a      	adds	r2, r3, #1
 800d522:	617a      	str	r2, [r7, #20]
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	b2d2      	uxtb	r2, r2
 800d528:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	3b01      	subs	r3, #1
 800d52e:	607b      	str	r3, [r7, #4]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1f3      	bne.n	800d51e <mem_set+0x10>
}
 800d536:	bf00      	nop
 800d538:	bf00      	nop
 800d53a:	371c      	adds	r7, #28
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d544:	b480      	push	{r7}
 800d546:	b089      	sub	sp, #36	; 0x24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	61fb      	str	r3, [r7, #28]
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d558:	2300      	movs	r3, #0
 800d55a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	1c5a      	adds	r2, r3, #1
 800d560:	61fa      	str	r2, [r7, #28]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	4619      	mov	r1, r3
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	1c5a      	adds	r2, r3, #1
 800d56a:	61ba      	str	r2, [r7, #24]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	1acb      	subs	r3, r1, r3
 800d570:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3b01      	subs	r3, #1
 800d576:	607b      	str	r3, [r7, #4]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <mem_cmp+0x40>
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d0eb      	beq.n	800d55c <mem_cmp+0x18>

	return r;
 800d584:	697b      	ldr	r3, [r7, #20]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3724      	adds	r7, #36	; 0x24
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr

0800d592 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d592:	b480      	push	{r7}
 800d594:	b083      	sub	sp, #12
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d59c:	e002      	b.n	800d5a4 <chk_chr+0x12>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	607b      	str	r3, [r7, #4]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d005      	beq.n	800d5b8 <chk_chr+0x26>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d1f2      	bne.n	800d59e <chk_chr+0xc>
	return *str;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	60bb      	str	r3, [r7, #8]
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	60fb      	str	r3, [r7, #12]
 800d5da:	e029      	b.n	800d630 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d5dc:	4a27      	ldr	r2, [pc, #156]	; (800d67c <chk_lock+0xb4>)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	011b      	lsls	r3, r3, #4
 800d5e2:	4413      	add	r3, r2
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d01d      	beq.n	800d626 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5ea:	4a24      	ldr	r2, [pc, #144]	; (800d67c <chk_lock+0xb4>)
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	011b      	lsls	r3, r3, #4
 800d5f0:	4413      	add	r3, r2
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d116      	bne.n	800d62a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d5fc:	4a1f      	ldr	r2, [pc, #124]	; (800d67c <chk_lock+0xb4>)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	011b      	lsls	r3, r3, #4
 800d602:	4413      	add	r3, r2
 800d604:	3304      	adds	r3, #4
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d10c      	bne.n	800d62a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d610:	4a1a      	ldr	r2, [pc, #104]	; (800d67c <chk_lock+0xb4>)
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	011b      	lsls	r3, r3, #4
 800d616:	4413      	add	r3, r2
 800d618:	3308      	adds	r3, #8
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d620:	429a      	cmp	r2, r3
 800d622:	d102      	bne.n	800d62a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d624:	e007      	b.n	800d636 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d626:	2301      	movs	r3, #1
 800d628:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	3301      	adds	r3, #1
 800d62e:	60fb      	str	r3, [r7, #12]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2b01      	cmp	r3, #1
 800d634:	d9d2      	bls.n	800d5dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d109      	bne.n	800d650 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d102      	bne.n	800d648 <chk_lock+0x80>
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	2b02      	cmp	r3, #2
 800d646:	d101      	bne.n	800d64c <chk_lock+0x84>
 800d648:	2300      	movs	r3, #0
 800d64a:	e010      	b.n	800d66e <chk_lock+0xa6>
 800d64c:	2312      	movs	r3, #18
 800d64e:	e00e      	b.n	800d66e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d108      	bne.n	800d668 <chk_lock+0xa0>
 800d656:	4a09      	ldr	r2, [pc, #36]	; (800d67c <chk_lock+0xb4>)
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	011b      	lsls	r3, r3, #4
 800d65c:	4413      	add	r3, r2
 800d65e:	330c      	adds	r3, #12
 800d660:	881b      	ldrh	r3, [r3, #0]
 800d662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d666:	d101      	bne.n	800d66c <chk_lock+0xa4>
 800d668:	2310      	movs	r3, #16
 800d66a:	e000      	b.n	800d66e <chk_lock+0xa6>
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3714      	adds	r7, #20
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	20001bb8 	.word	0x20001bb8

0800d680 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d686:	2300      	movs	r3, #0
 800d688:	607b      	str	r3, [r7, #4]
 800d68a:	e002      	b.n	800d692 <enq_lock+0x12>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	3301      	adds	r3, #1
 800d690:	607b      	str	r3, [r7, #4]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d806      	bhi.n	800d6a6 <enq_lock+0x26>
 800d698:	4a09      	ldr	r2, [pc, #36]	; (800d6c0 <enq_lock+0x40>)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	011b      	lsls	r3, r3, #4
 800d69e:	4413      	add	r3, r2
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1f2      	bne.n	800d68c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	bf14      	ite	ne
 800d6ac:	2301      	movne	r3, #1
 800d6ae:	2300      	moveq	r3, #0
 800d6b0:	b2db      	uxtb	r3, r3
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	370c      	adds	r7, #12
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop
 800d6c0:	20001bb8 	.word	0x20001bb8

0800d6c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	60fb      	str	r3, [r7, #12]
 800d6d2:	e01f      	b.n	800d714 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d6d4:	4a41      	ldr	r2, [pc, #260]	; (800d7dc <inc_lock+0x118>)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	011b      	lsls	r3, r3, #4
 800d6da:	4413      	add	r3, r2
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d113      	bne.n	800d70e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d6e6:	4a3d      	ldr	r2, [pc, #244]	; (800d7dc <inc_lock+0x118>)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	011b      	lsls	r3, r3, #4
 800d6ec:	4413      	add	r3, r2
 800d6ee:	3304      	adds	r3, #4
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d109      	bne.n	800d70e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d6fa:	4a38      	ldr	r2, [pc, #224]	; (800d7dc <inc_lock+0x118>)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	011b      	lsls	r3, r3, #4
 800d700:	4413      	add	r3, r2
 800d702:	3308      	adds	r3, #8
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d006      	beq.n	800d71c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	3301      	adds	r3, #1
 800d712:	60fb      	str	r3, [r7, #12]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2b01      	cmp	r3, #1
 800d718:	d9dc      	bls.n	800d6d4 <inc_lock+0x10>
 800d71a:	e000      	b.n	800d71e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d71c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2b02      	cmp	r3, #2
 800d722:	d132      	bne.n	800d78a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d724:	2300      	movs	r3, #0
 800d726:	60fb      	str	r3, [r7, #12]
 800d728:	e002      	b.n	800d730 <inc_lock+0x6c>
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	3301      	adds	r3, #1
 800d72e:	60fb      	str	r3, [r7, #12]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d806      	bhi.n	800d744 <inc_lock+0x80>
 800d736:	4a29      	ldr	r2, [pc, #164]	; (800d7dc <inc_lock+0x118>)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	011b      	lsls	r3, r3, #4
 800d73c:	4413      	add	r3, r2
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d1f2      	bne.n	800d72a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b02      	cmp	r3, #2
 800d748:	d101      	bne.n	800d74e <inc_lock+0x8a>
 800d74a:	2300      	movs	r3, #0
 800d74c:	e040      	b.n	800d7d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	4922      	ldr	r1, [pc, #136]	; (800d7dc <inc_lock+0x118>)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	011b      	lsls	r3, r3, #4
 800d758:	440b      	add	r3, r1
 800d75a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	689a      	ldr	r2, [r3, #8]
 800d760:	491e      	ldr	r1, [pc, #120]	; (800d7dc <inc_lock+0x118>)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	011b      	lsls	r3, r3, #4
 800d766:	440b      	add	r3, r1
 800d768:	3304      	adds	r3, #4
 800d76a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	695a      	ldr	r2, [r3, #20]
 800d770:	491a      	ldr	r1, [pc, #104]	; (800d7dc <inc_lock+0x118>)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	011b      	lsls	r3, r3, #4
 800d776:	440b      	add	r3, r1
 800d778:	3308      	adds	r3, #8
 800d77a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d77c:	4a17      	ldr	r2, [pc, #92]	; (800d7dc <inc_lock+0x118>)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	011b      	lsls	r3, r3, #4
 800d782:	4413      	add	r3, r2
 800d784:	330c      	adds	r3, #12
 800d786:	2200      	movs	r2, #0
 800d788:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d009      	beq.n	800d7a4 <inc_lock+0xe0>
 800d790:	4a12      	ldr	r2, [pc, #72]	; (800d7dc <inc_lock+0x118>)
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	011b      	lsls	r3, r3, #4
 800d796:	4413      	add	r3, r2
 800d798:	330c      	adds	r3, #12
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d001      	beq.n	800d7a4 <inc_lock+0xe0>
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	e015      	b.n	800d7d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d108      	bne.n	800d7bc <inc_lock+0xf8>
 800d7aa:	4a0c      	ldr	r2, [pc, #48]	; (800d7dc <inc_lock+0x118>)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	011b      	lsls	r3, r3, #4
 800d7b0:	4413      	add	r3, r2
 800d7b2:	330c      	adds	r3, #12
 800d7b4:	881b      	ldrh	r3, [r3, #0]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	e001      	b.n	800d7c0 <inc_lock+0xfc>
 800d7bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7c0:	4906      	ldr	r1, [pc, #24]	; (800d7dc <inc_lock+0x118>)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	011b      	lsls	r3, r3, #4
 800d7c6:	440b      	add	r3, r1
 800d7c8:	330c      	adds	r3, #12
 800d7ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	3301      	adds	r3, #1
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3714      	adds	r7, #20
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr
 800d7dc:	20001bb8 	.word	0x20001bb8

0800d7e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	607b      	str	r3, [r7, #4]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d825      	bhi.n	800d840 <dec_lock+0x60>
		n = Files[i].ctr;
 800d7f4:	4a17      	ldr	r2, [pc, #92]	; (800d854 <dec_lock+0x74>)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	011b      	lsls	r3, r3, #4
 800d7fa:	4413      	add	r3, r2
 800d7fc:	330c      	adds	r3, #12
 800d7fe:	881b      	ldrh	r3, [r3, #0]
 800d800:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d802:	89fb      	ldrh	r3, [r7, #14]
 800d804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d808:	d101      	bne.n	800d80e <dec_lock+0x2e>
 800d80a:	2300      	movs	r3, #0
 800d80c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d80e:	89fb      	ldrh	r3, [r7, #14]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d002      	beq.n	800d81a <dec_lock+0x3a>
 800d814:	89fb      	ldrh	r3, [r7, #14]
 800d816:	3b01      	subs	r3, #1
 800d818:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d81a:	4a0e      	ldr	r2, [pc, #56]	; (800d854 <dec_lock+0x74>)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	011b      	lsls	r3, r3, #4
 800d820:	4413      	add	r3, r2
 800d822:	330c      	adds	r3, #12
 800d824:	89fa      	ldrh	r2, [r7, #14]
 800d826:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d828:	89fb      	ldrh	r3, [r7, #14]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d105      	bne.n	800d83a <dec_lock+0x5a>
 800d82e:	4a09      	ldr	r2, [pc, #36]	; (800d854 <dec_lock+0x74>)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	011b      	lsls	r3, r3, #4
 800d834:	4413      	add	r3, r2
 800d836:	2200      	movs	r2, #0
 800d838:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d83a:	2300      	movs	r3, #0
 800d83c:	737b      	strb	r3, [r7, #13]
 800d83e:	e001      	b.n	800d844 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d840:	2302      	movs	r3, #2
 800d842:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d844:	7b7b      	ldrb	r3, [r7, #13]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3714      	adds	r7, #20
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	20001bb8 	.word	0x20001bb8

0800d858 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d860:	2300      	movs	r3, #0
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	e010      	b.n	800d888 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d866:	4a0d      	ldr	r2, [pc, #52]	; (800d89c <clear_lock+0x44>)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	011b      	lsls	r3, r3, #4
 800d86c:	4413      	add	r3, r2
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	429a      	cmp	r2, r3
 800d874:	d105      	bne.n	800d882 <clear_lock+0x2a>
 800d876:	4a09      	ldr	r2, [pc, #36]	; (800d89c <clear_lock+0x44>)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	011b      	lsls	r3, r3, #4
 800d87c:	4413      	add	r3, r2
 800d87e:	2200      	movs	r2, #0
 800d880:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	3301      	adds	r3, #1
 800d886:	60fb      	str	r3, [r7, #12]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d9eb      	bls.n	800d866 <clear_lock+0xe>
	}
}
 800d88e:	bf00      	nop
 800d890:	bf00      	nop
 800d892:	3714      	adds	r7, #20
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr
 800d89c:	20001bb8 	.word	0x20001bb8

0800d8a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b086      	sub	sp, #24
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	78db      	ldrb	r3, [r3, #3]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d034      	beq.n	800d91e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	7858      	ldrb	r0, [r3, #1]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	f7ff fd40 	bl	800d34c <disk_write>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d002      	beq.n	800d8d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	73fb      	strb	r3, [r7, #15]
 800d8d6:	e022      	b.n	800d91e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e2:	697a      	ldr	r2, [r7, #20]
 800d8e4:	1ad2      	subs	r2, r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	69db      	ldr	r3, [r3, #28]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d217      	bcs.n	800d91e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	789b      	ldrb	r3, [r3, #2]
 800d8f2:	613b      	str	r3, [r7, #16]
 800d8f4:	e010      	b.n	800d918 <sync_window+0x78>
					wsect += fs->fsize;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	69db      	ldr	r3, [r3, #28]
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	7858      	ldrb	r0, [r3, #1]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d90a:	2301      	movs	r3, #1
 800d90c:	697a      	ldr	r2, [r7, #20]
 800d90e:	f7ff fd1d 	bl	800d34c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	3b01      	subs	r3, #1
 800d916:	613b      	str	r3, [r7, #16]
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d8eb      	bhi.n	800d8f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3718      	adds	r7, #24
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d932:	2300      	movs	r3, #0
 800d934:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d93a:	683a      	ldr	r2, [r7, #0]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d01b      	beq.n	800d978 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f7ff ffad 	bl	800d8a0 <sync_window>
 800d946:	4603      	mov	r3, r0
 800d948:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d94a:	7bfb      	ldrb	r3, [r7, #15]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d113      	bne.n	800d978 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	7858      	ldrb	r0, [r3, #1]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d95a:	2301      	movs	r3, #1
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	f7ff fcd5 	bl	800d30c <disk_read>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d004      	beq.n	800d972 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d968:	f04f 33ff 	mov.w	r3, #4294967295
 800d96c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d96e:	2301      	movs	r3, #1
 800d970:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	683a      	ldr	r2, [r7, #0]
 800d976:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d978:	7bfb      	ldrb	r3, [r7, #15]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
	...

0800d984 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7ff ff87 	bl	800d8a0 <sync_window>
 800d992:	4603      	mov	r3, r0
 800d994:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d996:	7bfb      	ldrb	r3, [r7, #15]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d158      	bne.n	800da4e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	2b03      	cmp	r3, #3
 800d9a2:	d148      	bne.n	800da36 <sync_fs+0xb2>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	791b      	ldrb	r3, [r3, #4]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d144      	bne.n	800da36 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	3334      	adds	r3, #52	; 0x34
 800d9b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7ff fda9 	bl	800d50e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	3334      	adds	r3, #52	; 0x34
 800d9c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9c4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7ff fd38 	bl	800d43e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	3334      	adds	r3, #52	; 0x34
 800d9d2:	4921      	ldr	r1, [pc, #132]	; (800da58 <sync_fs+0xd4>)
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7ff fd4d 	bl	800d474 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	3334      	adds	r3, #52	; 0x34
 800d9de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d9e2:	491e      	ldr	r1, [pc, #120]	; (800da5c <sync_fs+0xd8>)
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7ff fd45 	bl	800d474 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	3334      	adds	r3, #52	; 0x34
 800d9ee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	695b      	ldr	r3, [r3, #20]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	4610      	mov	r0, r2
 800d9fa:	f7ff fd3b 	bl	800d474 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	3334      	adds	r3, #52	; 0x34
 800da02:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	4619      	mov	r1, r3
 800da0c:	4610      	mov	r0, r2
 800da0e:	f7ff fd31 	bl	800d474 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6a1b      	ldr	r3, [r3, #32]
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	7858      	ldrb	r0, [r3, #1]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da2a:	2301      	movs	r3, #1
 800da2c:	f7ff fc8e 	bl	800d34c <disk_write>
			fs->fsi_flag = 0;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	785b      	ldrb	r3, [r3, #1]
 800da3a:	2200      	movs	r2, #0
 800da3c:	2100      	movs	r1, #0
 800da3e:	4618      	mov	r0, r3
 800da40:	f7ff fca4 	bl	800d38c <disk_ioctl>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <sync_fs+0xca>
 800da4a:	2301      	movs	r3, #1
 800da4c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800da4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	41615252 	.word	0x41615252
 800da5c:	61417272 	.word	0x61417272

0800da60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	3b02      	subs	r3, #2
 800da6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	3b02      	subs	r3, #2
 800da76:	683a      	ldr	r2, [r7, #0]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d301      	bcc.n	800da80 <clust2sect+0x20>
 800da7c:	2300      	movs	r3, #0
 800da7e:	e008      	b.n	800da92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	895b      	ldrh	r3, [r3, #10]
 800da84:	461a      	mov	r2, r3
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	fb03 f202 	mul.w	r2, r3, r2
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da90:	4413      	add	r3, r2
}
 800da92:	4618      	mov	r0, r3
 800da94:	370c      	adds	r7, #12
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr

0800da9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b086      	sub	sp, #24
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
 800daa6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d904      	bls.n	800dabe <get_fat+0x20>
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	699b      	ldr	r3, [r3, #24]
 800dab8:	683a      	ldr	r2, [r7, #0]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d302      	bcc.n	800dac4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dabe:	2301      	movs	r3, #1
 800dac0:	617b      	str	r3, [r7, #20]
 800dac2:	e08f      	b.n	800dbe4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dac4:	f04f 33ff 	mov.w	r3, #4294967295
 800dac8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b03      	cmp	r3, #3
 800dad0:	d062      	beq.n	800db98 <get_fat+0xfa>
 800dad2:	2b03      	cmp	r3, #3
 800dad4:	dc7c      	bgt.n	800dbd0 <get_fat+0x132>
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d002      	beq.n	800dae0 <get_fat+0x42>
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d042      	beq.n	800db64 <get_fat+0xc6>
 800dade:	e077      	b.n	800dbd0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	60fb      	str	r3, [r7, #12]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	085b      	lsrs	r3, r3, #1
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	4413      	add	r3, r2
 800daec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	0a5b      	lsrs	r3, r3, #9
 800daf6:	4413      	add	r3, r2
 800daf8:	4619      	mov	r1, r3
 800dafa:	6938      	ldr	r0, [r7, #16]
 800dafc:	f7ff ff14 	bl	800d928 <move_window>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d167      	bne.n	800dbd6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	60fa      	str	r2, [r7, #12]
 800db0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db10:	693a      	ldr	r2, [r7, #16]
 800db12:	4413      	add	r3, r2
 800db14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	0a5b      	lsrs	r3, r3, #9
 800db22:	4413      	add	r3, r2
 800db24:	4619      	mov	r1, r3
 800db26:	6938      	ldr	r0, [r7, #16]
 800db28:	f7ff fefe 	bl	800d928 <move_window>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d153      	bne.n	800dbda <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db38:	693a      	ldr	r2, [r7, #16]
 800db3a:	4413      	add	r3, r2
 800db3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db40:	021b      	lsls	r3, r3, #8
 800db42:	461a      	mov	r2, r3
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	4313      	orrs	r3, r2
 800db48:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <get_fat+0xbc>
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	091b      	lsrs	r3, r3, #4
 800db58:	e002      	b.n	800db60 <get_fat+0xc2>
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db60:	617b      	str	r3, [r7, #20]
			break;
 800db62:	e03f      	b.n	800dbe4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	0a1b      	lsrs	r3, r3, #8
 800db6c:	4413      	add	r3, r2
 800db6e:	4619      	mov	r1, r3
 800db70:	6938      	ldr	r0, [r7, #16]
 800db72:	f7ff fed9 	bl	800d928 <move_window>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d130      	bne.n	800dbde <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	005b      	lsls	r3, r3, #1
 800db86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800db8a:	4413      	add	r3, r2
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7ff fc1b 	bl	800d3c8 <ld_word>
 800db92:	4603      	mov	r3, r0
 800db94:	617b      	str	r3, [r7, #20]
			break;
 800db96:	e025      	b.n	800dbe4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	09db      	lsrs	r3, r3, #7
 800dba0:	4413      	add	r3, r2
 800dba2:	4619      	mov	r1, r3
 800dba4:	6938      	ldr	r0, [r7, #16]
 800dba6:	f7ff febf 	bl	800d928 <move_window>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d118      	bne.n	800dbe2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dbbe:	4413      	add	r3, r2
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7ff fc19 	bl	800d3f8 <ld_dword>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dbcc:	617b      	str	r3, [r7, #20]
			break;
 800dbce:	e009      	b.n	800dbe4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	617b      	str	r3, [r7, #20]
 800dbd4:	e006      	b.n	800dbe4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbd6:	bf00      	nop
 800dbd8:	e004      	b.n	800dbe4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbda:	bf00      	nop
 800dbdc:	e002      	b.n	800dbe4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dbde:	bf00      	nop
 800dbe0:	e000      	b.n	800dbe4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbe2:	bf00      	nop
		}
	}

	return val;
 800dbe4:	697b      	ldr	r3, [r7, #20]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3718      	adds	r7, #24
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dbee:	b590      	push	{r4, r7, lr}
 800dbf0:	b089      	sub	sp, #36	; 0x24
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	60f8      	str	r0, [r7, #12]
 800dbf6:	60b9      	str	r1, [r7, #8]
 800dbf8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dbfa:	2302      	movs	r3, #2
 800dbfc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	f240 80d9 	bls.w	800ddb8 <put_fat+0x1ca>
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	699b      	ldr	r3, [r3, #24]
 800dc0a:	68ba      	ldr	r2, [r7, #8]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	f080 80d3 	bcs.w	800ddb8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	2b03      	cmp	r3, #3
 800dc18:	f000 8096 	beq.w	800dd48 <put_fat+0x15a>
 800dc1c:	2b03      	cmp	r3, #3
 800dc1e:	f300 80cb 	bgt.w	800ddb8 <put_fat+0x1ca>
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d002      	beq.n	800dc2c <put_fat+0x3e>
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	d06e      	beq.n	800dd08 <put_fat+0x11a>
 800dc2a:	e0c5      	b.n	800ddb8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	61bb      	str	r3, [r7, #24]
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	085b      	lsrs	r3, r3, #1
 800dc34:	69ba      	ldr	r2, [r7, #24]
 800dc36:	4413      	add	r3, r2
 800dc38:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	0a5b      	lsrs	r3, r3, #9
 800dc42:	4413      	add	r3, r2
 800dc44:	4619      	mov	r1, r3
 800dc46:	68f8      	ldr	r0, [r7, #12]
 800dc48:	f7ff fe6e 	bl	800d928 <move_window>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc50:	7ffb      	ldrb	r3, [r7, #31]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f040 80a9 	bne.w	800ddaa <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc5e:	69bb      	ldr	r3, [r7, #24]
 800dc60:	1c59      	adds	r1, r3, #1
 800dc62:	61b9      	str	r1, [r7, #24]
 800dc64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc68:	4413      	add	r3, r2
 800dc6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	f003 0301 	and.w	r3, r3, #1
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00d      	beq.n	800dc92 <put_fat+0xa4>
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	b25b      	sxtb	r3, r3
 800dc7c:	f003 030f 	and.w	r3, r3, #15
 800dc80:	b25a      	sxtb	r2, r3
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	011b      	lsls	r3, r3, #4
 800dc88:	b25b      	sxtb	r3, r3
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	b25b      	sxtb	r3, r3
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	e001      	b.n	800dc96 <put_fat+0xa8>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	697a      	ldr	r2, [r7, #20]
 800dc98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	0a5b      	lsrs	r3, r3, #9
 800dca8:	4413      	add	r3, r2
 800dcaa:	4619      	mov	r1, r3
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f7ff fe3b 	bl	800d928 <move_window>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcb6:	7ffb      	ldrb	r3, [r7, #31]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d178      	bne.n	800ddae <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcc8:	4413      	add	r3, r2
 800dcca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	f003 0301 	and.w	r3, r3, #1
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d003      	beq.n	800dcde <put_fat+0xf0>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	091b      	lsrs	r3, r3, #4
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	e00e      	b.n	800dcfc <put_fat+0x10e>
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	b25b      	sxtb	r3, r3
 800dce4:	f023 030f 	bic.w	r3, r3, #15
 800dce8:	b25a      	sxtb	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	0a1b      	lsrs	r3, r3, #8
 800dcee:	b25b      	sxtb	r3, r3
 800dcf0:	f003 030f 	and.w	r3, r3, #15
 800dcf4:	b25b      	sxtb	r3, r3
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	b25b      	sxtb	r3, r3
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	697a      	ldr	r2, [r7, #20]
 800dcfe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2201      	movs	r2, #1
 800dd04:	70da      	strb	r2, [r3, #3]
			break;
 800dd06:	e057      	b.n	800ddb8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	0a1b      	lsrs	r3, r3, #8
 800dd10:	4413      	add	r3, r2
 800dd12:	4619      	mov	r1, r3
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f7ff fe07 	bl	800d928 <move_window>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd1e:	7ffb      	ldrb	r3, [r7, #31]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d146      	bne.n	800ddb2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	005b      	lsls	r3, r3, #1
 800dd2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dd32:	4413      	add	r3, r2
 800dd34:	687a      	ldr	r2, [r7, #4]
 800dd36:	b292      	uxth	r2, r2
 800dd38:	4611      	mov	r1, r2
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7ff fb7f 	bl	800d43e <st_word>
			fs->wflag = 1;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2201      	movs	r2, #1
 800dd44:	70da      	strb	r2, [r3, #3]
			break;
 800dd46:	e037      	b.n	800ddb8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	09db      	lsrs	r3, r3, #7
 800dd50:	4413      	add	r3, r2
 800dd52:	4619      	mov	r1, r3
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f7ff fde7 	bl	800d928 <move_window>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd5e:	7ffb      	ldrb	r3, [r7, #31]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d128      	bne.n	800ddb6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd78:	4413      	add	r3, r2
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7ff fb3c 	bl	800d3f8 <ld_dword>
 800dd80:	4603      	mov	r3, r0
 800dd82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dd86:	4323      	orrs	r3, r4
 800dd88:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd98:	4413      	add	r3, r2
 800dd9a:	6879      	ldr	r1, [r7, #4]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7ff fb69 	bl	800d474 <st_dword>
			fs->wflag = 1;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2201      	movs	r2, #1
 800dda6:	70da      	strb	r2, [r3, #3]
			break;
 800dda8:	e006      	b.n	800ddb8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ddaa:	bf00      	nop
 800ddac:	e004      	b.n	800ddb8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ddae:	bf00      	nop
 800ddb0:	e002      	b.n	800ddb8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ddb2:	bf00      	nop
 800ddb4:	e000      	b.n	800ddb8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ddb6:	bf00      	nop
		}
	}
	return res;
 800ddb8:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3724      	adds	r7, #36	; 0x24
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd90      	pop	{r4, r7, pc}

0800ddc2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b088      	sub	sp, #32
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	60f8      	str	r0, [r7, #12]
 800ddca:	60b9      	str	r1, [r7, #8]
 800ddcc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d904      	bls.n	800dde8 <remove_chain+0x26>
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	699b      	ldr	r3, [r3, #24]
 800dde2:	68ba      	ldr	r2, [r7, #8]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d301      	bcc.n	800ddec <remove_chain+0x2a>
 800dde8:	2302      	movs	r3, #2
 800ddea:	e04b      	b.n	800de84 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00c      	beq.n	800de0c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ddf2:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf6:	6879      	ldr	r1, [r7, #4]
 800ddf8:	69b8      	ldr	r0, [r7, #24]
 800ddfa:	f7ff fef8 	bl	800dbee <put_fat>
 800ddfe:	4603      	mov	r3, r0
 800de00:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800de02:	7ffb      	ldrb	r3, [r7, #31]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d001      	beq.n	800de0c <remove_chain+0x4a>
 800de08:	7ffb      	ldrb	r3, [r7, #31]
 800de0a:	e03b      	b.n	800de84 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800de0c:	68b9      	ldr	r1, [r7, #8]
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f7ff fe45 	bl	800da9e <get_fat>
 800de14:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d031      	beq.n	800de80 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d101      	bne.n	800de26 <remove_chain+0x64>
 800de22:	2302      	movs	r3, #2
 800de24:	e02e      	b.n	800de84 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2c:	d101      	bne.n	800de32 <remove_chain+0x70>
 800de2e:	2301      	movs	r3, #1
 800de30:	e028      	b.n	800de84 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800de32:	2200      	movs	r2, #0
 800de34:	68b9      	ldr	r1, [r7, #8]
 800de36:	69b8      	ldr	r0, [r7, #24]
 800de38:	f7ff fed9 	bl	800dbee <put_fat>
 800de3c:	4603      	mov	r3, r0
 800de3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800de40:	7ffb      	ldrb	r3, [r7, #31]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d001      	beq.n	800de4a <remove_chain+0x88>
 800de46:	7ffb      	ldrb	r3, [r7, #31]
 800de48:	e01c      	b.n	800de84 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	695a      	ldr	r2, [r3, #20]
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	699b      	ldr	r3, [r3, #24]
 800de52:	3b02      	subs	r3, #2
 800de54:	429a      	cmp	r2, r3
 800de56:	d20b      	bcs.n	800de70 <remove_chain+0xae>
			fs->free_clst++;
 800de58:	69bb      	ldr	r3, [r7, #24]
 800de5a:	695b      	ldr	r3, [r3, #20]
 800de5c:	1c5a      	adds	r2, r3, #1
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	791b      	ldrb	r3, [r3, #4]
 800de66:	f043 0301 	orr.w	r3, r3, #1
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	69bb      	ldr	r3, [r7, #24]
 800de6e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	699b      	ldr	r3, [r3, #24]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d3c6      	bcc.n	800de0c <remove_chain+0x4a>
 800de7e:	e000      	b.n	800de82 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800de80:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3720      	adds	r7, #32
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b088      	sub	sp, #32
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d10d      	bne.n	800debe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	691b      	ldr	r3, [r3, #16]
 800dea6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d004      	beq.n	800deb8 <create_chain+0x2c>
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	699b      	ldr	r3, [r3, #24]
 800deb2:	69ba      	ldr	r2, [r7, #24]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d31b      	bcc.n	800def0 <create_chain+0x64>
 800deb8:	2301      	movs	r3, #1
 800deba:	61bb      	str	r3, [r7, #24]
 800debc:	e018      	b.n	800def0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800debe:	6839      	ldr	r1, [r7, #0]
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f7ff fdec 	bl	800da9e <get_fat>
 800dec6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2b01      	cmp	r3, #1
 800decc:	d801      	bhi.n	800ded2 <create_chain+0x46>
 800dece:	2301      	movs	r3, #1
 800ded0:	e070      	b.n	800dfb4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded8:	d101      	bne.n	800dede <create_chain+0x52>
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	e06a      	b.n	800dfb4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	699b      	ldr	r3, [r3, #24]
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d201      	bcs.n	800deec <create_chain+0x60>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	e063      	b.n	800dfb4 <create_chain+0x128>
		scl = clst;
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	3301      	adds	r3, #1
 800def8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	699b      	ldr	r3, [r3, #24]
 800defe:	69fa      	ldr	r2, [r7, #28]
 800df00:	429a      	cmp	r2, r3
 800df02:	d307      	bcc.n	800df14 <create_chain+0x88>
				ncl = 2;
 800df04:	2302      	movs	r3, #2
 800df06:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800df08:	69fa      	ldr	r2, [r7, #28]
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d901      	bls.n	800df14 <create_chain+0x88>
 800df10:	2300      	movs	r3, #0
 800df12:	e04f      	b.n	800dfb4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800df14:	69f9      	ldr	r1, [r7, #28]
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7ff fdc1 	bl	800da9e <get_fat>
 800df1c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d00e      	beq.n	800df42 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2b01      	cmp	r3, #1
 800df28:	d003      	beq.n	800df32 <create_chain+0xa6>
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df30:	d101      	bne.n	800df36 <create_chain+0xaa>
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	e03e      	b.n	800dfb4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800df36:	69fa      	ldr	r2, [r7, #28]
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d1da      	bne.n	800def4 <create_chain+0x68>
 800df3e:	2300      	movs	r3, #0
 800df40:	e038      	b.n	800dfb4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800df42:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800df44:	f04f 32ff 	mov.w	r2, #4294967295
 800df48:	69f9      	ldr	r1, [r7, #28]
 800df4a:	6938      	ldr	r0, [r7, #16]
 800df4c:	f7ff fe4f 	bl	800dbee <put_fat>
 800df50:	4603      	mov	r3, r0
 800df52:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800df54:	7dfb      	ldrb	r3, [r7, #23]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d109      	bne.n	800df6e <create_chain+0xe2>
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d006      	beq.n	800df6e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800df60:	69fa      	ldr	r2, [r7, #28]
 800df62:	6839      	ldr	r1, [r7, #0]
 800df64:	6938      	ldr	r0, [r7, #16]
 800df66:	f7ff fe42 	bl	800dbee <put_fat>
 800df6a:	4603      	mov	r3, r0
 800df6c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800df6e:	7dfb      	ldrb	r3, [r7, #23]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d116      	bne.n	800dfa2 <create_chain+0x116>
		fs->last_clst = ncl;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	69fa      	ldr	r2, [r7, #28]
 800df78:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	695a      	ldr	r2, [r3, #20]
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	699b      	ldr	r3, [r3, #24]
 800df82:	3b02      	subs	r3, #2
 800df84:	429a      	cmp	r2, r3
 800df86:	d804      	bhi.n	800df92 <create_chain+0x106>
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	695b      	ldr	r3, [r3, #20]
 800df8c:	1e5a      	subs	r2, r3, #1
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	791b      	ldrb	r3, [r3, #4]
 800df96:	f043 0301 	orr.w	r3, r3, #1
 800df9a:	b2da      	uxtb	r2, r3
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	711a      	strb	r2, [r3, #4]
 800dfa0:	e007      	b.n	800dfb2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dfa2:	7dfb      	ldrb	r3, [r7, #23]
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d102      	bne.n	800dfae <create_chain+0x122>
 800dfa8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfac:	e000      	b.n	800dfb0 <create_chain+0x124>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dfb2:	69fb      	ldr	r3, [r7, #28]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3720      	adds	r7, #32
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b087      	sub	sp, #28
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd0:	3304      	adds	r3, #4
 800dfd2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	0a5b      	lsrs	r3, r3, #9
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	8952      	ldrh	r2, [r2, #10]
 800dfdc:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfe0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	1d1a      	adds	r2, r3, #4
 800dfe6:	613a      	str	r2, [r7, #16]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d101      	bne.n	800dff6 <clmt_clust+0x3a>
 800dff2:	2300      	movs	r3, #0
 800dff4:	e010      	b.n	800e018 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dff6:	697a      	ldr	r2, [r7, #20]
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d307      	bcc.n	800e00e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dffe:	697a      	ldr	r2, [r7, #20]
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	1ad3      	subs	r3, r2, r3
 800e004:	617b      	str	r3, [r7, #20]
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	3304      	adds	r3, #4
 800e00a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e00c:	e7e9      	b.n	800dfe2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e00e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	4413      	add	r3, r2
}
 800e018:	4618      	mov	r0, r3
 800e01a:	371c      	adds	r7, #28
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e03a:	d204      	bcs.n	800e046 <dir_sdi+0x22>
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	f003 031f 	and.w	r3, r3, #31
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <dir_sdi+0x26>
		return FR_INT_ERR;
 800e046:	2302      	movs	r3, #2
 800e048:	e063      	b.n	800e112 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	683a      	ldr	r2, [r7, #0]
 800e04e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d106      	bne.n	800e06a <dir_sdi+0x46>
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	2b02      	cmp	r3, #2
 800e062:	d902      	bls.n	800e06a <dir_sdi+0x46>
		clst = fs->dirbase;
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e068:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d10c      	bne.n	800e08a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	095b      	lsrs	r3, r3, #5
 800e074:	693a      	ldr	r2, [r7, #16]
 800e076:	8912      	ldrh	r2, [r2, #8]
 800e078:	4293      	cmp	r3, r2
 800e07a:	d301      	bcc.n	800e080 <dir_sdi+0x5c>
 800e07c:	2302      	movs	r3, #2
 800e07e:	e048      	b.n	800e112 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	61da      	str	r2, [r3, #28]
 800e088:	e029      	b.n	800e0de <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	895b      	ldrh	r3, [r3, #10]
 800e08e:	025b      	lsls	r3, r3, #9
 800e090:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e092:	e019      	b.n	800e0c8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6979      	ldr	r1, [r7, #20]
 800e098:	4618      	mov	r0, r3
 800e09a:	f7ff fd00 	bl	800da9e <get_fat>
 800e09e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a6:	d101      	bne.n	800e0ac <dir_sdi+0x88>
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	e032      	b.n	800e112 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d904      	bls.n	800e0bc <dir_sdi+0x98>
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	699b      	ldr	r3, [r3, #24]
 800e0b6:	697a      	ldr	r2, [r7, #20]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d301      	bcc.n	800e0c0 <dir_sdi+0x9c>
 800e0bc:	2302      	movs	r3, #2
 800e0be:	e028      	b.n	800e112 <dir_sdi+0xee>
			ofs -= csz;
 800e0c0:	683a      	ldr	r2, [r7, #0]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	1ad3      	subs	r3, r2, r3
 800e0c6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d2e1      	bcs.n	800e094 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e0d0:	6979      	ldr	r1, [r7, #20]
 800e0d2:	6938      	ldr	r0, [r7, #16]
 800e0d4:	f7ff fcc4 	bl	800da60 <clust2sect>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	697a      	ldr	r2, [r7, #20]
 800e0e2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	69db      	ldr	r3, [r3, #28]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d101      	bne.n	800e0f0 <dir_sdi+0xcc>
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	e010      	b.n	800e112 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	69da      	ldr	r2, [r3, #28]
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	0a5b      	lsrs	r3, r3, #9
 800e0f8:	441a      	add	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e10a:	441a      	add	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3718      	adds	r7, #24
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b086      	sub	sp, #24
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
 800e122:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	695b      	ldr	r3, [r3, #20]
 800e12e:	3320      	adds	r3, #32
 800e130:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	69db      	ldr	r3, [r3, #28]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d003      	beq.n	800e142 <dir_next+0x28>
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e140:	d301      	bcc.n	800e146 <dir_next+0x2c>
 800e142:	2304      	movs	r3, #4
 800e144:	e0aa      	b.n	800e29c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f040 8098 	bne.w	800e282 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	69db      	ldr	r3, [r3, #28]
 800e156:	1c5a      	adds	r2, r3, #1
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	699b      	ldr	r3, [r3, #24]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10b      	bne.n	800e17c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	095b      	lsrs	r3, r3, #5
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	8912      	ldrh	r2, [r2, #8]
 800e16c:	4293      	cmp	r3, r2
 800e16e:	f0c0 8088 	bcc.w	800e282 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	61da      	str	r2, [r3, #28]
 800e178:	2304      	movs	r3, #4
 800e17a:	e08f      	b.n	800e29c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	0a5b      	lsrs	r3, r3, #9
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	8952      	ldrh	r2, [r2, #10]
 800e184:	3a01      	subs	r2, #1
 800e186:	4013      	ands	r3, r2
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d17a      	bne.n	800e282 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	699b      	ldr	r3, [r3, #24]
 800e192:	4619      	mov	r1, r3
 800e194:	4610      	mov	r0, r2
 800e196:	f7ff fc82 	bl	800da9e <get_fat>
 800e19a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d801      	bhi.n	800e1a6 <dir_next+0x8c>
 800e1a2:	2302      	movs	r3, #2
 800e1a4:	e07a      	b.n	800e29c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ac:	d101      	bne.n	800e1b2 <dir_next+0x98>
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	e074      	b.n	800e29c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	699b      	ldr	r3, [r3, #24]
 800e1b6:	697a      	ldr	r2, [r7, #20]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d358      	bcc.n	800e26e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d104      	bne.n	800e1cc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	61da      	str	r2, [r3, #28]
 800e1c8:	2304      	movs	r3, #4
 800e1ca:	e067      	b.n	800e29c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	699b      	ldr	r3, [r3, #24]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	f7ff fe59 	bl	800de8c <create_chain>
 800e1da:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d101      	bne.n	800e1e6 <dir_next+0xcc>
 800e1e2:	2307      	movs	r3, #7
 800e1e4:	e05a      	b.n	800e29c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d101      	bne.n	800e1f0 <dir_next+0xd6>
 800e1ec:	2302      	movs	r3, #2
 800e1ee:	e055      	b.n	800e29c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f6:	d101      	bne.n	800e1fc <dir_next+0xe2>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	e04f      	b.n	800e29c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f7ff fb4f 	bl	800d8a0 <sync_window>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <dir_next+0xf2>
 800e208:	2301      	movs	r3, #1
 800e20a:	e047      	b.n	800e29c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	3334      	adds	r3, #52	; 0x34
 800e210:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e214:	2100      	movs	r1, #0
 800e216:	4618      	mov	r0, r3
 800e218:	f7ff f979 	bl	800d50e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e21c:	2300      	movs	r3, #0
 800e21e:	613b      	str	r3, [r7, #16]
 800e220:	6979      	ldr	r1, [r7, #20]
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f7ff fc1c 	bl	800da60 <clust2sect>
 800e228:	4602      	mov	r2, r0
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	631a      	str	r2, [r3, #48]	; 0x30
 800e22e:	e012      	b.n	800e256 <dir_next+0x13c>
						fs->wflag = 1;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2201      	movs	r2, #1
 800e234:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f7ff fb32 	bl	800d8a0 <sync_window>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d001      	beq.n	800e246 <dir_next+0x12c>
 800e242:	2301      	movs	r3, #1
 800e244:	e02a      	b.n	800e29c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	3301      	adds	r3, #1
 800e24a:	613b      	str	r3, [r7, #16]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e250:	1c5a      	adds	r2, r3, #1
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	631a      	str	r2, [r3, #48]	; 0x30
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	895b      	ldrh	r3, [r3, #10]
 800e25a:	461a      	mov	r2, r3
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	4293      	cmp	r3, r2
 800e260:	d3e6      	bcc.n	800e230 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	1ad2      	subs	r2, r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	697a      	ldr	r2, [r7, #20]
 800e272:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e274:	6979      	ldr	r1, [r7, #20]
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	f7ff fbf2 	bl	800da60 <clust2sect>
 800e27c:	4602      	mov	r2, r0
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	68ba      	ldr	r2, [r7, #8]
 800e286:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e294:	441a      	add	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e29a:	2300      	movs	r3, #0
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e2b4:	2100      	movs	r1, #0
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f7ff feb4 	bl	800e024 <dir_sdi>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e2c0:	7dfb      	ldrb	r3, [r7, #23]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d12b      	bne.n	800e31e <dir_alloc+0x7a>
		n = 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	69db      	ldr	r3, [r3, #28]
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f7ff fb29 	bl	800d928 <move_window>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e2da:	7dfb      	ldrb	r3, [r7, #23]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d11d      	bne.n	800e31c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6a1b      	ldr	r3, [r3, #32]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	2be5      	cmp	r3, #229	; 0xe5
 800e2e8:	d004      	beq.n	800e2f4 <dir_alloc+0x50>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6a1b      	ldr	r3, [r3, #32]
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d107      	bne.n	800e304 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	613b      	str	r3, [r7, #16]
 800e2fa:	693a      	ldr	r2, [r7, #16]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d102      	bne.n	800e308 <dir_alloc+0x64>
 800e302:	e00c      	b.n	800e31e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e304:	2300      	movs	r3, #0
 800e306:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e308:	2101      	movs	r1, #1
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7ff ff05 	bl	800e11a <dir_next>
 800e310:	4603      	mov	r3, r0
 800e312:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e314:	7dfb      	ldrb	r3, [r7, #23]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d0d7      	beq.n	800e2ca <dir_alloc+0x26>
 800e31a:	e000      	b.n	800e31e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e31c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e31e:	7dfb      	ldrb	r3, [r7, #23]
 800e320:	2b04      	cmp	r3, #4
 800e322:	d101      	bne.n	800e328 <dir_alloc+0x84>
 800e324:	2307      	movs	r3, #7
 800e326:	75fb      	strb	r3, [r7, #23]
	return res;
 800e328:	7dfb      	ldrb	r3, [r7, #23]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3718      	adds	r7, #24
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}

0800e332 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e332:	b580      	push	{r7, lr}
 800e334:	b084      	sub	sp, #16
 800e336:	af00      	add	r7, sp, #0
 800e338:	6078      	str	r0, [r7, #4]
 800e33a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	331a      	adds	r3, #26
 800e340:	4618      	mov	r0, r3
 800e342:	f7ff f841 	bl	800d3c8 <ld_word>
 800e346:	4603      	mov	r3, r0
 800e348:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	2b03      	cmp	r3, #3
 800e350:	d109      	bne.n	800e366 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	3314      	adds	r3, #20
 800e356:	4618      	mov	r0, r3
 800e358:	f7ff f836 	bl	800d3c8 <ld_word>
 800e35c:	4603      	mov	r3, r0
 800e35e:	041b      	lsls	r3, r3, #16
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	4313      	orrs	r3, r2
 800e364:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e366:	68fb      	ldr	r3, [r7, #12]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	331a      	adds	r3, #26
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	b292      	uxth	r2, r2
 800e384:	4611      	mov	r1, r2
 800e386:	4618      	mov	r0, r3
 800e388:	f7ff f859 	bl	800d43e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	2b03      	cmp	r3, #3
 800e392:	d109      	bne.n	800e3a8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	f103 0214 	add.w	r2, r3, #20
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	0c1b      	lsrs	r3, r3, #16
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	4610      	mov	r0, r2
 800e3a4:	f7ff f84b 	bl	800d43e <st_word>
	}
}
 800e3a8:	bf00      	nop
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e3b0:	b590      	push	{r4, r7, lr}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	331a      	adds	r3, #26
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7ff f802 	bl	800d3c8 <ld_word>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d001      	beq.n	800e3ce <cmp_lfn+0x1e>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	e059      	b.n	800e482 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3d6:	1e5a      	subs	r2, r3, #1
 800e3d8:	4613      	mov	r3, r2
 800e3da:	005b      	lsls	r3, r3, #1
 800e3dc:	4413      	add	r3, r2
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	4413      	add	r3, r2
 800e3e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	81fb      	strh	r3, [r7, #14]
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	613b      	str	r3, [r7, #16]
 800e3ec:	e033      	b.n	800e456 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e3ee:	4a27      	ldr	r2, [pc, #156]	; (800e48c <cmp_lfn+0xdc>)
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7fe ffe3 	bl	800d3c8 <ld_word>
 800e402:	4603      	mov	r3, r0
 800e404:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e406:	89fb      	ldrh	r3, [r7, #14]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d01a      	beq.n	800e442 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	2bfe      	cmp	r3, #254	; 0xfe
 800e410:	d812      	bhi.n	800e438 <cmp_lfn+0x88>
 800e412:	89bb      	ldrh	r3, [r7, #12]
 800e414:	4618      	mov	r0, r3
 800e416:	f002 f99f 	bl	8010758 <ff_wtoupper>
 800e41a:	4603      	mov	r3, r0
 800e41c:	461c      	mov	r4, r3
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	1c5a      	adds	r2, r3, #1
 800e422:	617a      	str	r2, [r7, #20]
 800e424:	005b      	lsls	r3, r3, #1
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	4413      	add	r3, r2
 800e42a:	881b      	ldrh	r3, [r3, #0]
 800e42c:	4618      	mov	r0, r3
 800e42e:	f002 f993 	bl	8010758 <ff_wtoupper>
 800e432:	4603      	mov	r3, r0
 800e434:	429c      	cmp	r4, r3
 800e436:	d001      	beq.n	800e43c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e438:	2300      	movs	r3, #0
 800e43a:	e022      	b.n	800e482 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e43c:	89bb      	ldrh	r3, [r7, #12]
 800e43e:	81fb      	strh	r3, [r7, #14]
 800e440:	e006      	b.n	800e450 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e442:	89bb      	ldrh	r3, [r7, #12]
 800e444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e448:	4293      	cmp	r3, r2
 800e44a:	d001      	beq.n	800e450 <cmp_lfn+0xa0>
 800e44c:	2300      	movs	r3, #0
 800e44e:	e018      	b.n	800e482 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	3301      	adds	r3, #1
 800e454:	613b      	str	r3, [r7, #16]
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	2b0c      	cmp	r3, #12
 800e45a:	d9c8      	bls.n	800e3ee <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00b      	beq.n	800e480 <cmp_lfn+0xd0>
 800e468:	89fb      	ldrh	r3, [r7, #14]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d008      	beq.n	800e480 <cmp_lfn+0xd0>
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	005b      	lsls	r3, r3, #1
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	4413      	add	r3, r2
 800e476:	881b      	ldrh	r3, [r3, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d001      	beq.n	800e480 <cmp_lfn+0xd0>
 800e47c:	2300      	movs	r3, #0
 800e47e:	e000      	b.n	800e482 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e480:	2301      	movs	r3, #1
}
 800e482:	4618      	mov	r0, r3
 800e484:	371c      	adds	r7, #28
 800e486:	46bd      	mov	sp, r7
 800e488:	bd90      	pop	{r4, r7, pc}
 800e48a:	bf00      	nop
 800e48c:	08011b64 	.word	0x08011b64

0800e490 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	331a      	adds	r3, #26
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fe ff92 	bl	800d3c8 <ld_word>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <pick_lfn+0x1e>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	e04d      	b.n	800e54a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4b6:	1e5a      	subs	r2, r3, #1
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	4413      	add	r3, r2
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4413      	add	r3, r2
 800e4c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	81fb      	strh	r3, [r7, #14]
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	613b      	str	r3, [r7, #16]
 800e4cc:	e028      	b.n	800e520 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e4ce:	4a21      	ldr	r2, [pc, #132]	; (800e554 <pick_lfn+0xc4>)
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	4413      	add	r3, r2
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fe ff73 	bl	800d3c8 <ld_word>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e4e6:	89fb      	ldrh	r3, [r7, #14]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d00f      	beq.n	800e50c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	2bfe      	cmp	r3, #254	; 0xfe
 800e4f0:	d901      	bls.n	800e4f6 <pick_lfn+0x66>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	e029      	b.n	800e54a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e4f6:	89bb      	ldrh	r3, [r7, #12]
 800e4f8:	81fb      	strh	r3, [r7, #14]
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	1c5a      	adds	r2, r3, #1
 800e4fe:	617a      	str	r2, [r7, #20]
 800e500:	005b      	lsls	r3, r3, #1
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	4413      	add	r3, r2
 800e506:	89fa      	ldrh	r2, [r7, #14]
 800e508:	801a      	strh	r2, [r3, #0]
 800e50a:	e006      	b.n	800e51a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e50c:	89bb      	ldrh	r3, [r7, #12]
 800e50e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e512:	4293      	cmp	r3, r2
 800e514:	d001      	beq.n	800e51a <pick_lfn+0x8a>
 800e516:	2300      	movs	r3, #0
 800e518:	e017      	b.n	800e54a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	3301      	adds	r3, #1
 800e51e:	613b      	str	r3, [r7, #16]
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2b0c      	cmp	r3, #12
 800e524:	d9d3      	bls.n	800e4ce <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00a      	beq.n	800e548 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	2bfe      	cmp	r3, #254	; 0xfe
 800e536:	d901      	bls.n	800e53c <pick_lfn+0xac>
 800e538:	2300      	movs	r3, #0
 800e53a:	e006      	b.n	800e54a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	005b      	lsls	r3, r3, #1
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	4413      	add	r3, r2
 800e544:	2200      	movs	r2, #0
 800e546:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e548:	2301      	movs	r3, #1
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3718      	adds	r7, #24
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	08011b64 	.word	0x08011b64

0800e558 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	4611      	mov	r1, r2
 800e564:	461a      	mov	r2, r3
 800e566:	460b      	mov	r3, r1
 800e568:	71fb      	strb	r3, [r7, #7]
 800e56a:	4613      	mov	r3, r2
 800e56c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	330d      	adds	r3, #13
 800e572:	79ba      	ldrb	r2, [r7, #6]
 800e574:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	330b      	adds	r3, #11
 800e57a:	220f      	movs	r2, #15
 800e57c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	330c      	adds	r3, #12
 800e582:	2200      	movs	r2, #0
 800e584:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	331a      	adds	r3, #26
 800e58a:	2100      	movs	r1, #0
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7fe ff56 	bl	800d43e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e592:	79fb      	ldrb	r3, [r7, #7]
 800e594:	1e5a      	subs	r2, r3, #1
 800e596:	4613      	mov	r3, r2
 800e598:	005b      	lsls	r3, r3, #1
 800e59a:	4413      	add	r3, r2
 800e59c:	009b      	lsls	r3, r3, #2
 800e59e:	4413      	add	r3, r2
 800e5a0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	82fb      	strh	r3, [r7, #22]
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e5aa:	8afb      	ldrh	r3, [r7, #22]
 800e5ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d007      	beq.n	800e5c4 <put_lfn+0x6c>
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	1c5a      	adds	r2, r3, #1
 800e5b8:	61fa      	str	r2, [r7, #28]
 800e5ba:	005b      	lsls	r3, r3, #1
 800e5bc:	68fa      	ldr	r2, [r7, #12]
 800e5be:	4413      	add	r3, r2
 800e5c0:	881b      	ldrh	r3, [r3, #0]
 800e5c2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e5c4:	4a17      	ldr	r2, [pc, #92]	; (800e624 <put_lfn+0xcc>)
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	8afa      	ldrh	r2, [r7, #22]
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fe ff31 	bl	800d43e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e5dc:	8afb      	ldrh	r3, [r7, #22]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d102      	bne.n	800e5e8 <put_lfn+0x90>
 800e5e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5e6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	61bb      	str	r3, [r7, #24]
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	2b0c      	cmp	r3, #12
 800e5f2:	d9da      	bls.n	800e5aa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e5f4:	8afb      	ldrh	r3, [r7, #22]
 800e5f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d006      	beq.n	800e60c <put_lfn+0xb4>
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	005b      	lsls	r3, r3, #1
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	4413      	add	r3, r2
 800e606:	881b      	ldrh	r3, [r3, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d103      	bne.n	800e614 <put_lfn+0xbc>
 800e60c:	79fb      	ldrb	r3, [r7, #7]
 800e60e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e612:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	79fa      	ldrb	r2, [r7, #7]
 800e618:	701a      	strb	r2, [r3, #0]
}
 800e61a:	bf00      	nop
 800e61c:	3720      	adds	r7, #32
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	08011b64 	.word	0x08011b64

0800e628 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b08c      	sub	sp, #48	; 0x30
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
 800e634:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e636:	220b      	movs	r2, #11
 800e638:	68b9      	ldr	r1, [r7, #8]
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f7fe ff46 	bl	800d4cc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	2b05      	cmp	r3, #5
 800e644:	d92b      	bls.n	800e69e <gen_numname+0x76>
		sr = seq;
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e64a:	e022      	b.n	800e692 <gen_numname+0x6a>
			wc = *lfn++;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	1c9a      	adds	r2, r3, #2
 800e650:	607a      	str	r2, [r7, #4]
 800e652:	881b      	ldrh	r3, [r3, #0]
 800e654:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e656:	2300      	movs	r3, #0
 800e658:	62bb      	str	r3, [r7, #40]	; 0x28
 800e65a:	e017      	b.n	800e68c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	005a      	lsls	r2, r3, #1
 800e660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e662:	f003 0301 	and.w	r3, r3, #1
 800e666:	4413      	add	r3, r2
 800e668:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e66a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e66c:	085b      	lsrs	r3, r3, #1
 800e66e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e676:	2b00      	cmp	r3, #0
 800e678:	d005      	beq.n	800e686 <gen_numname+0x5e>
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e680:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e684:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e688:	3301      	adds	r3, #1
 800e68a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68e:	2b0f      	cmp	r3, #15
 800e690:	d9e4      	bls.n	800e65c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1d8      	bne.n	800e64c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e69a:	69fb      	ldr	r3, [r7, #28]
 800e69c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e69e:	2307      	movs	r3, #7
 800e6a0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	f003 030f 	and.w	r3, r3, #15
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	3330      	adds	r3, #48	; 0x30
 800e6ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e6b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6b6:	2b39      	cmp	r3, #57	; 0x39
 800e6b8:	d904      	bls.n	800e6c4 <gen_numname+0x9c>
 800e6ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6be:	3307      	adds	r3, #7
 800e6c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c6:	1e5a      	subs	r2, r3, #1
 800e6c8:	62ba      	str	r2, [r7, #40]	; 0x28
 800e6ca:	3330      	adds	r3, #48	; 0x30
 800e6cc:	443b      	add	r3, r7
 800e6ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e6d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	091b      	lsrs	r3, r3, #4
 800e6da:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d1df      	bne.n	800e6a2 <gen_numname+0x7a>
	ns[i] = '~';
 800e6e2:	f107 0214 	add.w	r2, r7, #20
 800e6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e8:	4413      	add	r3, r2
 800e6ea:	227e      	movs	r2, #126	; 0x7e
 800e6ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	627b      	str	r3, [r7, #36]	; 0x24
 800e6f2:	e002      	b.n	800e6fa <gen_numname+0xd2>
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e6fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d205      	bcs.n	800e70e <gen_numname+0xe6>
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e706:	4413      	add	r3, r2
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	2b20      	cmp	r3, #32
 800e70c:	d1f2      	bne.n	800e6f4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e710:	2b07      	cmp	r3, #7
 800e712:	d807      	bhi.n	800e724 <gen_numname+0xfc>
 800e714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e716:	1c5a      	adds	r2, r3, #1
 800e718:	62ba      	str	r2, [r7, #40]	; 0x28
 800e71a:	3330      	adds	r3, #48	; 0x30
 800e71c:	443b      	add	r3, r7
 800e71e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e722:	e000      	b.n	800e726 <gen_numname+0xfe>
 800e724:	2120      	movs	r1, #32
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	1c5a      	adds	r2, r3, #1
 800e72a:	627a      	str	r2, [r7, #36]	; 0x24
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	4413      	add	r3, r2
 800e730:	460a      	mov	r2, r1
 800e732:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	2b07      	cmp	r3, #7
 800e738:	d9e9      	bls.n	800e70e <gen_numname+0xe6>
}
 800e73a:	bf00      	nop
 800e73c:	bf00      	nop
 800e73e:	3730      	adds	r7, #48	; 0x30
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}

0800e744 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e74c:	2300      	movs	r3, #0
 800e74e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e750:	230b      	movs	r3, #11
 800e752:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e754:	7bfb      	ldrb	r3, [r7, #15]
 800e756:	b2da      	uxtb	r2, r3
 800e758:	0852      	lsrs	r2, r2, #1
 800e75a:	01db      	lsls	r3, r3, #7
 800e75c:	4313      	orrs	r3, r2
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	1c59      	adds	r1, r3, #1
 800e764:	6079      	str	r1, [r7, #4]
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	4413      	add	r3, r2
 800e76a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	3b01      	subs	r3, #1
 800e770:	60bb      	str	r3, [r7, #8]
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1ed      	bne.n	800e754 <sum_sfn+0x10>
	return sum;
 800e778:	7bfb      	ldrb	r3, [r7, #15]
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3714      	adds	r7, #20
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr

0800e786 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e786:	b580      	push	{r7, lr}
 800e788:	b086      	sub	sp, #24
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
 800e78e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e790:	2304      	movs	r3, #4
 800e792:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e79a:	23ff      	movs	r3, #255	; 0xff
 800e79c:	757b      	strb	r3, [r7, #21]
 800e79e:	23ff      	movs	r3, #255	; 0xff
 800e7a0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e7a2:	e081      	b.n	800e8a8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	69db      	ldr	r3, [r3, #28]
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	6938      	ldr	r0, [r7, #16]
 800e7ac:	f7ff f8bc 	bl	800d928 <move_window>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e7b4:	7dfb      	ldrb	r3, [r7, #23]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d17c      	bne.n	800e8b4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6a1b      	ldr	r3, [r3, #32]
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e7c2:	7dbb      	ldrb	r3, [r7, #22]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d102      	bne.n	800e7ce <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e7c8:	2304      	movs	r3, #4
 800e7ca:	75fb      	strb	r3, [r7, #23]
 800e7cc:	e077      	b.n	800e8be <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6a1b      	ldr	r3, [r3, #32]
 800e7d2:	330b      	adds	r3, #11
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7da:	73fb      	strb	r3, [r7, #15]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	7bfa      	ldrb	r2, [r7, #15]
 800e7e0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e7e2:	7dbb      	ldrb	r3, [r7, #22]
 800e7e4:	2be5      	cmp	r3, #229	; 0xe5
 800e7e6:	d00e      	beq.n	800e806 <dir_read+0x80>
 800e7e8:	7dbb      	ldrb	r3, [r7, #22]
 800e7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e7ec:	d00b      	beq.n	800e806 <dir_read+0x80>
 800e7ee:	7bfb      	ldrb	r3, [r7, #15]
 800e7f0:	f023 0320 	bic.w	r3, r3, #32
 800e7f4:	2b08      	cmp	r3, #8
 800e7f6:	bf0c      	ite	eq
 800e7f8:	2301      	moveq	r3, #1
 800e7fa:	2300      	movne	r3, #0
 800e7fc:	b2db      	uxtb	r3, r3
 800e7fe:	461a      	mov	r2, r3
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	4293      	cmp	r3, r2
 800e804:	d002      	beq.n	800e80c <dir_read+0x86>
				ord = 0xFF;
 800e806:	23ff      	movs	r3, #255	; 0xff
 800e808:	757b      	strb	r3, [r7, #21]
 800e80a:	e044      	b.n	800e896 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e80c:	7bfb      	ldrb	r3, [r7, #15]
 800e80e:	2b0f      	cmp	r3, #15
 800e810:	d12f      	bne.n	800e872 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e812:	7dbb      	ldrb	r3, [r7, #22]
 800e814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d00d      	beq.n	800e838 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6a1b      	ldr	r3, [r3, #32]
 800e820:	7b5b      	ldrb	r3, [r3, #13]
 800e822:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e824:	7dbb      	ldrb	r3, [r7, #22]
 800e826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e82a:	75bb      	strb	r3, [r7, #22]
 800e82c:	7dbb      	ldrb	r3, [r7, #22]
 800e82e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	695a      	ldr	r2, [r3, #20]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e838:	7dba      	ldrb	r2, [r7, #22]
 800e83a:	7d7b      	ldrb	r3, [r7, #21]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d115      	bne.n	800e86c <dir_read+0xe6>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6a1b      	ldr	r3, [r3, #32]
 800e844:	330d      	adds	r3, #13
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	7d3a      	ldrb	r2, [r7, #20]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d10e      	bne.n	800e86c <dir_read+0xe6>
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	68da      	ldr	r2, [r3, #12]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6a1b      	ldr	r3, [r3, #32]
 800e856:	4619      	mov	r1, r3
 800e858:	4610      	mov	r0, r2
 800e85a:	f7ff fe19 	bl	800e490 <pick_lfn>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d003      	beq.n	800e86c <dir_read+0xe6>
 800e864:	7d7b      	ldrb	r3, [r7, #21]
 800e866:	3b01      	subs	r3, #1
 800e868:	b2db      	uxtb	r3, r3
 800e86a:	e000      	b.n	800e86e <dir_read+0xe8>
 800e86c:	23ff      	movs	r3, #255	; 0xff
 800e86e:	757b      	strb	r3, [r7, #21]
 800e870:	e011      	b.n	800e896 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e872:	7d7b      	ldrb	r3, [r7, #21]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d109      	bne.n	800e88c <dir_read+0x106>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6a1b      	ldr	r3, [r3, #32]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7ff ff61 	bl	800e744 <sum_sfn>
 800e882:	4603      	mov	r3, r0
 800e884:	461a      	mov	r2, r3
 800e886:	7d3b      	ldrb	r3, [r7, #20]
 800e888:	4293      	cmp	r3, r2
 800e88a:	d015      	beq.n	800e8b8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f04f 32ff 	mov.w	r2, #4294967295
 800e892:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e894:	e010      	b.n	800e8b8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e896:	2100      	movs	r1, #0
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f7ff fc3e 	bl	800e11a <dir_next>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e8a2:	7dfb      	ldrb	r3, [r7, #23]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d109      	bne.n	800e8bc <dir_read+0x136>
	while (dp->sect) {
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	69db      	ldr	r3, [r3, #28]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f47f af79 	bne.w	800e7a4 <dir_read+0x1e>
 800e8b2:	e004      	b.n	800e8be <dir_read+0x138>
		if (res != FR_OK) break;
 800e8b4:	bf00      	nop
 800e8b6:	e002      	b.n	800e8be <dir_read+0x138>
					break;
 800e8b8:	bf00      	nop
 800e8ba:	e000      	b.n	800e8be <dir_read+0x138>
		if (res != FR_OK) break;
 800e8bc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e8be:	7dfb      	ldrb	r3, [r7, #23]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d002      	beq.n	800e8ca <dir_read+0x144>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	61da      	str	r2, [r3, #28]
	return res;
 800e8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3718      	adds	r7, #24
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e8e2:	2100      	movs	r1, #0
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f7ff fb9d 	bl	800e024 <dir_sdi>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e8ee:	7dfb      	ldrb	r3, [r7, #23]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d001      	beq.n	800e8f8 <dir_find+0x24>
 800e8f4:	7dfb      	ldrb	r3, [r7, #23]
 800e8f6:	e0a9      	b.n	800ea4c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e8f8:	23ff      	movs	r3, #255	; 0xff
 800e8fa:	753b      	strb	r3, [r7, #20]
 800e8fc:	7d3b      	ldrb	r3, [r7, #20]
 800e8fe:	757b      	strb	r3, [r7, #21]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f04f 32ff 	mov.w	r2, #4294967295
 800e906:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	69db      	ldr	r3, [r3, #28]
 800e90c:	4619      	mov	r1, r3
 800e90e:	6938      	ldr	r0, [r7, #16]
 800e910:	f7ff f80a 	bl	800d928 <move_window>
 800e914:	4603      	mov	r3, r0
 800e916:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e918:	7dfb      	ldrb	r3, [r7, #23]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f040 8090 	bne.w	800ea40 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a1b      	ldr	r3, [r3, #32]
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e928:	7dbb      	ldrb	r3, [r7, #22]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d102      	bne.n	800e934 <dir_find+0x60>
 800e92e:	2304      	movs	r3, #4
 800e930:	75fb      	strb	r3, [r7, #23]
 800e932:	e08a      	b.n	800ea4a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a1b      	ldr	r3, [r3, #32]
 800e938:	330b      	adds	r3, #11
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e940:	73fb      	strb	r3, [r7, #15]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	7bfa      	ldrb	r2, [r7, #15]
 800e946:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e948:	7dbb      	ldrb	r3, [r7, #22]
 800e94a:	2be5      	cmp	r3, #229	; 0xe5
 800e94c:	d007      	beq.n	800e95e <dir_find+0x8a>
 800e94e:	7bfb      	ldrb	r3, [r7, #15]
 800e950:	f003 0308 	and.w	r3, r3, #8
 800e954:	2b00      	cmp	r3, #0
 800e956:	d009      	beq.n	800e96c <dir_find+0x98>
 800e958:	7bfb      	ldrb	r3, [r7, #15]
 800e95a:	2b0f      	cmp	r3, #15
 800e95c:	d006      	beq.n	800e96c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e95e:	23ff      	movs	r3, #255	; 0xff
 800e960:	757b      	strb	r3, [r7, #21]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f04f 32ff 	mov.w	r2, #4294967295
 800e968:	631a      	str	r2, [r3, #48]	; 0x30
 800e96a:	e05e      	b.n	800ea2a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e96c:	7bfb      	ldrb	r3, [r7, #15]
 800e96e:	2b0f      	cmp	r3, #15
 800e970:	d136      	bne.n	800e9e0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d154      	bne.n	800ea2a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e980:	7dbb      	ldrb	r3, [r7, #22]
 800e982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e986:	2b00      	cmp	r3, #0
 800e988:	d00d      	beq.n	800e9a6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	7b5b      	ldrb	r3, [r3, #13]
 800e990:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e992:	7dbb      	ldrb	r3, [r7, #22]
 800e994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e998:	75bb      	strb	r3, [r7, #22]
 800e99a:	7dbb      	ldrb	r3, [r7, #22]
 800e99c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	695a      	ldr	r2, [r3, #20]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e9a6:	7dba      	ldrb	r2, [r7, #22]
 800e9a8:	7d7b      	ldrb	r3, [r7, #21]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d115      	bne.n	800e9da <dir_find+0x106>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6a1b      	ldr	r3, [r3, #32]
 800e9b2:	330d      	adds	r3, #13
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	7d3a      	ldrb	r2, [r7, #20]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d10e      	bne.n	800e9da <dir_find+0x106>
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	68da      	ldr	r2, [r3, #12]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6a1b      	ldr	r3, [r3, #32]
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	f7ff fcf2 	bl	800e3b0 <cmp_lfn>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d003      	beq.n	800e9da <dir_find+0x106>
 800e9d2:	7d7b      	ldrb	r3, [r7, #21]
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	e000      	b.n	800e9dc <dir_find+0x108>
 800e9da:	23ff      	movs	r3, #255	; 0xff
 800e9dc:	757b      	strb	r3, [r7, #21]
 800e9de:	e024      	b.n	800ea2a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e9e0:	7d7b      	ldrb	r3, [r7, #21]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d109      	bne.n	800e9fa <dir_find+0x126>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6a1b      	ldr	r3, [r3, #32]
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7ff feaa 	bl	800e744 <sum_sfn>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	7d3b      	ldrb	r3, [r7, #20]
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d024      	beq.n	800ea44 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea00:	f003 0301 	and.w	r3, r3, #1
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10a      	bne.n	800ea1e <dir_find+0x14a>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6a18      	ldr	r0, [r3, #32]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3324      	adds	r3, #36	; 0x24
 800ea10:	220b      	movs	r2, #11
 800ea12:	4619      	mov	r1, r3
 800ea14:	f7fe fd96 	bl	800d544 <mem_cmp>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d014      	beq.n	800ea48 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ea1e:	23ff      	movs	r3, #255	; 0xff
 800ea20:	757b      	strb	r3, [r7, #21]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f04f 32ff 	mov.w	r2, #4294967295
 800ea28:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f7ff fb74 	bl	800e11a <dir_next>
 800ea32:	4603      	mov	r3, r0
 800ea34:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ea36:	7dfb      	ldrb	r3, [r7, #23]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f43f af65 	beq.w	800e908 <dir_find+0x34>
 800ea3e:	e004      	b.n	800ea4a <dir_find+0x176>
		if (res != FR_OK) break;
 800ea40:	bf00      	nop
 800ea42:	e002      	b.n	800ea4a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ea44:	bf00      	nop
 800ea46:	e000      	b.n	800ea4a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ea48:	bf00      	nop

	return res;
 800ea4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3718      	adds	r7, #24
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b08c      	sub	sp, #48	; 0x30
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea68:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d001      	beq.n	800ea74 <dir_register+0x20>
 800ea70:	2306      	movs	r3, #6
 800ea72:	e0e0      	b.n	800ec36 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ea74:	2300      	movs	r3, #0
 800ea76:	627b      	str	r3, [r7, #36]	; 0x24
 800ea78:	e002      	b.n	800ea80 <dir_register+0x2c>
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	68da      	ldr	r2, [r3, #12]
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	005b      	lsls	r3, r3, #1
 800ea88:	4413      	add	r3, r2
 800ea8a:	881b      	ldrh	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1f4      	bne.n	800ea7a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ea96:	f107 030c 	add.w	r3, r7, #12
 800ea9a:	220c      	movs	r2, #12
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fe fd15 	bl	800d4cc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
 800eaa4:	f003 0301 	and.w	r3, r3, #1
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d032      	beq.n	800eb12 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2240      	movs	r2, #64	; 0x40
 800eab0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800eab4:	2301      	movs	r3, #1
 800eab6:	62bb      	str	r3, [r7, #40]	; 0x28
 800eab8:	e016      	b.n	800eae8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	68da      	ldr	r2, [r3, #12]
 800eac4:	f107 010c 	add.w	r1, r7, #12
 800eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaca:	f7ff fdad 	bl	800e628 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7ff ff00 	bl	800e8d4 <dir_find>
 800ead4:	4603      	mov	r3, r0
 800ead6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800eada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d106      	bne.n	800eaf0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800eae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae4:	3301      	adds	r3, #1
 800eae6:	62bb      	str	r3, [r7, #40]	; 0x28
 800eae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaea:	2b63      	cmp	r3, #99	; 0x63
 800eaec:	d9e5      	bls.n	800eaba <dir_register+0x66>
 800eaee:	e000      	b.n	800eaf2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800eaf0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800eaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf4:	2b64      	cmp	r3, #100	; 0x64
 800eaf6:	d101      	bne.n	800eafc <dir_register+0xa8>
 800eaf8:	2307      	movs	r3, #7
 800eafa:	e09c      	b.n	800ec36 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800eafc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb00:	2b04      	cmp	r3, #4
 800eb02:	d002      	beq.n	800eb0a <dir_register+0xb6>
 800eb04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb08:	e095      	b.n	800ec36 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800eb0a:	7dfa      	ldrb	r2, [r7, #23]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800eb12:	7dfb      	ldrb	r3, [r7, #23]
 800eb14:	f003 0302 	and.w	r3, r3, #2
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d007      	beq.n	800eb2c <dir_register+0xd8>
 800eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1e:	330c      	adds	r3, #12
 800eb20:	4a47      	ldr	r2, [pc, #284]	; (800ec40 <dir_register+0x1ec>)
 800eb22:	fba2 2303 	umull	r2, r3, r2, r3
 800eb26:	089b      	lsrs	r3, r3, #2
 800eb28:	3301      	adds	r3, #1
 800eb2a:	e000      	b.n	800eb2e <dir_register+0xda>
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800eb30:	6a39      	ldr	r1, [r7, #32]
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f7ff fbb6 	bl	800e2a4 <dir_alloc>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800eb3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d148      	bne.n	800ebd8 <dir_register+0x184>
 800eb46:	6a3b      	ldr	r3, [r7, #32]
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	623b      	str	r3, [r7, #32]
 800eb4c:	6a3b      	ldr	r3, [r7, #32]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d042      	beq.n	800ebd8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	695a      	ldr	r2, [r3, #20]
 800eb56:	6a3b      	ldr	r3, [r7, #32]
 800eb58:	015b      	lsls	r3, r3, #5
 800eb5a:	1ad3      	subs	r3, r2, r3
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f7ff fa60 	bl	800e024 <dir_sdi>
 800eb64:	4603      	mov	r3, r0
 800eb66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800eb6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d132      	bne.n	800ebd8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	3324      	adds	r3, #36	; 0x24
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7ff fde4 	bl	800e744 <sum_sfn>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	69db      	ldr	r3, [r3, #28]
 800eb84:	4619      	mov	r1, r3
 800eb86:	69f8      	ldr	r0, [r7, #28]
 800eb88:	f7fe fece 	bl	800d928 <move_window>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800eb92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d11d      	bne.n	800ebd6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	68d8      	ldr	r0, [r3, #12]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6a19      	ldr	r1, [r3, #32]
 800eba2:	6a3b      	ldr	r3, [r7, #32]
 800eba4:	b2da      	uxtb	r2, r3
 800eba6:	7efb      	ldrb	r3, [r7, #27]
 800eba8:	f7ff fcd6 	bl	800e558 <put_lfn>
				fs->wflag = 1;
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7ff fab0 	bl	800e11a <dir_next>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ebc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d107      	bne.n	800ebd8 <dir_register+0x184>
 800ebc8:	6a3b      	ldr	r3, [r7, #32]
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	623b      	str	r3, [r7, #32]
 800ebce:	6a3b      	ldr	r3, [r7, #32]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d1d5      	bne.n	800eb80 <dir_register+0x12c>
 800ebd4:	e000      	b.n	800ebd8 <dir_register+0x184>
				if (res != FR_OK) break;
 800ebd6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ebd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d128      	bne.n	800ec32 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	69db      	ldr	r3, [r3, #28]
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	69f8      	ldr	r0, [r7, #28]
 800ebe8:	f7fe fe9e 	bl	800d928 <move_window>
 800ebec:	4603      	mov	r3, r0
 800ebee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ebf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d11b      	bne.n	800ec32 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a1b      	ldr	r3, [r3, #32]
 800ebfe:	2220      	movs	r2, #32
 800ec00:	2100      	movs	r1, #0
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7fe fc83 	bl	800d50e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6a18      	ldr	r0, [r3, #32]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	3324      	adds	r3, #36	; 0x24
 800ec10:	220b      	movs	r2, #11
 800ec12:	4619      	mov	r1, r3
 800ec14:	f7fe fc5a 	bl	800d4cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	330c      	adds	r3, #12
 800ec24:	f002 0218 	and.w	r2, r2, #24
 800ec28:	b2d2      	uxtb	r2, r2
 800ec2a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ec32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3730      	adds	r7, #48	; 0x30
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	4ec4ec4f 	.word	0x4ec4ec4f

0800ec44 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b088      	sub	sp, #32
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	2200      	movs	r2, #0
 800ec58:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	69db      	ldr	r3, [r3, #28]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	f000 80c9 	beq.w	800edf6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec6c:	d032      	beq.n	800ecd4 <get_fileinfo+0x90>
			i = j = 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	61bb      	str	r3, [r7, #24]
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ec76:	e01b      	b.n	800ecb0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ec78:	89fb      	ldrh	r3, [r7, #14]
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f001 fd2f 	bl	80106e0 <ff_convert>
 800ec82:	4603      	mov	r3, r0
 800ec84:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ec86:	89fb      	ldrh	r3, [r7, #14]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d102      	bne.n	800ec92 <get_fileinfo+0x4e>
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	61fb      	str	r3, [r7, #28]
 800ec90:	e01a      	b.n	800ecc8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	2bfe      	cmp	r3, #254	; 0xfe
 800ec96:	d902      	bls.n	800ec9e <get_fileinfo+0x5a>
 800ec98:	2300      	movs	r3, #0
 800ec9a:	61fb      	str	r3, [r7, #28]
 800ec9c:	e014      	b.n	800ecc8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ec9e:	69fb      	ldr	r3, [r7, #28]
 800eca0:	1c5a      	adds	r2, r3, #1
 800eca2:	61fa      	str	r2, [r7, #28]
 800eca4:	89fa      	ldrh	r2, [r7, #14]
 800eca6:	b2d1      	uxtb	r1, r2
 800eca8:	683a      	ldr	r2, [r7, #0]
 800ecaa:	4413      	add	r3, r2
 800ecac:	460a      	mov	r2, r1
 800ecae:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	68da      	ldr	r2, [r3, #12]
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	1c59      	adds	r1, r3, #1
 800ecb8:	61b9      	str	r1, [r7, #24]
 800ecba:	005b      	lsls	r3, r3, #1
 800ecbc:	4413      	add	r3, r2
 800ecbe:	881b      	ldrh	r3, [r3, #0]
 800ecc0:	81fb      	strh	r3, [r7, #14]
 800ecc2:	89fb      	ldrh	r3, [r7, #14]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1d7      	bne.n	800ec78 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ecc8:	683a      	ldr	r2, [r7, #0]
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	4413      	add	r3, r2
 800ecce:	3316      	adds	r3, #22
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	61bb      	str	r3, [r7, #24]
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ecdc:	683a      	ldr	r2, [r7, #0]
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	4413      	add	r3, r2
 800ece2:	3316      	adds	r3, #22
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800ece8:	e04c      	b.n	800ed84 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a1a      	ldr	r2, [r3, #32]
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	1c59      	adds	r1, r3, #1
 800ecf2:	61f9      	str	r1, [r7, #28]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ecfa:	7dfb      	ldrb	r3, [r7, #23]
 800ecfc:	2b20      	cmp	r3, #32
 800ecfe:	d100      	bne.n	800ed02 <get_fileinfo+0xbe>
 800ed00:	e040      	b.n	800ed84 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ed02:	7dfb      	ldrb	r3, [r7, #23]
 800ed04:	2b05      	cmp	r3, #5
 800ed06:	d101      	bne.n	800ed0c <get_fileinfo+0xc8>
 800ed08:	23e5      	movs	r3, #229	; 0xe5
 800ed0a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	2b09      	cmp	r3, #9
 800ed10:	d10f      	bne.n	800ed32 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800ed12:	89bb      	ldrh	r3, [r7, #12]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d105      	bne.n	800ed24 <get_fileinfo+0xe0>
 800ed18:	683a      	ldr	r2, [r7, #0]
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	3316      	adds	r3, #22
 800ed20:	222e      	movs	r2, #46	; 0x2e
 800ed22:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	61ba      	str	r2, [r7, #24]
 800ed2a:	683a      	ldr	r2, [r7, #0]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	222e      	movs	r2, #46	; 0x2e
 800ed30:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	4413      	add	r3, r2
 800ed38:	3309      	adds	r3, #9
 800ed3a:	7dfa      	ldrb	r2, [r7, #23]
 800ed3c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ed3e:	89bb      	ldrh	r3, [r7, #12]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d11c      	bne.n	800ed7e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ed44:	7dfb      	ldrb	r3, [r7, #23]
 800ed46:	2b40      	cmp	r3, #64	; 0x40
 800ed48:	d913      	bls.n	800ed72 <get_fileinfo+0x12e>
 800ed4a:	7dfb      	ldrb	r3, [r7, #23]
 800ed4c:	2b5a      	cmp	r3, #90	; 0x5a
 800ed4e:	d810      	bhi.n	800ed72 <get_fileinfo+0x12e>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6a1b      	ldr	r3, [r3, #32]
 800ed54:	330c      	adds	r3, #12
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	2b08      	cmp	r3, #8
 800ed5e:	d901      	bls.n	800ed64 <get_fileinfo+0x120>
 800ed60:	2310      	movs	r3, #16
 800ed62:	e000      	b.n	800ed66 <get_fileinfo+0x122>
 800ed64:	2308      	movs	r3, #8
 800ed66:	4013      	ands	r3, r2
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ed6c:	7dfb      	ldrb	r3, [r7, #23]
 800ed6e:	3320      	adds	r3, #32
 800ed70:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ed72:	683a      	ldr	r2, [r7, #0]
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	4413      	add	r3, r2
 800ed78:	3316      	adds	r3, #22
 800ed7a:	7dfa      	ldrb	r2, [r7, #23]
 800ed7c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ed7e:	69bb      	ldr	r3, [r7, #24]
 800ed80:	3301      	adds	r3, #1
 800ed82:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	2b0a      	cmp	r3, #10
 800ed88:	d9af      	bls.n	800ecea <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800ed8a:	89bb      	ldrh	r3, [r7, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d10d      	bne.n	800edac <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800ed90:	683a      	ldr	r2, [r7, #0]
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	4413      	add	r3, r2
 800ed96:	3316      	adds	r3, #22
 800ed98:	2200      	movs	r2, #0
 800ed9a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a1b      	ldr	r3, [r3, #32]
 800eda0:	330c      	adds	r3, #12
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d101      	bne.n	800edac <get_fileinfo+0x168>
 800eda8:	2300      	movs	r3, #0
 800edaa:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800edac:	683a      	ldr	r2, [r7, #0]
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	4413      	add	r3, r2
 800edb2:	3309      	adds	r3, #9
 800edb4:	2200      	movs	r2, #0
 800edb6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6a1b      	ldr	r3, [r3, #32]
 800edbc:	7ada      	ldrb	r2, [r3, #11]
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6a1b      	ldr	r3, [r3, #32]
 800edc6:	331c      	adds	r3, #28
 800edc8:	4618      	mov	r0, r3
 800edca:	f7fe fb15 	bl	800d3f8 <ld_dword>
 800edce:	4602      	mov	r2, r0
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6a1b      	ldr	r3, [r3, #32]
 800edd8:	3316      	adds	r3, #22
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fe fb0c 	bl	800d3f8 <ld_dword>
 800ede0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	80da      	strh	r2, [r3, #6]
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	0c1b      	lsrs	r3, r3, #16
 800edee:	b29a      	uxth	r2, r3
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	809a      	strh	r2, [r3, #4]
 800edf4:	e000      	b.n	800edf8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800edf6:	bf00      	nop
}
 800edf8:	3720      	adds	r7, #32
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
	...

0800ee00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b08a      	sub	sp, #40	; 0x28
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	613b      	str	r3, [r7, #16]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	60fb      	str	r3, [r7, #12]
 800ee18:	2300      	movs	r3, #0
 800ee1a:	617b      	str	r3, [r7, #20]
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	1c5a      	adds	r2, r3, #1
 800ee24:	61ba      	str	r2, [r7, #24]
 800ee26:	693a      	ldr	r2, [r7, #16]
 800ee28:	4413      	add	r3, r2
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ee2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee30:	2b1f      	cmp	r3, #31
 800ee32:	d940      	bls.n	800eeb6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ee34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee36:	2b2f      	cmp	r3, #47	; 0x2f
 800ee38:	d006      	beq.n	800ee48 <create_name+0x48>
 800ee3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee3c:	2b5c      	cmp	r3, #92	; 0x5c
 800ee3e:	d110      	bne.n	800ee62 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ee40:	e002      	b.n	800ee48 <create_name+0x48>
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	3301      	adds	r3, #1
 800ee46:	61bb      	str	r3, [r7, #24]
 800ee48:	693a      	ldr	r2, [r7, #16]
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	2b2f      	cmp	r3, #47	; 0x2f
 800ee52:	d0f6      	beq.n	800ee42 <create_name+0x42>
 800ee54:	693a      	ldr	r2, [r7, #16]
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	4413      	add	r3, r2
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	2b5c      	cmp	r3, #92	; 0x5c
 800ee5e:	d0f0      	beq.n	800ee42 <create_name+0x42>
			break;
 800ee60:	e02a      	b.n	800eeb8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	2bfe      	cmp	r3, #254	; 0xfe
 800ee66:	d901      	bls.n	800ee6c <create_name+0x6c>
 800ee68:	2306      	movs	r3, #6
 800ee6a:	e17d      	b.n	800f168 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ee6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ee72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee74:	2101      	movs	r1, #1
 800ee76:	4618      	mov	r0, r3
 800ee78:	f001 fc32 	bl	80106e0 <ff_convert>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ee80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d101      	bne.n	800ee8a <create_name+0x8a>
 800ee86:	2306      	movs	r3, #6
 800ee88:	e16e      	b.n	800f168 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ee8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee8c:	2b7f      	cmp	r3, #127	; 0x7f
 800ee8e:	d809      	bhi.n	800eea4 <create_name+0xa4>
 800ee90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee92:	4619      	mov	r1, r3
 800ee94:	488d      	ldr	r0, [pc, #564]	; (800f0cc <create_name+0x2cc>)
 800ee96:	f7fe fb7c 	bl	800d592 <chk_chr>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d001      	beq.n	800eea4 <create_name+0xa4>
 800eea0:	2306      	movs	r3, #6
 800eea2:	e161      	b.n	800f168 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	1c5a      	adds	r2, r3, #1
 800eea8:	617a      	str	r2, [r7, #20]
 800eeaa:	005b      	lsls	r3, r3, #1
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	4413      	add	r3, r2
 800eeb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eeb2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800eeb4:	e7b4      	b.n	800ee20 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800eeb6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800eeb8:	693a      	ldr	r2, [r7, #16]
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	441a      	add	r2, r3
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800eec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eec4:	2b1f      	cmp	r3, #31
 800eec6:	d801      	bhi.n	800eecc <create_name+0xcc>
 800eec8:	2304      	movs	r3, #4
 800eeca:	e000      	b.n	800eece <create_name+0xce>
 800eecc:	2300      	movs	r3, #0
 800eece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800eed2:	e011      	b.n	800eef8 <create_name+0xf8>
		w = lfn[di - 1];
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eeda:	3b01      	subs	r3, #1
 800eedc:	005b      	lsls	r3, r3, #1
 800eede:	68fa      	ldr	r2, [r7, #12]
 800eee0:	4413      	add	r3, r2
 800eee2:	881b      	ldrh	r3, [r3, #0]
 800eee4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800eee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eee8:	2b20      	cmp	r3, #32
 800eeea:	d002      	beq.n	800eef2 <create_name+0xf2>
 800eeec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeee:	2b2e      	cmp	r3, #46	; 0x2e
 800eef0:	d106      	bne.n	800ef00 <create_name+0x100>
		di--;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	3b01      	subs	r3, #1
 800eef6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1ea      	bne.n	800eed4 <create_name+0xd4>
 800eefe:	e000      	b.n	800ef02 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ef00:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	005b      	lsls	r3, r3, #1
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	4413      	add	r3, r2
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d101      	bne.n	800ef18 <create_name+0x118>
 800ef14:	2306      	movs	r3, #6
 800ef16:	e127      	b.n	800f168 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	3324      	adds	r3, #36	; 0x24
 800ef1c:	220b      	movs	r2, #11
 800ef1e:	2120      	movs	r1, #32
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fe faf4 	bl	800d50e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ef26:	2300      	movs	r3, #0
 800ef28:	61bb      	str	r3, [r7, #24]
 800ef2a:	e002      	b.n	800ef32 <create_name+0x132>
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	61bb      	str	r3, [r7, #24]
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	005b      	lsls	r3, r3, #1
 800ef36:	68fa      	ldr	r2, [r7, #12]
 800ef38:	4413      	add	r3, r2
 800ef3a:	881b      	ldrh	r3, [r3, #0]
 800ef3c:	2b20      	cmp	r3, #32
 800ef3e:	d0f5      	beq.n	800ef2c <create_name+0x12c>
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	005b      	lsls	r3, r3, #1
 800ef44:	68fa      	ldr	r2, [r7, #12]
 800ef46:	4413      	add	r3, r2
 800ef48:	881b      	ldrh	r3, [r3, #0]
 800ef4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ef4c:	d0ee      	beq.n	800ef2c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d009      	beq.n	800ef68 <create_name+0x168>
 800ef54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef58:	f043 0303 	orr.w	r3, r3, #3
 800ef5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ef60:	e002      	b.n	800ef68 <create_name+0x168>
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	3b01      	subs	r3, #1
 800ef66:	617b      	str	r3, [r7, #20]
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d009      	beq.n	800ef82 <create_name+0x182>
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ef74:	3b01      	subs	r3, #1
 800ef76:	005b      	lsls	r3, r3, #1
 800ef78:	68fa      	ldr	r2, [r7, #12]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	881b      	ldrh	r3, [r3, #0]
 800ef7e:	2b2e      	cmp	r3, #46	; 0x2e
 800ef80:	d1ef      	bne.n	800ef62 <create_name+0x162>

	i = b = 0; ni = 8;
 800ef82:	2300      	movs	r3, #0
 800ef84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ef88:	2300      	movs	r3, #0
 800ef8a:	623b      	str	r3, [r7, #32]
 800ef8c:	2308      	movs	r3, #8
 800ef8e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	1c5a      	adds	r2, r3, #1
 800ef94:	61ba      	str	r2, [r7, #24]
 800ef96:	005b      	lsls	r3, r3, #1
 800ef98:	68fa      	ldr	r2, [r7, #12]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	881b      	ldrh	r3, [r3, #0]
 800ef9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800efa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f000 8090 	beq.w	800f0c8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800efa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efaa:	2b20      	cmp	r3, #32
 800efac:	d006      	beq.n	800efbc <create_name+0x1bc>
 800efae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efb0:	2b2e      	cmp	r3, #46	; 0x2e
 800efb2:	d10a      	bne.n	800efca <create_name+0x1ca>
 800efb4:	69ba      	ldr	r2, [r7, #24]
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d006      	beq.n	800efca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800efbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efc0:	f043 0303 	orr.w	r3, r3, #3
 800efc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800efc8:	e07d      	b.n	800f0c6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800efca:	6a3a      	ldr	r2, [r7, #32]
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d203      	bcs.n	800efda <create_name+0x1da>
 800efd2:	69ba      	ldr	r2, [r7, #24]
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d123      	bne.n	800f022 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	2b0b      	cmp	r3, #11
 800efde:	d106      	bne.n	800efee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800efe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efe4:	f043 0303 	orr.w	r3, r3, #3
 800efe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800efec:	e075      	b.n	800f0da <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800efee:	69ba      	ldr	r2, [r7, #24]
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d005      	beq.n	800f002 <create_name+0x202>
 800eff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800effa:	f043 0303 	orr.w	r3, r3, #3
 800effe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f002:	69ba      	ldr	r2, [r7, #24]
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	429a      	cmp	r2, r3
 800f008:	d866      	bhi.n	800f0d8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	61bb      	str	r3, [r7, #24]
 800f00e:	2308      	movs	r3, #8
 800f010:	623b      	str	r3, [r7, #32]
 800f012:	230b      	movs	r3, #11
 800f014:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f016:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f01a:	009b      	lsls	r3, r3, #2
 800f01c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f020:	e051      	b.n	800f0c6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f024:	2b7f      	cmp	r3, #127	; 0x7f
 800f026:	d914      	bls.n	800f052 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f02a:	2100      	movs	r1, #0
 800f02c:	4618      	mov	r0, r3
 800f02e:	f001 fb57 	bl	80106e0 <ff_convert>
 800f032:	4603      	mov	r3, r0
 800f034:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d004      	beq.n	800f046 <create_name+0x246>
 800f03c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f03e:	3b80      	subs	r3, #128	; 0x80
 800f040:	4a23      	ldr	r2, [pc, #140]	; (800f0d0 <create_name+0x2d0>)
 800f042:	5cd3      	ldrb	r3, [r2, r3]
 800f044:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f04a:	f043 0302 	orr.w	r3, r3, #2
 800f04e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f054:	2b00      	cmp	r3, #0
 800f056:	d007      	beq.n	800f068 <create_name+0x268>
 800f058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f05a:	4619      	mov	r1, r3
 800f05c:	481d      	ldr	r0, [pc, #116]	; (800f0d4 <create_name+0x2d4>)
 800f05e:	f7fe fa98 	bl	800d592 <chk_chr>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d008      	beq.n	800f07a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f068:	235f      	movs	r3, #95	; 0x5f
 800f06a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f06c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f070:	f043 0303 	orr.w	r3, r3, #3
 800f074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f078:	e01b      	b.n	800f0b2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f07a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f07c:	2b40      	cmp	r3, #64	; 0x40
 800f07e:	d909      	bls.n	800f094 <create_name+0x294>
 800f080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f082:	2b5a      	cmp	r3, #90	; 0x5a
 800f084:	d806      	bhi.n	800f094 <create_name+0x294>
					b |= 2;
 800f086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f08a:	f043 0302 	orr.w	r3, r3, #2
 800f08e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f092:	e00e      	b.n	800f0b2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f096:	2b60      	cmp	r3, #96	; 0x60
 800f098:	d90b      	bls.n	800f0b2 <create_name+0x2b2>
 800f09a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f09c:	2b7a      	cmp	r3, #122	; 0x7a
 800f09e:	d808      	bhi.n	800f0b2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f0a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0a4:	f043 0301 	orr.w	r3, r3, #1
 800f0a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f0ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0ae:	3b20      	subs	r3, #32
 800f0b0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f0b2:	6a3b      	ldr	r3, [r7, #32]
 800f0b4:	1c5a      	adds	r2, r3, #1
 800f0b6:	623a      	str	r2, [r7, #32]
 800f0b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f0ba:	b2d1      	uxtb	r1, r2
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	4413      	add	r3, r2
 800f0c0:	460a      	mov	r2, r1
 800f0c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f0c6:	e763      	b.n	800ef90 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f0c8:	bf00      	nop
 800f0ca:	e006      	b.n	800f0da <create_name+0x2da>
 800f0cc:	08011a08 	.word	0x08011a08
 800f0d0:	08011ae4 	.word	0x08011ae4
 800f0d4:	08011a14 	.word	0x08011a14
			if (si > di) break;			/* No extension */
 800f0d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f0e0:	2be5      	cmp	r3, #229	; 0xe5
 800f0e2:	d103      	bne.n	800f0ec <create_name+0x2ec>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2205      	movs	r2, #5
 800f0e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	2b08      	cmp	r3, #8
 800f0f0:	d104      	bne.n	800f0fc <create_name+0x2fc>
 800f0f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f0fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f100:	f003 030c 	and.w	r3, r3, #12
 800f104:	2b0c      	cmp	r3, #12
 800f106:	d005      	beq.n	800f114 <create_name+0x314>
 800f108:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f10c:	f003 0303 	and.w	r3, r3, #3
 800f110:	2b03      	cmp	r3, #3
 800f112:	d105      	bne.n	800f120 <create_name+0x320>
 800f114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f118:	f043 0302 	orr.w	r3, r3, #2
 800f11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f124:	f003 0302 	and.w	r3, r3, #2
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d117      	bne.n	800f15c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f12c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f130:	f003 0303 	and.w	r3, r3, #3
 800f134:	2b01      	cmp	r3, #1
 800f136:	d105      	bne.n	800f144 <create_name+0x344>
 800f138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f13c:	f043 0310 	orr.w	r3, r3, #16
 800f140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f148:	f003 030c 	and.w	r3, r3, #12
 800f14c:	2b04      	cmp	r3, #4
 800f14e:	d105      	bne.n	800f15c <create_name+0x35c>
 800f150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f154:	f043 0308 	orr.w	r3, r3, #8
 800f158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f162:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f166:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3728      	adds	r7, #40	; 0x28
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b086      	sub	sp, #24
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f184:	e002      	b.n	800f18c <follow_path+0x1c>
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	3301      	adds	r3, #1
 800f18a:	603b      	str	r3, [r7, #0]
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	2b2f      	cmp	r3, #47	; 0x2f
 800f192:	d0f8      	beq.n	800f186 <follow_path+0x16>
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	2b5c      	cmp	r3, #92	; 0x5c
 800f19a:	d0f4      	beq.n	800f186 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	2b1f      	cmp	r3, #31
 800f1a8:	d80a      	bhi.n	800f1c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2280      	movs	r2, #128	; 0x80
 800f1ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f7fe ff35 	bl	800e024 <dir_sdi>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	75fb      	strb	r3, [r7, #23]
 800f1be:	e043      	b.n	800f248 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f1c0:	463b      	mov	r3, r7
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f7ff fe1b 	bl	800ee00 <create_name>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f1ce:	7dfb      	ldrb	r3, [r7, #23]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d134      	bne.n	800f23e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff fb7d 	bl	800e8d4 <dir_find>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f1e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f1e6:	7dfb      	ldrb	r3, [r7, #23]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d00a      	beq.n	800f202 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f1ec:	7dfb      	ldrb	r3, [r7, #23]
 800f1ee:	2b04      	cmp	r3, #4
 800f1f0:	d127      	bne.n	800f242 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f1f2:	7afb      	ldrb	r3, [r7, #11]
 800f1f4:	f003 0304 	and.w	r3, r3, #4
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d122      	bne.n	800f242 <follow_path+0xd2>
 800f1fc:	2305      	movs	r3, #5
 800f1fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f200:	e01f      	b.n	800f242 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f202:	7afb      	ldrb	r3, [r7, #11]
 800f204:	f003 0304 	and.w	r3, r3, #4
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d11c      	bne.n	800f246 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	799b      	ldrb	r3, [r3, #6]
 800f210:	f003 0310 	and.w	r3, r3, #16
 800f214:	2b00      	cmp	r3, #0
 800f216:	d102      	bne.n	800f21e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f218:	2305      	movs	r3, #5
 800f21a:	75fb      	strb	r3, [r7, #23]
 800f21c:	e014      	b.n	800f248 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	695b      	ldr	r3, [r3, #20]
 800f228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f22c:	4413      	add	r3, r2
 800f22e:	4619      	mov	r1, r3
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f7ff f87e 	bl	800e332 <ld_clust>
 800f236:	4602      	mov	r2, r0
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f23c:	e7c0      	b.n	800f1c0 <follow_path+0x50>
			if (res != FR_OK) break;
 800f23e:	bf00      	nop
 800f240:	e002      	b.n	800f248 <follow_path+0xd8>
				break;
 800f242:	bf00      	nop
 800f244:	e000      	b.n	800f248 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f246:	bf00      	nop
			}
		}
	}

	return res;
 800f248:	7dfb      	ldrb	r3, [r7, #23]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3718      	adds	r7, #24
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}

0800f252 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f252:	b480      	push	{r7}
 800f254:	b087      	sub	sp, #28
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f25a:	f04f 33ff 	mov.w	r3, #4294967295
 800f25e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d031      	beq.n	800f2cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	617b      	str	r3, [r7, #20]
 800f26e:	e002      	b.n	800f276 <get_ldnumber+0x24>
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	3301      	adds	r3, #1
 800f274:	617b      	str	r3, [r7, #20]
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	2b1f      	cmp	r3, #31
 800f27c:	d903      	bls.n	800f286 <get_ldnumber+0x34>
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	2b3a      	cmp	r3, #58	; 0x3a
 800f284:	d1f4      	bne.n	800f270 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	2b3a      	cmp	r3, #58	; 0x3a
 800f28c:	d11c      	bne.n	800f2c8 <get_ldnumber+0x76>
			tp = *path;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	1c5a      	adds	r2, r3, #1
 800f298:	60fa      	str	r2, [r7, #12]
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	3b30      	subs	r3, #48	; 0x30
 800f29e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	2b09      	cmp	r3, #9
 800f2a4:	d80e      	bhi.n	800f2c4 <get_ldnumber+0x72>
 800f2a6:	68fa      	ldr	r2, [r7, #12]
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d10a      	bne.n	800f2c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d107      	bne.n	800f2c4 <get_ldnumber+0x72>
					vol = (int)i;
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	617b      	str	r3, [r7, #20]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	697a      	ldr	r2, [r7, #20]
 800f2c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	e002      	b.n	800f2ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f2cc:	693b      	ldr	r3, [r7, #16]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	371c      	adds	r7, #28
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr
	...

0800f2dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	70da      	strb	r2, [r3, #3]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f2f2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f2f4:	6839      	ldr	r1, [r7, #0]
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f7fe fb16 	bl	800d928 <move_window>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d001      	beq.n	800f306 <check_fs+0x2a>
 800f302:	2304      	movs	r3, #4
 800f304:	e038      	b.n	800f378 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	3334      	adds	r3, #52	; 0x34
 800f30a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fe f85a 	bl	800d3c8 <ld_word>
 800f314:	4603      	mov	r3, r0
 800f316:	461a      	mov	r2, r3
 800f318:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d001      	beq.n	800f324 <check_fs+0x48>
 800f320:	2303      	movs	r3, #3
 800f322:	e029      	b.n	800f378 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f32a:	2be9      	cmp	r3, #233	; 0xe9
 800f32c:	d009      	beq.n	800f342 <check_fs+0x66>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f334:	2beb      	cmp	r3, #235	; 0xeb
 800f336:	d11e      	bne.n	800f376 <check_fs+0x9a>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f33e:	2b90      	cmp	r3, #144	; 0x90
 800f340:	d119      	bne.n	800f376 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	3334      	adds	r3, #52	; 0x34
 800f346:	3336      	adds	r3, #54	; 0x36
 800f348:	4618      	mov	r0, r3
 800f34a:	f7fe f855 	bl	800d3f8 <ld_dword>
 800f34e:	4603      	mov	r3, r0
 800f350:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f354:	4a0a      	ldr	r2, [pc, #40]	; (800f380 <check_fs+0xa4>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d101      	bne.n	800f35e <check_fs+0x82>
 800f35a:	2300      	movs	r3, #0
 800f35c:	e00c      	b.n	800f378 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	3334      	adds	r3, #52	; 0x34
 800f362:	3352      	adds	r3, #82	; 0x52
 800f364:	4618      	mov	r0, r3
 800f366:	f7fe f847 	bl	800d3f8 <ld_dword>
 800f36a:	4603      	mov	r3, r0
 800f36c:	4a05      	ldr	r2, [pc, #20]	; (800f384 <check_fs+0xa8>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d101      	bne.n	800f376 <check_fs+0x9a>
 800f372:	2300      	movs	r3, #0
 800f374:	e000      	b.n	800f378 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f376:	2302      	movs	r3, #2
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	00544146 	.word	0x00544146
 800f384:	33544146 	.word	0x33544146

0800f388 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b096      	sub	sp, #88	; 0x58
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	4613      	mov	r3, r2
 800f394:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	2200      	movs	r2, #0
 800f39a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f39c:	68f8      	ldr	r0, [r7, #12]
 800f39e:	f7ff ff58 	bl	800f252 <get_ldnumber>
 800f3a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	da01      	bge.n	800f3ae <find_volume+0x26>
 800f3aa:	230b      	movs	r3, #11
 800f3ac:	e230      	b.n	800f810 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f3ae:	4aa1      	ldr	r2, [pc, #644]	; (800f634 <find_volume+0x2ac>)
 800f3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d101      	bne.n	800f3c2 <find_volume+0x3a>
 800f3be:	230c      	movs	r3, #12
 800f3c0:	e226      	b.n	800f810 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f3c8:	79fb      	ldrb	r3, [r7, #7]
 800f3ca:	f023 0301 	bic.w	r3, r3, #1
 800f3ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d01a      	beq.n	800f40e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3da:	785b      	ldrb	r3, [r3, #1]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fd ff55 	bl	800d28c <disk_status>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f3e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f3ec:	f003 0301 	and.w	r3, r3, #1
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10c      	bne.n	800f40e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f3f4:	79fb      	ldrb	r3, [r7, #7]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d007      	beq.n	800f40a <find_volume+0x82>
 800f3fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f3fe:	f003 0304 	and.w	r3, r3, #4
 800f402:	2b00      	cmp	r3, #0
 800f404:	d001      	beq.n	800f40a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f406:	230a      	movs	r3, #10
 800f408:	e202      	b.n	800f810 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800f40a:	2300      	movs	r3, #0
 800f40c:	e200      	b.n	800f810 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f410:	2200      	movs	r2, #0
 800f412:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f416:	b2da      	uxtb	r2, r3
 800f418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41e:	785b      	ldrb	r3, [r3, #1]
 800f420:	4618      	mov	r0, r3
 800f422:	f7fd ff4d 	bl	800d2c0 <disk_initialize>
 800f426:	4603      	mov	r3, r0
 800f428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f42c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f430:	f003 0301 	and.w	r3, r3, #1
 800f434:	2b00      	cmp	r3, #0
 800f436:	d001      	beq.n	800f43c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f438:	2303      	movs	r3, #3
 800f43a:	e1e9      	b.n	800f810 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f43c:	79fb      	ldrb	r3, [r7, #7]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d007      	beq.n	800f452 <find_volume+0xca>
 800f442:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f446:	f003 0304 	and.w	r3, r3, #4
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f44e:	230a      	movs	r3, #10
 800f450:	e1de      	b.n	800f810 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f452:	2300      	movs	r3, #0
 800f454:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f456:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f458:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f45a:	f7ff ff3f 	bl	800f2dc <check_fs>
 800f45e:	4603      	mov	r3, r0
 800f460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f468:	2b02      	cmp	r3, #2
 800f46a:	d149      	bne.n	800f500 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f46c:	2300      	movs	r3, #0
 800f46e:	643b      	str	r3, [r7, #64]	; 0x40
 800f470:	e01e      	b.n	800f4b0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f474:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f47a:	011b      	lsls	r3, r3, #4
 800f47c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f480:	4413      	add	r3, r2
 800f482:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f486:	3304      	adds	r3, #4
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d006      	beq.n	800f49c <find_volume+0x114>
 800f48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f490:	3308      	adds	r3, #8
 800f492:	4618      	mov	r0, r3
 800f494:	f7fd ffb0 	bl	800d3f8 <ld_dword>
 800f498:	4602      	mov	r2, r0
 800f49a:	e000      	b.n	800f49e <find_volume+0x116>
 800f49c:	2200      	movs	r2, #0
 800f49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	3358      	adds	r3, #88	; 0x58
 800f4a4:	443b      	add	r3, r7
 800f4a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	643b      	str	r3, [r7, #64]	; 0x40
 800f4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4b2:	2b03      	cmp	r3, #3
 800f4b4:	d9dd      	bls.n	800f472 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f4ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d002      	beq.n	800f4c6 <find_volume+0x13e>
 800f4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f4c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	3358      	adds	r3, #88	; 0x58
 800f4cc:	443b      	add	r3, r7
 800f4ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f4d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f4d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d005      	beq.n	800f4e6 <find_volume+0x15e>
 800f4da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f4dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f4de:	f7ff fefd 	bl	800f2dc <check_fs>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	e000      	b.n	800f4e8 <find_volume+0x160>
 800f4e6:	2303      	movs	r3, #3
 800f4e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f4ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	d905      	bls.n	800f500 <find_volume+0x178>
 800f4f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	643b      	str	r3, [r7, #64]	; 0x40
 800f4fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4fc:	2b03      	cmp	r3, #3
 800f4fe:	d9e2      	bls.n	800f4c6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f504:	2b04      	cmp	r3, #4
 800f506:	d101      	bne.n	800f50c <find_volume+0x184>
 800f508:	2301      	movs	r3, #1
 800f50a:	e181      	b.n	800f810 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f50c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f510:	2b01      	cmp	r3, #1
 800f512:	d901      	bls.n	800f518 <find_volume+0x190>
 800f514:	230d      	movs	r3, #13
 800f516:	e17b      	b.n	800f810 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51a:	3334      	adds	r3, #52	; 0x34
 800f51c:	330b      	adds	r3, #11
 800f51e:	4618      	mov	r0, r3
 800f520:	f7fd ff52 	bl	800d3c8 <ld_word>
 800f524:	4603      	mov	r3, r0
 800f526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f52a:	d001      	beq.n	800f530 <find_volume+0x1a8>
 800f52c:	230d      	movs	r3, #13
 800f52e:	e16f      	b.n	800f810 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f532:	3334      	adds	r3, #52	; 0x34
 800f534:	3316      	adds	r3, #22
 800f536:	4618      	mov	r0, r3
 800f538:	f7fd ff46 	bl	800d3c8 <ld_word>
 800f53c:	4603      	mov	r3, r0
 800f53e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f542:	2b00      	cmp	r3, #0
 800f544:	d106      	bne.n	800f554 <find_volume+0x1cc>
 800f546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f548:	3334      	adds	r3, #52	; 0x34
 800f54a:	3324      	adds	r3, #36	; 0x24
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7fd ff53 	bl	800d3f8 <ld_dword>
 800f552:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f556:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f558:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f562:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f566:	789b      	ldrb	r3, [r3, #2]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d005      	beq.n	800f578 <find_volume+0x1f0>
 800f56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56e:	789b      	ldrb	r3, [r3, #2]
 800f570:	2b02      	cmp	r3, #2
 800f572:	d001      	beq.n	800f578 <find_volume+0x1f0>
 800f574:	230d      	movs	r3, #13
 800f576:	e14b      	b.n	800f810 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57a:	789b      	ldrb	r3, [r3, #2]
 800f57c:	461a      	mov	r2, r3
 800f57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f580:	fb02 f303 	mul.w	r3, r2, r3
 800f584:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f590:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f594:	895b      	ldrh	r3, [r3, #10]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d008      	beq.n	800f5ac <find_volume+0x224>
 800f59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59c:	895b      	ldrh	r3, [r3, #10]
 800f59e:	461a      	mov	r2, r3
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a2:	895b      	ldrh	r3, [r3, #10]
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	4013      	ands	r3, r2
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d001      	beq.n	800f5b0 <find_volume+0x228>
 800f5ac:	230d      	movs	r3, #13
 800f5ae:	e12f      	b.n	800f810 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b2:	3334      	adds	r3, #52	; 0x34
 800f5b4:	3311      	adds	r3, #17
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fd ff06 	bl	800d3c8 <ld_word>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	461a      	mov	r2, r3
 800f5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c6:	891b      	ldrh	r3, [r3, #8]
 800f5c8:	f003 030f 	and.w	r3, r3, #15
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d001      	beq.n	800f5d6 <find_volume+0x24e>
 800f5d2:	230d      	movs	r3, #13
 800f5d4:	e11c      	b.n	800f810 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d8:	3334      	adds	r3, #52	; 0x34
 800f5da:	3313      	adds	r3, #19
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7fd fef3 	bl	800d3c8 <ld_word>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f5e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d106      	bne.n	800f5fa <find_volume+0x272>
 800f5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ee:	3334      	adds	r3, #52	; 0x34
 800f5f0:	3320      	adds	r3, #32
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7fd ff00 	bl	800d3f8 <ld_dword>
 800f5f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fc:	3334      	adds	r3, #52	; 0x34
 800f5fe:	330e      	adds	r3, #14
 800f600:	4618      	mov	r0, r3
 800f602:	f7fd fee1 	bl	800d3c8 <ld_word>
 800f606:	4603      	mov	r3, r0
 800f608:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f60a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d101      	bne.n	800f614 <find_volume+0x28c>
 800f610:	230d      	movs	r3, #13
 800f612:	e0fd      	b.n	800f810 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f614:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f618:	4413      	add	r3, r2
 800f61a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f61c:	8912      	ldrh	r2, [r2, #8]
 800f61e:	0912      	lsrs	r2, r2, #4
 800f620:	b292      	uxth	r2, r2
 800f622:	4413      	add	r3, r2
 800f624:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d204      	bcs.n	800f638 <find_volume+0x2b0>
 800f62e:	230d      	movs	r3, #13
 800f630:	e0ee      	b.n	800f810 <find_volume+0x488>
 800f632:	bf00      	nop
 800f634:	20001bb0 	.word	0x20001bb0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63c:	1ad3      	subs	r3, r2, r3
 800f63e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f640:	8952      	ldrh	r2, [r2, #10]
 800f642:	fbb3 f3f2 	udiv	r3, r3, r2
 800f646:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d101      	bne.n	800f652 <find_volume+0x2ca>
 800f64e:	230d      	movs	r3, #13
 800f650:	e0de      	b.n	800f810 <find_volume+0x488>
		fmt = FS_FAT32;
 800f652:	2303      	movs	r3, #3
 800f654:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f65e:	4293      	cmp	r3, r2
 800f660:	d802      	bhi.n	800f668 <find_volume+0x2e0>
 800f662:	2302      	movs	r3, #2
 800f664:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f66e:	4293      	cmp	r3, r2
 800f670:	d802      	bhi.n	800f678 <find_volume+0x2f0>
 800f672:	2301      	movs	r3, #1
 800f674:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67a:	1c9a      	adds	r2, r3, #2
 800f67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f684:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f686:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f68a:	441a      	add	r2, r3
 800f68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f690:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f694:	441a      	add	r2, r3
 800f696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f698:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f69a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f69e:	2b03      	cmp	r3, #3
 800f6a0:	d11e      	bne.n	800f6e0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a4:	3334      	adds	r3, #52	; 0x34
 800f6a6:	332a      	adds	r3, #42	; 0x2a
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7fd fe8d 	bl	800d3c8 <ld_word>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d001      	beq.n	800f6b8 <find_volume+0x330>
 800f6b4:	230d      	movs	r3, #13
 800f6b6:	e0ab      	b.n	800f810 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ba:	891b      	ldrh	r3, [r3, #8]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d001      	beq.n	800f6c4 <find_volume+0x33c>
 800f6c0:	230d      	movs	r3, #13
 800f6c2:	e0a5      	b.n	800f810 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c6:	3334      	adds	r3, #52	; 0x34
 800f6c8:	332c      	adds	r3, #44	; 0x2c
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fd fe94 	bl	800d3f8 <ld_dword>
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d8:	699b      	ldr	r3, [r3, #24]
 800f6da:	009b      	lsls	r3, r3, #2
 800f6dc:	647b      	str	r3, [r7, #68]	; 0x44
 800f6de:	e01f      	b.n	800f720 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e2:	891b      	ldrh	r3, [r3, #8]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d101      	bne.n	800f6ec <find_volume+0x364>
 800f6e8:	230d      	movs	r3, #13
 800f6ea:	e091      	b.n	800f810 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6f2:	441a      	add	r2, r3
 800f6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f6f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6fc:	2b02      	cmp	r3, #2
 800f6fe:	d103      	bne.n	800f708 <find_volume+0x380>
 800f700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f702:	699b      	ldr	r3, [r3, #24]
 800f704:	005b      	lsls	r3, r3, #1
 800f706:	e00a      	b.n	800f71e <find_volume+0x396>
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	699a      	ldr	r2, [r3, #24]
 800f70c:	4613      	mov	r3, r2
 800f70e:	005b      	lsls	r3, r3, #1
 800f710:	4413      	add	r3, r2
 800f712:	085a      	lsrs	r2, r3, #1
 800f714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f716:	699b      	ldr	r3, [r3, #24]
 800f718:	f003 0301 	and.w	r3, r3, #1
 800f71c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f71e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f722:	69da      	ldr	r2, [r3, #28]
 800f724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f726:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f72a:	0a5b      	lsrs	r3, r3, #9
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d201      	bcs.n	800f734 <find_volume+0x3ac>
 800f730:	230d      	movs	r3, #13
 800f732:	e06d      	b.n	800f810 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f736:	f04f 32ff 	mov.w	r2, #4294967295
 800f73a:	615a      	str	r2, [r3, #20]
 800f73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73e:	695a      	ldr	r2, [r3, #20]
 800f740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f742:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f746:	2280      	movs	r2, #128	; 0x80
 800f748:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f74a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f74e:	2b03      	cmp	r3, #3
 800f750:	d149      	bne.n	800f7e6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f754:	3334      	adds	r3, #52	; 0x34
 800f756:	3330      	adds	r3, #48	; 0x30
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fd fe35 	bl	800d3c8 <ld_word>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b01      	cmp	r3, #1
 800f762:	d140      	bne.n	800f7e6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f766:	3301      	adds	r3, #1
 800f768:	4619      	mov	r1, r3
 800f76a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f76c:	f7fe f8dc 	bl	800d928 <move_window>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d137      	bne.n	800f7e6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f778:	2200      	movs	r2, #0
 800f77a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f77e:	3334      	adds	r3, #52	; 0x34
 800f780:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f784:	4618      	mov	r0, r3
 800f786:	f7fd fe1f 	bl	800d3c8 <ld_word>
 800f78a:	4603      	mov	r3, r0
 800f78c:	461a      	mov	r2, r3
 800f78e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f792:	429a      	cmp	r2, r3
 800f794:	d127      	bne.n	800f7e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f798:	3334      	adds	r3, #52	; 0x34
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7fd fe2c 	bl	800d3f8 <ld_dword>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	4a1d      	ldr	r2, [pc, #116]	; (800f818 <find_volume+0x490>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d11e      	bne.n	800f7e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7aa:	3334      	adds	r3, #52	; 0x34
 800f7ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7fd fe21 	bl	800d3f8 <ld_dword>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	4a18      	ldr	r2, [pc, #96]	; (800f81c <find_volume+0x494>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d113      	bne.n	800f7e6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c0:	3334      	adds	r3, #52	; 0x34
 800f7c2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7fd fe16 	bl	800d3f8 <ld_dword>
 800f7cc:	4602      	mov	r2, r0
 800f7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d4:	3334      	adds	r3, #52	; 0x34
 800f7d6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7fd fe0c 	bl	800d3f8 <ld_dword>
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f7ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f7ee:	4b0c      	ldr	r3, [pc, #48]	; (800f820 <find_volume+0x498>)
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	b29a      	uxth	r2, r3
 800f7f6:	4b0a      	ldr	r3, [pc, #40]	; (800f820 <find_volume+0x498>)
 800f7f8:	801a      	strh	r2, [r3, #0]
 800f7fa:	4b09      	ldr	r3, [pc, #36]	; (800f820 <find_volume+0x498>)
 800f7fc:	881a      	ldrh	r2, [r3, #0]
 800f7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f800:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f804:	4a07      	ldr	r2, [pc, #28]	; (800f824 <find_volume+0x49c>)
 800f806:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f80a:	f7fe f825 	bl	800d858 <clear_lock>
#endif
	return FR_OK;
 800f80e:	2300      	movs	r3, #0
}
 800f810:	4618      	mov	r0, r3
 800f812:	3758      	adds	r7, #88	; 0x58
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	41615252 	.word	0x41615252
 800f81c:	61417272 	.word	0x61417272
 800f820:	20001bb4 	.word	0x20001bb4
 800f824:	20001bd8 	.word	0x20001bd8

0800f828 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f832:	2309      	movs	r3, #9
 800f834:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d01c      	beq.n	800f876 <validate+0x4e>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d018      	beq.n	800f876 <validate+0x4e>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d013      	beq.n	800f876 <validate+0x4e>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	889a      	ldrh	r2, [r3, #4]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	88db      	ldrh	r3, [r3, #6]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d10c      	bne.n	800f876 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	785b      	ldrb	r3, [r3, #1]
 800f862:	4618      	mov	r0, r3
 800f864:	f7fd fd12 	bl	800d28c <disk_status>
 800f868:	4603      	mov	r3, r0
 800f86a:	f003 0301 	and.w	r3, r3, #1
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d101      	bne.n	800f876 <validate+0x4e>
			res = FR_OK;
 800f872:	2300      	movs	r3, #0
 800f874:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f876:	7bfb      	ldrb	r3, [r7, #15]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d102      	bne.n	800f882 <validate+0x5a>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	e000      	b.n	800f884 <validate+0x5c>
 800f882:	2300      	movs	r3, #0
 800f884:	683a      	ldr	r2, [r7, #0]
 800f886:	6013      	str	r3, [r2, #0]
	return res;
 800f888:	7bfb      	ldrb	r3, [r7, #15]
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3710      	adds	r7, #16
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
	...

0800f894 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b088      	sub	sp, #32
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	4613      	mov	r3, r2
 800f8a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f8a6:	f107 0310 	add.w	r3, r7, #16
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7ff fcd1 	bl	800f252 <get_ldnumber>
 800f8b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	da01      	bge.n	800f8bc <f_mount+0x28>
 800f8b8:	230b      	movs	r3, #11
 800f8ba:	e02b      	b.n	800f914 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f8bc:	4a17      	ldr	r2, [pc, #92]	; (800f91c <f_mount+0x88>)
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f8c6:	69bb      	ldr	r3, [r7, #24]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d005      	beq.n	800f8d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f8cc:	69b8      	ldr	r0, [r7, #24]
 800f8ce:	f7fd ffc3 	bl	800d858 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f8d2:	69bb      	ldr	r3, [r7, #24]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d002      	beq.n	800f8e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f8e4:	68fa      	ldr	r2, [r7, #12]
 800f8e6:	490d      	ldr	r1, [pc, #52]	; (800f91c <f_mount+0x88>)
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d002      	beq.n	800f8fa <f_mount+0x66>
 800f8f4:	79fb      	ldrb	r3, [r7, #7]
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d001      	beq.n	800f8fe <f_mount+0x6a>
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	e00a      	b.n	800f914 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f8fe:	f107 010c 	add.w	r1, r7, #12
 800f902:	f107 0308 	add.w	r3, r7, #8
 800f906:	2200      	movs	r2, #0
 800f908:	4618      	mov	r0, r3
 800f90a:	f7ff fd3d 	bl	800f388 <find_volume>
 800f90e:	4603      	mov	r3, r0
 800f910:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f912:	7dfb      	ldrb	r3, [r7, #23]
}
 800f914:	4618      	mov	r0, r3
 800f916:	3720      	adds	r7, #32
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	20001bb0 	.word	0x20001bb0

0800f920 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b09a      	sub	sp, #104	; 0x68
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	60b9      	str	r1, [r7, #8]
 800f92a:	4613      	mov	r3, r2
 800f92c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d101      	bne.n	800f938 <f_open+0x18>
 800f934:	2309      	movs	r3, #9
 800f936:	e1ad      	b.n	800fc94 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f938:	79fb      	ldrb	r3, [r7, #7]
 800f93a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f93e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f940:	79fa      	ldrb	r2, [r7, #7]
 800f942:	f107 0114 	add.w	r1, r7, #20
 800f946:	f107 0308 	add.w	r3, r7, #8
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7ff fd1c 	bl	800f388 <find_volume>
 800f950:	4603      	mov	r3, r0
 800f952:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f956:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f040 8191 	bne.w	800fc82 <f_open+0x362>
		dj.obj.fs = fs;
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f964:	68ba      	ldr	r2, [r7, #8]
 800f966:	f107 0318 	add.w	r3, r7, #24
 800f96a:	4611      	mov	r1, r2
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7ff fbff 	bl	800f170 <follow_path>
 800f972:	4603      	mov	r3, r0
 800f974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f978:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d11a      	bne.n	800f9b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f984:	b25b      	sxtb	r3, r3
 800f986:	2b00      	cmp	r3, #0
 800f988:	da03      	bge.n	800f992 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f98a:	2306      	movs	r3, #6
 800f98c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f990:	e011      	b.n	800f9b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f992:	79fb      	ldrb	r3, [r7, #7]
 800f994:	f023 0301 	bic.w	r3, r3, #1
 800f998:	2b00      	cmp	r3, #0
 800f99a:	bf14      	ite	ne
 800f99c:	2301      	movne	r3, #1
 800f99e:	2300      	moveq	r3, #0
 800f9a0:	b2db      	uxtb	r3, r3
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	f107 0318 	add.w	r3, r7, #24
 800f9a8:	4611      	mov	r1, r2
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fd fe0c 	bl	800d5c8 <chk_lock>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f9b6:	79fb      	ldrb	r3, [r7, #7]
 800f9b8:	f003 031c 	and.w	r3, r3, #28
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d07f      	beq.n	800fac0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f9c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d017      	beq.n	800f9f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f9c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9cc:	2b04      	cmp	r3, #4
 800f9ce:	d10e      	bne.n	800f9ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f9d0:	f7fd fe56 	bl	800d680 <enq_lock>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d006      	beq.n	800f9e8 <f_open+0xc8>
 800f9da:	f107 0318 	add.w	r3, r7, #24
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7ff f838 	bl	800ea54 <dir_register>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	e000      	b.n	800f9ea <f_open+0xca>
 800f9e8:	2312      	movs	r3, #18
 800f9ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f9ee:	79fb      	ldrb	r3, [r7, #7]
 800f9f0:	f043 0308 	orr.w	r3, r3, #8
 800f9f4:	71fb      	strb	r3, [r7, #7]
 800f9f6:	e010      	b.n	800fa1a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f9f8:	7fbb      	ldrb	r3, [r7, #30]
 800f9fa:	f003 0311 	and.w	r3, r3, #17
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d003      	beq.n	800fa0a <f_open+0xea>
					res = FR_DENIED;
 800fa02:	2307      	movs	r3, #7
 800fa04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fa08:	e007      	b.n	800fa1a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fa0a:	79fb      	ldrb	r3, [r7, #7]
 800fa0c:	f003 0304 	and.w	r3, r3, #4
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d002      	beq.n	800fa1a <f_open+0xfa>
 800fa14:	2308      	movs	r3, #8
 800fa16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fa1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d168      	bne.n	800faf4 <f_open+0x1d4>
 800fa22:	79fb      	ldrb	r3, [r7, #7]
 800fa24:	f003 0308 	and.w	r3, r3, #8
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d063      	beq.n	800faf4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fa2c:	f7fa fb1e 	bl	800a06c <get_fattime>
 800fa30:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fa32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa34:	330e      	adds	r3, #14
 800fa36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fd fd1b 	bl	800d474 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	3316      	adds	r3, #22
 800fa42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fd fd15 	bl	800d474 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4c:	330b      	adds	r3, #11
 800fa4e:	2220      	movs	r2, #32
 800fa50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa56:	4611      	mov	r1, r2
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7fe fc6a 	bl	800e332 <ld_clust>
 800fa5e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa64:	2200      	movs	r2, #0
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7fe fc82 	bl	800e370 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6e:	331c      	adds	r3, #28
 800fa70:	2100      	movs	r1, #0
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fd fcfe 	bl	800d474 <st_dword>
					fs->wflag = 1;
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fa7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d037      	beq.n	800faf4 <f_open+0x1d4>
						dw = fs->winsect;
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa88:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800fa8a:	f107 0318 	add.w	r3, r7, #24
 800fa8e:	2200      	movs	r2, #0
 800fa90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fe f995 	bl	800ddc2 <remove_chain>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fa9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d126      	bne.n	800faf4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800faaa:	4618      	mov	r0, r3
 800faac:	f7fd ff3c 	bl	800d928 <move_window>
 800fab0:	4603      	mov	r3, r0
 800fab2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800faba:	3a01      	subs	r2, #1
 800fabc:	611a      	str	r2, [r3, #16]
 800fabe:	e019      	b.n	800faf4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fac0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d115      	bne.n	800faf4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fac8:	7fbb      	ldrb	r3, [r7, #30]
 800faca:	f003 0310 	and.w	r3, r3, #16
 800face:	2b00      	cmp	r3, #0
 800fad0:	d003      	beq.n	800fada <f_open+0x1ba>
					res = FR_NO_FILE;
 800fad2:	2304      	movs	r3, #4
 800fad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fad8:	e00c      	b.n	800faf4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fada:	79fb      	ldrb	r3, [r7, #7]
 800fadc:	f003 0302 	and.w	r3, r3, #2
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d007      	beq.n	800faf4 <f_open+0x1d4>
 800fae4:	7fbb      	ldrb	r3, [r7, #30]
 800fae6:	f003 0301 	and.w	r3, r3, #1
 800faea:	2b00      	cmp	r3, #0
 800faec:	d002      	beq.n	800faf4 <f_open+0x1d4>
						res = FR_DENIED;
 800faee:	2307      	movs	r3, #7
 800faf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800faf4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d128      	bne.n	800fb4e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fafc:	79fb      	ldrb	r3, [r7, #7]
 800fafe:	f003 0308 	and.w	r3, r3, #8
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d003      	beq.n	800fb0e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fb06:	79fb      	ldrb	r3, [r7, #7]
 800fb08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fb16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fb1c:	79fb      	ldrb	r3, [r7, #7]
 800fb1e:	f023 0301 	bic.w	r3, r3, #1
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	bf14      	ite	ne
 800fb26:	2301      	movne	r3, #1
 800fb28:	2300      	moveq	r3, #0
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	f107 0318 	add.w	r3, r7, #24
 800fb32:	4611      	mov	r1, r2
 800fb34:	4618      	mov	r0, r3
 800fb36:	f7fd fdc5 	bl	800d6c4 <inc_lock>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	691b      	ldr	r3, [r3, #16]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d102      	bne.n	800fb4e <f_open+0x22e>
 800fb48:	2302      	movs	r3, #2
 800fb4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fb4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	f040 8095 	bne.w	800fc82 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fe fbe7 	bl	800e332 <ld_clust>
 800fb64:	4602      	mov	r2, r0
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6c:	331c      	adds	r3, #28
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7fd fc42 	bl	800d3f8 <ld_dword>
 800fb74:	4602      	mov	r2, r0
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fb80:	697a      	ldr	r2, [r7, #20]
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	88da      	ldrh	r2, [r3, #6]
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	79fa      	ldrb	r2, [r7, #7]
 800fb92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2200      	movs	r2, #0
 800fb98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2200      	movs	r2, #0
 800fba4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	3330      	adds	r3, #48	; 0x30
 800fbaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbae:	2100      	movs	r1, #0
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7fd fcac 	bl	800d50e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fbb6:	79fb      	ldrb	r3, [r7, #7]
 800fbb8:	f003 0320 	and.w	r3, r3, #32
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d060      	beq.n	800fc82 <f_open+0x362>
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d05c      	beq.n	800fc82 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	68da      	ldr	r2, [r3, #12]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	895b      	ldrh	r3, [r3, #10]
 800fbd4:	025b      	lsls	r3, r3, #9
 800fbd6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	689b      	ldr	r3, [r3, #8]
 800fbdc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	68db      	ldr	r3, [r3, #12]
 800fbe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fbe4:	e016      	b.n	800fc14 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fd ff57 	bl	800da9e <get_fat>
 800fbf0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fbf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d802      	bhi.n	800fbfe <f_open+0x2de>
 800fbf8:	2302      	movs	r3, #2
 800fbfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fbfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc04:	d102      	bne.n	800fc0c <f_open+0x2ec>
 800fc06:	2301      	movs	r3, #1
 800fc08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fc0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc10:	1ad3      	subs	r3, r2, r3
 800fc12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d103      	bne.n	800fc24 <f_open+0x304>
 800fc1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d8e0      	bhi.n	800fbe6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc28:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fc2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d127      	bne.n	800fc82 <f_open+0x362>
 800fc32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d022      	beq.n	800fc82 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7fd ff0d 	bl	800da60 <clust2sect>
 800fc46:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fc48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d103      	bne.n	800fc56 <f_open+0x336>
						res = FR_INT_ERR;
 800fc4e:	2302      	movs	r3, #2
 800fc50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fc54:	e015      	b.n	800fc82 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fc56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc58:	0a5a      	lsrs	r2, r3, #9
 800fc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc5c:	441a      	add	r2, r3
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	7858      	ldrb	r0, [r3, #1]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6a1a      	ldr	r2, [r3, #32]
 800fc70:	2301      	movs	r3, #1
 800fc72:	f7fd fb4b 	bl	800d30c <disk_read>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d002      	beq.n	800fc82 <f_open+0x362>
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fc82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d002      	beq.n	800fc90 <f_open+0x370>
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fc90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3768      	adds	r7, #104	; 0x68
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b08e      	sub	sp, #56	; 0x38
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
 800fca8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f107 0214 	add.w	r2, r7, #20
 800fcba:	4611      	mov	r1, r2
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7ff fdb3 	bl	800f828 <validate>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fcc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d107      	bne.n	800fce0 <f_read+0x44>
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	7d5b      	ldrb	r3, [r3, #21]
 800fcd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fcd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d002      	beq.n	800fce6 <f_read+0x4a>
 800fce0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fce4:	e115      	b.n	800ff12 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	7d1b      	ldrb	r3, [r3, #20]
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d101      	bne.n	800fcf6 <f_read+0x5a>
 800fcf2:	2307      	movs	r3, #7
 800fcf4:	e10d      	b.n	800ff12 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	68da      	ldr	r2, [r3, #12]
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	699b      	ldr	r3, [r3, #24]
 800fcfe:	1ad3      	subs	r3, r2, r3
 800fd00:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	6a3b      	ldr	r3, [r7, #32]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	f240 80fe 	bls.w	800ff08 <f_read+0x26c>
 800fd0c:	6a3b      	ldr	r3, [r7, #32]
 800fd0e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fd10:	e0fa      	b.n	800ff08 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	699b      	ldr	r3, [r3, #24]
 800fd16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f040 80c6 	bne.w	800feac <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	699b      	ldr	r3, [r3, #24]
 800fd24:	0a5b      	lsrs	r3, r3, #9
 800fd26:	697a      	ldr	r2, [r7, #20]
 800fd28:	8952      	ldrh	r2, [r2, #10]
 800fd2a:	3a01      	subs	r2, #1
 800fd2c:	4013      	ands	r3, r2
 800fd2e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fd30:	69fb      	ldr	r3, [r7, #28]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d12f      	bne.n	800fd96 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	699b      	ldr	r3, [r3, #24]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d103      	bne.n	800fd46 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	689b      	ldr	r3, [r3, #8]
 800fd42:	633b      	str	r3, [r7, #48]	; 0x30
 800fd44:	e013      	b.n	800fd6e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d007      	beq.n	800fd5e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	699b      	ldr	r3, [r3, #24]
 800fd52:	4619      	mov	r1, r3
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f7fe f931 	bl	800dfbc <clmt_clust>
 800fd5a:	6338      	str	r0, [r7, #48]	; 0x30
 800fd5c:	e007      	b.n	800fd6e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	69db      	ldr	r3, [r3, #28]
 800fd64:	4619      	mov	r1, r3
 800fd66:	4610      	mov	r0, r2
 800fd68:	f7fd fe99 	bl	800da9e <get_fat>
 800fd6c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d804      	bhi.n	800fd7e <f_read+0xe2>
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2202      	movs	r2, #2
 800fd78:	755a      	strb	r2, [r3, #21]
 800fd7a:	2302      	movs	r3, #2
 800fd7c:	e0c9      	b.n	800ff12 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd84:	d104      	bne.n	800fd90 <f_read+0xf4>
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2201      	movs	r2, #1
 800fd8a:	755a      	strb	r2, [r3, #21]
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	e0c0      	b.n	800ff12 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd94:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fd96:	697a      	ldr	r2, [r7, #20]
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	69db      	ldr	r3, [r3, #28]
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	4610      	mov	r0, r2
 800fda0:	f7fd fe5e 	bl	800da60 <clust2sect>
 800fda4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d104      	bne.n	800fdb6 <f_read+0x11a>
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2202      	movs	r2, #2
 800fdb0:	755a      	strb	r2, [r3, #21]
 800fdb2:	2302      	movs	r3, #2
 800fdb4:	e0ad      	b.n	800ff12 <f_read+0x276>
			sect += csect;
 800fdb6:	69ba      	ldr	r2, [r7, #24]
 800fdb8:	69fb      	ldr	r3, [r7, #28]
 800fdba:	4413      	add	r3, r2
 800fdbc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	0a5b      	lsrs	r3, r3, #9
 800fdc2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d039      	beq.n	800fe3e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fdca:	69fa      	ldr	r2, [r7, #28]
 800fdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdce:	4413      	add	r3, r2
 800fdd0:	697a      	ldr	r2, [r7, #20]
 800fdd2:	8952      	ldrh	r2, [r2, #10]
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d905      	bls.n	800fde4 <f_read+0x148>
					cc = fs->csize - csect;
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	895b      	ldrh	r3, [r3, #10]
 800fddc:	461a      	mov	r2, r3
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	7858      	ldrb	r0, [r3, #1]
 800fde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdea:	69ba      	ldr	r2, [r7, #24]
 800fdec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fdee:	f7fd fa8d 	bl	800d30c <disk_read>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d004      	beq.n	800fe02 <f_read+0x166>
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	755a      	strb	r2, [r3, #21]
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e087      	b.n	800ff12 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	7d1b      	ldrb	r3, [r3, #20]
 800fe06:	b25b      	sxtb	r3, r3
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	da14      	bge.n	800fe36 <f_read+0x19a>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	6a1a      	ldr	r2, [r3, #32]
 800fe10:	69bb      	ldr	r3, [r7, #24]
 800fe12:	1ad3      	subs	r3, r2, r3
 800fe14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d90d      	bls.n	800fe36 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6a1a      	ldr	r2, [r3, #32]
 800fe1e:	69bb      	ldr	r3, [r7, #24]
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	025b      	lsls	r3, r3, #9
 800fe24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe26:	18d0      	adds	r0, r2, r3
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	3330      	adds	r3, #48	; 0x30
 800fe2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe30:	4619      	mov	r1, r3
 800fe32:	f7fd fb4b 	bl	800d4cc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fe36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe38:	025b      	lsls	r3, r3, #9
 800fe3a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800fe3c:	e050      	b.n	800fee0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6a1b      	ldr	r3, [r3, #32]
 800fe42:	69ba      	ldr	r2, [r7, #24]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d02e      	beq.n	800fea6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	7d1b      	ldrb	r3, [r3, #20]
 800fe4c:	b25b      	sxtb	r3, r3
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	da18      	bge.n	800fe84 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	7858      	ldrb	r0, [r3, #1]
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6a1a      	ldr	r2, [r3, #32]
 800fe60:	2301      	movs	r3, #1
 800fe62:	f7fd fa73 	bl	800d34c <disk_write>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d004      	beq.n	800fe76 <f_read+0x1da>
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2201      	movs	r2, #1
 800fe70:	755a      	strb	r2, [r3, #21]
 800fe72:	2301      	movs	r3, #1
 800fe74:	e04d      	b.n	800ff12 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	7d1b      	ldrb	r3, [r3, #20]
 800fe7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe7e:	b2da      	uxtb	r2, r3
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	7858      	ldrb	r0, [r3, #1]
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe8e:	2301      	movs	r3, #1
 800fe90:	69ba      	ldr	r2, [r7, #24]
 800fe92:	f7fd fa3b 	bl	800d30c <disk_read>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d004      	beq.n	800fea6 <f_read+0x20a>
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2201      	movs	r2, #1
 800fea0:	755a      	strb	r2, [r3, #21]
 800fea2:	2301      	movs	r3, #1
 800fea4:	e035      	b.n	800ff12 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	69ba      	ldr	r2, [r7, #24]
 800feaa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	699b      	ldr	r3, [r3, #24]
 800feb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feb4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800feb8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800feba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	429a      	cmp	r2, r3
 800fec0:	d901      	bls.n	800fec6 <f_read+0x22a>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	699b      	ldr	r3, [r3, #24]
 800fed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fed4:	4413      	add	r3, r2
 800fed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fed8:	4619      	mov	r1, r3
 800feda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fedc:	f7fd faf6 	bl	800d4cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee4:	4413      	add	r3, r2
 800fee6:	627b      	str	r3, [r7, #36]	; 0x24
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	699a      	ldr	r2, [r3, #24]
 800feec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feee:	441a      	add	r2, r3
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	619a      	str	r2, [r3, #24]
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefa:	441a      	add	r2, r3
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	601a      	str	r2, [r3, #0]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	f47f af01 	bne.w	800fd12 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ff10:	2300      	movs	r3, #0
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3738      	adds	r7, #56	; 0x38
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}

0800ff1a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ff1a:	b580      	push	{r7, lr}
 800ff1c:	b086      	sub	sp, #24
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f107 0208 	add.w	r2, r7, #8
 800ff28:	4611      	mov	r1, r2
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7ff fc7c 	bl	800f828 <validate>
 800ff30:	4603      	mov	r3, r0
 800ff32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff34:	7dfb      	ldrb	r3, [r7, #23]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d168      	bne.n	801000c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	7d1b      	ldrb	r3, [r3, #20]
 800ff3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d062      	beq.n	801000c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	7d1b      	ldrb	r3, [r3, #20]
 800ff4a:	b25b      	sxtb	r3, r3
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	da15      	bge.n	800ff7c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	7858      	ldrb	r0, [r3, #1]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a1a      	ldr	r2, [r3, #32]
 800ff5e:	2301      	movs	r3, #1
 800ff60:	f7fd f9f4 	bl	800d34c <disk_write>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d001      	beq.n	800ff6e <f_sync+0x54>
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	e04f      	b.n	801000e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	7d1b      	ldrb	r3, [r3, #20]
 800ff72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff76:	b2da      	uxtb	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ff7c:	f7fa f876 	bl	800a06c <get_fattime>
 800ff80:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ff82:	68ba      	ldr	r2, [r7, #8]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff88:	4619      	mov	r1, r3
 800ff8a:	4610      	mov	r0, r2
 800ff8c:	f7fd fccc 	bl	800d928 <move_window>
 800ff90:	4603      	mov	r3, r0
 800ff92:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ff94:	7dfb      	ldrb	r3, [r7, #23]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d138      	bne.n	801000c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff9e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	330b      	adds	r3, #11
 800ffa4:	781a      	ldrb	r2, [r3, #0]
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	330b      	adds	r3, #11
 800ffaa:	f042 0220 	orr.w	r2, r2, #32
 800ffae:	b2d2      	uxtb	r2, r2
 800ffb0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6818      	ldr	r0, [r3, #0]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	689b      	ldr	r3, [r3, #8]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	68f9      	ldr	r1, [r7, #12]
 800ffbe:	f7fe f9d7 	bl	800e370 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f103 021c 	add.w	r2, r3, #28
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	4619      	mov	r1, r3
 800ffce:	4610      	mov	r0, r2
 800ffd0:	f7fd fa50 	bl	800d474 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	3316      	adds	r3, #22
 800ffd8:	6939      	ldr	r1, [r7, #16]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7fd fa4a 	bl	800d474 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	3312      	adds	r3, #18
 800ffe4:	2100      	movs	r1, #0
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fd fa29 	bl	800d43e <st_word>
					fs->wflag = 1;
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	2201      	movs	r2, #1
 800fff0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fd fcc5 	bl	800d984 <sync_fs>
 800fffa:	4603      	mov	r3, r0
 800fffc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	7d1b      	ldrb	r3, [r3, #20]
 8010002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010006:	b2da      	uxtb	r2, r3
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801000c:	7dfb      	ldrb	r3, [r7, #23]
}
 801000e:	4618      	mov	r0, r3
 8010010:	3718      	adds	r7, #24
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}

08010016 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010016:	b580      	push	{r7, lr}
 8010018:	b084      	sub	sp, #16
 801001a:	af00      	add	r7, sp, #0
 801001c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7ff ff7b 	bl	800ff1a <f_sync>
 8010024:	4603      	mov	r3, r0
 8010026:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010028:	7bfb      	ldrb	r3, [r7, #15]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d118      	bne.n	8010060 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f107 0208 	add.w	r2, r7, #8
 8010034:	4611      	mov	r1, r2
 8010036:	4618      	mov	r0, r3
 8010038:	f7ff fbf6 	bl	800f828 <validate>
 801003c:	4603      	mov	r3, r0
 801003e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010040:	7bfb      	ldrb	r3, [r7, #15]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d10c      	bne.n	8010060 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	691b      	ldr	r3, [r3, #16]
 801004a:	4618      	mov	r0, r3
 801004c:	f7fd fbc8 	bl	800d7e0 <dec_lock>
 8010050:	4603      	mov	r3, r0
 8010052:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010054:	7bfb      	ldrb	r3, [r7, #15]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d102      	bne.n	8010060 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2200      	movs	r2, #0
 801005e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010060:	7bfb      	ldrb	r3, [r7, #15]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3710      	adds	r7, #16
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}

0801006a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801006a:	b580      	push	{r7, lr}
 801006c:	b090      	sub	sp, #64	; 0x40
 801006e:	af00      	add	r7, sp, #0
 8010070:	6078      	str	r0, [r7, #4]
 8010072:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f107 0208 	add.w	r2, r7, #8
 801007a:	4611      	mov	r1, r2
 801007c:	4618      	mov	r0, r3
 801007e:	f7ff fbd3 	bl	800f828 <validate>
 8010082:	4603      	mov	r3, r0
 8010084:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010088:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801008c:	2b00      	cmp	r3, #0
 801008e:	d103      	bne.n	8010098 <f_lseek+0x2e>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	7d5b      	ldrb	r3, [r3, #21]
 8010094:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010098:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801009c:	2b00      	cmp	r3, #0
 801009e:	d002      	beq.n	80100a6 <f_lseek+0x3c>
 80100a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80100a4:	e1e6      	b.n	8010474 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f000 80d1 	beq.w	8010252 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100b6:	d15a      	bne.n	801016e <f_lseek+0x104>
			tbl = fp->cltbl;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100bc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80100be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c0:	1d1a      	adds	r2, r3, #4
 80100c2:	627a      	str	r2, [r7, #36]	; 0x24
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	617b      	str	r3, [r7, #20]
 80100c8:	2302      	movs	r3, #2
 80100ca:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	689b      	ldr	r3, [r3, #8]
 80100d0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80100d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d03a      	beq.n	801014e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80100d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100da:	613b      	str	r3, [r7, #16]
 80100dc:	2300      	movs	r3, #0
 80100de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e2:	3302      	adds	r3, #2
 80100e4:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80100e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e8:	60fb      	str	r3, [r7, #12]
 80100ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ec:	3301      	adds	r3, #1
 80100ee:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7fd fcd2 	bl	800da9e <get_fat>
 80100fa:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80100fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d804      	bhi.n	801010c <f_lseek+0xa2>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2202      	movs	r2, #2
 8010106:	755a      	strb	r2, [r3, #21]
 8010108:	2302      	movs	r3, #2
 801010a:	e1b3      	b.n	8010474 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801010c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010112:	d104      	bne.n	801011e <f_lseek+0xb4>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2201      	movs	r2, #1
 8010118:	755a      	strb	r2, [r3, #21]
 801011a:	2301      	movs	r3, #1
 801011c:	e1aa      	b.n	8010474 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	3301      	adds	r3, #1
 8010122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010124:	429a      	cmp	r2, r3
 8010126:	d0de      	beq.n	80100e6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	429a      	cmp	r2, r3
 801012e:	d809      	bhi.n	8010144 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010132:	1d1a      	adds	r2, r3, #4
 8010134:	627a      	str	r2, [r7, #36]	; 0x24
 8010136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010138:	601a      	str	r2, [r3, #0]
 801013a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013c:	1d1a      	adds	r2, r3, #4
 801013e:	627a      	str	r2, [r7, #36]	; 0x24
 8010140:	693a      	ldr	r2, [r7, #16]
 8010142:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	699b      	ldr	r3, [r3, #24]
 8010148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801014a:	429a      	cmp	r2, r3
 801014c:	d3c4      	bcc.n	80100d8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010154:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	429a      	cmp	r2, r3
 801015c:	d803      	bhi.n	8010166 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801015e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010160:	2200      	movs	r2, #0
 8010162:	601a      	str	r2, [r3, #0]
 8010164:	e184      	b.n	8010470 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010166:	2311      	movs	r3, #17
 8010168:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801016c:	e180      	b.n	8010470 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	683a      	ldr	r2, [r7, #0]
 8010174:	429a      	cmp	r2, r3
 8010176:	d902      	bls.n	801017e <f_lseek+0x114>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	68db      	ldr	r3, [r3, #12]
 801017c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	683a      	ldr	r2, [r7, #0]
 8010182:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	f000 8172 	beq.w	8010470 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	3b01      	subs	r3, #1
 8010190:	4619      	mov	r1, r3
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7fd ff12 	bl	800dfbc <clmt_clust>
 8010198:	4602      	mov	r2, r0
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	69db      	ldr	r3, [r3, #28]
 80101a4:	4619      	mov	r1, r3
 80101a6:	4610      	mov	r0, r2
 80101a8:	f7fd fc5a 	bl	800da60 <clust2sect>
 80101ac:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d104      	bne.n	80101be <f_lseek+0x154>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2202      	movs	r2, #2
 80101b8:	755a      	strb	r2, [r3, #21]
 80101ba:	2302      	movs	r3, #2
 80101bc:	e15a      	b.n	8010474 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	3b01      	subs	r3, #1
 80101c2:	0a5b      	lsrs	r3, r3, #9
 80101c4:	68ba      	ldr	r2, [r7, #8]
 80101c6:	8952      	ldrh	r2, [r2, #10]
 80101c8:	3a01      	subs	r2, #1
 80101ca:	4013      	ands	r3, r2
 80101cc:	69ba      	ldr	r2, [r7, #24]
 80101ce:	4413      	add	r3, r2
 80101d0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	699b      	ldr	r3, [r3, #24]
 80101d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f000 8148 	beq.w	8010470 <f_lseek+0x406>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6a1b      	ldr	r3, [r3, #32]
 80101e4:	69ba      	ldr	r2, [r7, #24]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	f000 8142 	beq.w	8010470 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	7d1b      	ldrb	r3, [r3, #20]
 80101f0:	b25b      	sxtb	r3, r3
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	da18      	bge.n	8010228 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	7858      	ldrb	r0, [r3, #1]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6a1a      	ldr	r2, [r3, #32]
 8010204:	2301      	movs	r3, #1
 8010206:	f7fd f8a1 	bl	800d34c <disk_write>
 801020a:	4603      	mov	r3, r0
 801020c:	2b00      	cmp	r3, #0
 801020e:	d004      	beq.n	801021a <f_lseek+0x1b0>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2201      	movs	r2, #1
 8010214:	755a      	strb	r2, [r3, #21]
 8010216:	2301      	movs	r3, #1
 8010218:	e12c      	b.n	8010474 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	7d1b      	ldrb	r3, [r3, #20]
 801021e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010222:	b2da      	uxtb	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	7858      	ldrb	r0, [r3, #1]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010232:	2301      	movs	r3, #1
 8010234:	69ba      	ldr	r2, [r7, #24]
 8010236:	f7fd f869 	bl	800d30c <disk_read>
 801023a:	4603      	mov	r3, r0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d004      	beq.n	801024a <f_lseek+0x1e0>
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2201      	movs	r2, #1
 8010244:	755a      	strb	r2, [r3, #21]
 8010246:	2301      	movs	r3, #1
 8010248:	e114      	b.n	8010474 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	69ba      	ldr	r2, [r7, #24]
 801024e:	621a      	str	r2, [r3, #32]
 8010250:	e10e      	b.n	8010470 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	683a      	ldr	r2, [r7, #0]
 8010258:	429a      	cmp	r2, r3
 801025a:	d908      	bls.n	801026e <f_lseek+0x204>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	7d1b      	ldrb	r3, [r3, #20]
 8010260:	f003 0302 	and.w	r3, r3, #2
 8010264:	2b00      	cmp	r3, #0
 8010266:	d102      	bne.n	801026e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	68db      	ldr	r3, [r3, #12]
 801026c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	699b      	ldr	r3, [r3, #24]
 8010272:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010274:	2300      	movs	r3, #0
 8010276:	637b      	str	r3, [r7, #52]	; 0x34
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801027c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	2b00      	cmp	r3, #0
 8010282:	f000 80a7 	beq.w	80103d4 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	895b      	ldrh	r3, [r3, #10]
 801028a:	025b      	lsls	r3, r3, #9
 801028c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801028e:	6a3b      	ldr	r3, [r7, #32]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d01b      	beq.n	80102cc <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	1e5a      	subs	r2, r3, #1
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	fbb2 f2f3 	udiv	r2, r2, r3
 801029e:	6a3b      	ldr	r3, [r7, #32]
 80102a0:	1e59      	subs	r1, r3, #1
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d30f      	bcc.n	80102cc <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80102ac:	6a3b      	ldr	r3, [r7, #32]
 80102ae:	1e5a      	subs	r2, r3, #1
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	425b      	negs	r3, r3
 80102b4:	401a      	ands	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	699b      	ldr	r3, [r3, #24]
 80102be:	683a      	ldr	r2, [r7, #0]
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	69db      	ldr	r3, [r3, #28]
 80102c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80102ca:	e022      	b.n	8010312 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80102d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d119      	bne.n	801030c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2100      	movs	r1, #0
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fd fdd5 	bl	800de8c <create_chain>
 80102e2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80102e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e6:	2b01      	cmp	r3, #1
 80102e8:	d104      	bne.n	80102f4 <f_lseek+0x28a>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2202      	movs	r2, #2
 80102ee:	755a      	strb	r2, [r3, #21]
 80102f0:	2302      	movs	r3, #2
 80102f2:	e0bf      	b.n	8010474 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80102f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102fa:	d104      	bne.n	8010306 <f_lseek+0x29c>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2201      	movs	r2, #1
 8010300:	755a      	strb	r2, [r3, #21]
 8010302:	2301      	movs	r3, #1
 8010304:	e0b6      	b.n	8010474 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801030a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010310:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010314:	2b00      	cmp	r3, #0
 8010316:	d05d      	beq.n	80103d4 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010318:	e03a      	b.n	8010390 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801031a:	683a      	ldr	r2, [r7, #0]
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	1ad3      	subs	r3, r2, r3
 8010320:	603b      	str	r3, [r7, #0]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	699a      	ldr	r2, [r3, #24]
 8010326:	69fb      	ldr	r3, [r7, #28]
 8010328:	441a      	add	r2, r3
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	7d1b      	ldrb	r3, [r3, #20]
 8010332:	f003 0302 	and.w	r3, r3, #2
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00b      	beq.n	8010352 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801033e:	4618      	mov	r0, r3
 8010340:	f7fd fda4 	bl	800de8c <create_chain>
 8010344:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010348:	2b00      	cmp	r3, #0
 801034a:	d108      	bne.n	801035e <f_lseek+0x2f4>
							ofs = 0; break;
 801034c:	2300      	movs	r3, #0
 801034e:	603b      	str	r3, [r7, #0]
 8010350:	e022      	b.n	8010398 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010356:	4618      	mov	r0, r3
 8010358:	f7fd fba1 	bl	800da9e <get_fat>
 801035c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801035e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010364:	d104      	bne.n	8010370 <f_lseek+0x306>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2201      	movs	r2, #1
 801036a:	755a      	strb	r2, [r3, #21]
 801036c:	2301      	movs	r3, #1
 801036e:	e081      	b.n	8010474 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010372:	2b01      	cmp	r3, #1
 8010374:	d904      	bls.n	8010380 <f_lseek+0x316>
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	699b      	ldr	r3, [r3, #24]
 801037a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801037c:	429a      	cmp	r2, r3
 801037e:	d304      	bcc.n	801038a <f_lseek+0x320>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2202      	movs	r2, #2
 8010384:	755a      	strb	r2, [r3, #21]
 8010386:	2302      	movs	r3, #2
 8010388:	e074      	b.n	8010474 <f_lseek+0x40a>
					fp->clust = clst;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801038e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010390:	683a      	ldr	r2, [r7, #0]
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	429a      	cmp	r2, r3
 8010396:	d8c0      	bhi.n	801031a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	699a      	ldr	r2, [r3, #24]
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	441a      	add	r2, r3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d012      	beq.n	80103d4 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fd fb54 	bl	800da60 <clust2sect>
 80103b8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80103ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d104      	bne.n	80103ca <f_lseek+0x360>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2202      	movs	r2, #2
 80103c4:	755a      	strb	r2, [r3, #21]
 80103c6:	2302      	movs	r3, #2
 80103c8:	e054      	b.n	8010474 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	0a5b      	lsrs	r3, r3, #9
 80103ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103d0:	4413      	add	r3, r2
 80103d2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	699a      	ldr	r2, [r3, #24]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d90a      	bls.n	80103f6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	699a      	ldr	r2, [r3, #24]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	7d1b      	ldrb	r3, [r3, #20]
 80103ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103f0:	b2da      	uxtb	r2, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	699b      	ldr	r3, [r3, #24]
 80103fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d036      	beq.n	8010470 <f_lseek+0x406>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6a1b      	ldr	r3, [r3, #32]
 8010406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010408:	429a      	cmp	r2, r3
 801040a:	d031      	beq.n	8010470 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	7d1b      	ldrb	r3, [r3, #20]
 8010410:	b25b      	sxtb	r3, r3
 8010412:	2b00      	cmp	r3, #0
 8010414:	da18      	bge.n	8010448 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	7858      	ldrb	r0, [r3, #1]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6a1a      	ldr	r2, [r3, #32]
 8010424:	2301      	movs	r3, #1
 8010426:	f7fc ff91 	bl	800d34c <disk_write>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d004      	beq.n	801043a <f_lseek+0x3d0>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2201      	movs	r2, #1
 8010434:	755a      	strb	r2, [r3, #21]
 8010436:	2301      	movs	r3, #1
 8010438:	e01c      	b.n	8010474 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	7d1b      	ldrb	r3, [r3, #20]
 801043e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010442:	b2da      	uxtb	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	7858      	ldrb	r0, [r3, #1]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010452:	2301      	movs	r3, #1
 8010454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010456:	f7fc ff59 	bl	800d30c <disk_read>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d004      	beq.n	801046a <f_lseek+0x400>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2201      	movs	r2, #1
 8010464:	755a      	strb	r2, [r3, #21]
 8010466:	2301      	movs	r3, #1
 8010468:	e004      	b.n	8010474 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801046e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010470:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010474:	4618      	mov	r0, r3
 8010476:	3740      	adds	r7, #64	; 0x40
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}

0801047c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b086      	sub	sp, #24
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d101      	bne.n	8010490 <f_opendir+0x14>
 801048c:	2309      	movs	r3, #9
 801048e:	e064      	b.n	801055a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010494:	f107 010c 	add.w	r1, r7, #12
 8010498:	463b      	mov	r3, r7
 801049a:	2200      	movs	r2, #0
 801049c:	4618      	mov	r0, r3
 801049e:	f7fe ff73 	bl	800f388 <find_volume>
 80104a2:	4603      	mov	r3, r0
 80104a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80104a6:	7dfb      	ldrb	r3, [r7, #23]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d14f      	bne.n	801054c <f_opendir+0xd0>
		obj->fs = fs;
 80104ac:	68fa      	ldr	r2, [r7, #12]
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	4619      	mov	r1, r3
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7fe fe5a 	bl	800f170 <follow_path>
 80104bc:	4603      	mov	r3, r0
 80104be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80104c0:	7dfb      	ldrb	r3, [r7, #23]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d13d      	bne.n	8010542 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80104cc:	b25b      	sxtb	r3, r3
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	db12      	blt.n	80104f8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	799b      	ldrb	r3, [r3, #6]
 80104d6:	f003 0310 	and.w	r3, r3, #16
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d00a      	beq.n	80104f4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80104de:	68fa      	ldr	r2, [r7, #12]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a1b      	ldr	r3, [r3, #32]
 80104e4:	4619      	mov	r1, r3
 80104e6:	4610      	mov	r0, r2
 80104e8:	f7fd ff23 	bl	800e332 <ld_clust>
 80104ec:	4602      	mov	r2, r0
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	609a      	str	r2, [r3, #8]
 80104f2:	e001      	b.n	80104f8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80104f4:	2305      	movs	r3, #5
 80104f6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80104f8:	7dfb      	ldrb	r3, [r7, #23]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d121      	bne.n	8010542 <f_opendir+0xc6>
				obj->id = fs->id;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	88da      	ldrh	r2, [r3, #6]
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010506:	2100      	movs	r1, #0
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f7fd fd8b 	bl	800e024 <dir_sdi>
 801050e:	4603      	mov	r3, r0
 8010510:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010512:	7dfb      	ldrb	r3, [r7, #23]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d114      	bne.n	8010542 <f_opendir+0xc6>
					if (obj->sclust) {
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00d      	beq.n	801053c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010520:	2100      	movs	r1, #0
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f7fd f8ce 	bl	800d6c4 <inc_lock>
 8010528:	4602      	mov	r2, r0
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	691b      	ldr	r3, [r3, #16]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d105      	bne.n	8010542 <f_opendir+0xc6>
 8010536:	2312      	movs	r3, #18
 8010538:	75fb      	strb	r3, [r7, #23]
 801053a:	e002      	b.n	8010542 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	2200      	movs	r2, #0
 8010540:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010542:	7dfb      	ldrb	r3, [r7, #23]
 8010544:	2b04      	cmp	r3, #4
 8010546:	d101      	bne.n	801054c <f_opendir+0xd0>
 8010548:	2305      	movs	r3, #5
 801054a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801054c:	7dfb      	ldrb	r3, [r7, #23]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d002      	beq.n	8010558 <f_opendir+0xdc>
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	2200      	movs	r2, #0
 8010556:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010558:	7dfb      	ldrb	r3, [r7, #23]
}
 801055a:	4618      	mov	r0, r3
 801055c:	3718      	adds	r7, #24
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}

08010562 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010562:	b580      	push	{r7, lr}
 8010564:	b084      	sub	sp, #16
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f107 0208 	add.w	r2, r7, #8
 8010570:	4611      	mov	r1, r2
 8010572:	4618      	mov	r0, r3
 8010574:	f7ff f958 	bl	800f828 <validate>
 8010578:	4603      	mov	r3, r0
 801057a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801057c:	7bfb      	ldrb	r3, [r7, #15]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d110      	bne.n	80105a4 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	691b      	ldr	r3, [r3, #16]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d006      	beq.n	8010598 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	691b      	ldr	r3, [r3, #16]
 801058e:	4618      	mov	r0, r3
 8010590:	f7fd f926 	bl	800d7e0 <dec_lock>
 8010594:	4603      	mov	r3, r0
 8010596:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010598:	7bfb      	ldrb	r3, [r7, #15]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d102      	bne.n	80105a4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2200      	movs	r2, #0
 80105a2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80105a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}

080105ae <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b084      	sub	sp, #16
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
 80105b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f107 0208 	add.w	r2, r7, #8
 80105be:	4611      	mov	r1, r2
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7ff f931 	bl	800f828 <validate>
 80105c6:	4603      	mov	r3, r0
 80105c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80105ca:	7bfb      	ldrb	r3, [r7, #15]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d126      	bne.n	801061e <f_readdir+0x70>
		if (!fno) {
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d106      	bne.n	80105e4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80105d6:	2100      	movs	r1, #0
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f7fd fd23 	bl	800e024 <dir_sdi>
 80105de:	4603      	mov	r3, r0
 80105e0:	73fb      	strb	r3, [r7, #15]
 80105e2:	e01c      	b.n	801061e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80105e4:	2100      	movs	r1, #0
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f7fe f8cd 	bl	800e786 <dir_read>
 80105ec:	4603      	mov	r3, r0
 80105ee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80105f0:	7bfb      	ldrb	r3, [r7, #15]
 80105f2:	2b04      	cmp	r3, #4
 80105f4:	d101      	bne.n	80105fa <f_readdir+0x4c>
 80105f6:	2300      	movs	r3, #0
 80105f8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80105fa:	7bfb      	ldrb	r3, [r7, #15]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d10e      	bne.n	801061e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010600:	6839      	ldr	r1, [r7, #0]
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f7fe fb1e 	bl	800ec44 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010608:	2100      	movs	r1, #0
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f7fd fd85 	bl	800e11a <dir_next>
 8010610:	4603      	mov	r3, r0
 8010612:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010614:	7bfb      	ldrb	r3, [r7, #15]
 8010616:	2b04      	cmp	r3, #4
 8010618:	d101      	bne.n	801061e <f_readdir+0x70>
 801061a:	2300      	movs	r3, #0
 801061c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801061e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010620:	4618      	mov	r0, r3
 8010622:	3710      	adds	r7, #16
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010628:	b480      	push	{r7}
 801062a:	b087      	sub	sp, #28
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	60b9      	str	r1, [r7, #8]
 8010632:	4613      	mov	r3, r2
 8010634:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010636:	2301      	movs	r3, #1
 8010638:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801063a:	2300      	movs	r3, #0
 801063c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801063e:	4b1f      	ldr	r3, [pc, #124]	; (80106bc <FATFS_LinkDriverEx+0x94>)
 8010640:	7a5b      	ldrb	r3, [r3, #9]
 8010642:	b2db      	uxtb	r3, r3
 8010644:	2b00      	cmp	r3, #0
 8010646:	d131      	bne.n	80106ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010648:	4b1c      	ldr	r3, [pc, #112]	; (80106bc <FATFS_LinkDriverEx+0x94>)
 801064a:	7a5b      	ldrb	r3, [r3, #9]
 801064c:	b2db      	uxtb	r3, r3
 801064e:	461a      	mov	r2, r3
 8010650:	4b1a      	ldr	r3, [pc, #104]	; (80106bc <FATFS_LinkDriverEx+0x94>)
 8010652:	2100      	movs	r1, #0
 8010654:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010656:	4b19      	ldr	r3, [pc, #100]	; (80106bc <FATFS_LinkDriverEx+0x94>)
 8010658:	7a5b      	ldrb	r3, [r3, #9]
 801065a:	b2db      	uxtb	r3, r3
 801065c:	4a17      	ldr	r2, [pc, #92]	; (80106bc <FATFS_LinkDriverEx+0x94>)
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	4413      	add	r3, r2
 8010662:	68fa      	ldr	r2, [r7, #12]
 8010664:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010666:	4b15      	ldr	r3, [pc, #84]	; (80106bc <FATFS_LinkDriverEx+0x94>)
 8010668:	7a5b      	ldrb	r3, [r3, #9]
 801066a:	b2db      	uxtb	r3, r3
 801066c:	461a      	mov	r2, r3
 801066e:	4b13      	ldr	r3, [pc, #76]	; (80106bc <FATFS_LinkDriverEx+0x94>)
 8010670:	4413      	add	r3, r2
 8010672:	79fa      	ldrb	r2, [r7, #7]
 8010674:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010676:	4b11      	ldr	r3, [pc, #68]	; (80106bc <FATFS_LinkDriverEx+0x94>)
 8010678:	7a5b      	ldrb	r3, [r3, #9]
 801067a:	b2db      	uxtb	r3, r3
 801067c:	1c5a      	adds	r2, r3, #1
 801067e:	b2d1      	uxtb	r1, r2
 8010680:	4a0e      	ldr	r2, [pc, #56]	; (80106bc <FATFS_LinkDriverEx+0x94>)
 8010682:	7251      	strb	r1, [r2, #9]
 8010684:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010686:	7dbb      	ldrb	r3, [r7, #22]
 8010688:	3330      	adds	r3, #48	; 0x30
 801068a:	b2da      	uxtb	r2, r3
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	3301      	adds	r3, #1
 8010694:	223a      	movs	r2, #58	; 0x3a
 8010696:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	3302      	adds	r3, #2
 801069c:	222f      	movs	r2, #47	; 0x2f
 801069e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	3303      	adds	r3, #3
 80106a4:	2200      	movs	r2, #0
 80106a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80106a8:	2300      	movs	r3, #0
 80106aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80106ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	371c      	adds	r7, #28
 80106b2:	46bd      	mov	sp, r7
 80106b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b8:	4770      	bx	lr
 80106ba:	bf00      	nop
 80106bc:	20001dd8 	.word	0x20001dd8

080106c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80106ca:	2200      	movs	r2, #0
 80106cc:	6839      	ldr	r1, [r7, #0]
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7ff ffaa 	bl	8010628 <FATFS_LinkDriverEx>
 80106d4:	4603      	mov	r3, r0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3708      	adds	r7, #8
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
	...

080106e0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80106e0:	b480      	push	{r7}
 80106e2:	b085      	sub	sp, #20
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	4603      	mov	r3, r0
 80106e8:	6039      	str	r1, [r7, #0]
 80106ea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80106ec:	88fb      	ldrh	r3, [r7, #6]
 80106ee:	2b7f      	cmp	r3, #127	; 0x7f
 80106f0:	d802      	bhi.n	80106f8 <ff_convert+0x18>
		c = chr;
 80106f2:	88fb      	ldrh	r3, [r7, #6]
 80106f4:	81fb      	strh	r3, [r7, #14]
 80106f6:	e025      	b.n	8010744 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d00b      	beq.n	8010716 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80106fe:	88fb      	ldrh	r3, [r7, #6]
 8010700:	2bff      	cmp	r3, #255	; 0xff
 8010702:	d805      	bhi.n	8010710 <ff_convert+0x30>
 8010704:	88fb      	ldrh	r3, [r7, #6]
 8010706:	3b80      	subs	r3, #128	; 0x80
 8010708:	4a12      	ldr	r2, [pc, #72]	; (8010754 <ff_convert+0x74>)
 801070a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801070e:	e000      	b.n	8010712 <ff_convert+0x32>
 8010710:	2300      	movs	r3, #0
 8010712:	81fb      	strh	r3, [r7, #14]
 8010714:	e016      	b.n	8010744 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010716:	2300      	movs	r3, #0
 8010718:	81fb      	strh	r3, [r7, #14]
 801071a:	e009      	b.n	8010730 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801071c:	89fb      	ldrh	r3, [r7, #14]
 801071e:	4a0d      	ldr	r2, [pc, #52]	; (8010754 <ff_convert+0x74>)
 8010720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010724:	88fa      	ldrh	r2, [r7, #6]
 8010726:	429a      	cmp	r2, r3
 8010728:	d006      	beq.n	8010738 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801072a:	89fb      	ldrh	r3, [r7, #14]
 801072c:	3301      	adds	r3, #1
 801072e:	81fb      	strh	r3, [r7, #14]
 8010730:	89fb      	ldrh	r3, [r7, #14]
 8010732:	2b7f      	cmp	r3, #127	; 0x7f
 8010734:	d9f2      	bls.n	801071c <ff_convert+0x3c>
 8010736:	e000      	b.n	801073a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010738:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801073a:	89fb      	ldrh	r3, [r7, #14]
 801073c:	3380      	adds	r3, #128	; 0x80
 801073e:	b29b      	uxth	r3, r3
 8010740:	b2db      	uxtb	r3, r3
 8010742:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010744:	89fb      	ldrh	r3, [r7, #14]
}
 8010746:	4618      	mov	r0, r3
 8010748:	3714      	adds	r7, #20
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr
 8010752:	bf00      	nop
 8010754:	08011b74 	.word	0x08011b74

08010758 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010758:	b480      	push	{r7}
 801075a:	b087      	sub	sp, #28
 801075c:	af00      	add	r7, sp, #0
 801075e:	4603      	mov	r3, r0
 8010760:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010762:	88fb      	ldrh	r3, [r7, #6]
 8010764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010768:	d201      	bcs.n	801076e <ff_wtoupper+0x16>
 801076a:	4b3e      	ldr	r3, [pc, #248]	; (8010864 <ff_wtoupper+0x10c>)
 801076c:	e000      	b.n	8010770 <ff_wtoupper+0x18>
 801076e:	4b3e      	ldr	r3, [pc, #248]	; (8010868 <ff_wtoupper+0x110>)
 8010770:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	1c9a      	adds	r2, r3, #2
 8010776:	617a      	str	r2, [r7, #20]
 8010778:	881b      	ldrh	r3, [r3, #0]
 801077a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801077c:	8a7b      	ldrh	r3, [r7, #18]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d068      	beq.n	8010854 <ff_wtoupper+0xfc>
 8010782:	88fa      	ldrh	r2, [r7, #6]
 8010784:	8a7b      	ldrh	r3, [r7, #18]
 8010786:	429a      	cmp	r2, r3
 8010788:	d364      	bcc.n	8010854 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	1c9a      	adds	r2, r3, #2
 801078e:	617a      	str	r2, [r7, #20]
 8010790:	881b      	ldrh	r3, [r3, #0]
 8010792:	823b      	strh	r3, [r7, #16]
 8010794:	8a3b      	ldrh	r3, [r7, #16]
 8010796:	0a1b      	lsrs	r3, r3, #8
 8010798:	81fb      	strh	r3, [r7, #14]
 801079a:	8a3b      	ldrh	r3, [r7, #16]
 801079c:	b2db      	uxtb	r3, r3
 801079e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80107a0:	88fa      	ldrh	r2, [r7, #6]
 80107a2:	8a79      	ldrh	r1, [r7, #18]
 80107a4:	8a3b      	ldrh	r3, [r7, #16]
 80107a6:	440b      	add	r3, r1
 80107a8:	429a      	cmp	r2, r3
 80107aa:	da49      	bge.n	8010840 <ff_wtoupper+0xe8>
			switch (cmd) {
 80107ac:	89fb      	ldrh	r3, [r7, #14]
 80107ae:	2b08      	cmp	r3, #8
 80107b0:	d84f      	bhi.n	8010852 <ff_wtoupper+0xfa>
 80107b2:	a201      	add	r2, pc, #4	; (adr r2, 80107b8 <ff_wtoupper+0x60>)
 80107b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107b8:	080107dd 	.word	0x080107dd
 80107bc:	080107ef 	.word	0x080107ef
 80107c0:	08010805 	.word	0x08010805
 80107c4:	0801080d 	.word	0x0801080d
 80107c8:	08010815 	.word	0x08010815
 80107cc:	0801081d 	.word	0x0801081d
 80107d0:	08010825 	.word	0x08010825
 80107d4:	0801082d 	.word	0x0801082d
 80107d8:	08010835 	.word	0x08010835
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80107dc:	88fa      	ldrh	r2, [r7, #6]
 80107de:	8a7b      	ldrh	r3, [r7, #18]
 80107e0:	1ad3      	subs	r3, r2, r3
 80107e2:	005b      	lsls	r3, r3, #1
 80107e4:	697a      	ldr	r2, [r7, #20]
 80107e6:	4413      	add	r3, r2
 80107e8:	881b      	ldrh	r3, [r3, #0]
 80107ea:	80fb      	strh	r3, [r7, #6]
 80107ec:	e027      	b.n	801083e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80107ee:	88fa      	ldrh	r2, [r7, #6]
 80107f0:	8a7b      	ldrh	r3, [r7, #18]
 80107f2:	1ad3      	subs	r3, r2, r3
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	f003 0301 	and.w	r3, r3, #1
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	88fa      	ldrh	r2, [r7, #6]
 80107fe:	1ad3      	subs	r3, r2, r3
 8010800:	80fb      	strh	r3, [r7, #6]
 8010802:	e01c      	b.n	801083e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010804:	88fb      	ldrh	r3, [r7, #6]
 8010806:	3b10      	subs	r3, #16
 8010808:	80fb      	strh	r3, [r7, #6]
 801080a:	e018      	b.n	801083e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801080c:	88fb      	ldrh	r3, [r7, #6]
 801080e:	3b20      	subs	r3, #32
 8010810:	80fb      	strh	r3, [r7, #6]
 8010812:	e014      	b.n	801083e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010814:	88fb      	ldrh	r3, [r7, #6]
 8010816:	3b30      	subs	r3, #48	; 0x30
 8010818:	80fb      	strh	r3, [r7, #6]
 801081a:	e010      	b.n	801083e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801081c:	88fb      	ldrh	r3, [r7, #6]
 801081e:	3b1a      	subs	r3, #26
 8010820:	80fb      	strh	r3, [r7, #6]
 8010822:	e00c      	b.n	801083e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010824:	88fb      	ldrh	r3, [r7, #6]
 8010826:	3308      	adds	r3, #8
 8010828:	80fb      	strh	r3, [r7, #6]
 801082a:	e008      	b.n	801083e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801082c:	88fb      	ldrh	r3, [r7, #6]
 801082e:	3b50      	subs	r3, #80	; 0x50
 8010830:	80fb      	strh	r3, [r7, #6]
 8010832:	e004      	b.n	801083e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010834:	88fb      	ldrh	r3, [r7, #6]
 8010836:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801083a:	80fb      	strh	r3, [r7, #6]
 801083c:	bf00      	nop
			}
			break;
 801083e:	e008      	b.n	8010852 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010840:	89fb      	ldrh	r3, [r7, #14]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d195      	bne.n	8010772 <ff_wtoupper+0x1a>
 8010846:	8a3b      	ldrh	r3, [r7, #16]
 8010848:	005b      	lsls	r3, r3, #1
 801084a:	697a      	ldr	r2, [r7, #20]
 801084c:	4413      	add	r3, r2
 801084e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010850:	e78f      	b.n	8010772 <ff_wtoupper+0x1a>
			break;
 8010852:	bf00      	nop
	}

	return chr;
 8010854:	88fb      	ldrh	r3, [r7, #6]
}
 8010856:	4618      	mov	r0, r3
 8010858:	371c      	adds	r7, #28
 801085a:	46bd      	mov	sp, r7
 801085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010860:	4770      	bx	lr
 8010862:	bf00      	nop
 8010864:	08011c74 	.word	0x08011c74
 8010868:	08011e68 	.word	0x08011e68

0801086c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010870:	2201      	movs	r2, #1
 8010872:	490e      	ldr	r1, [pc, #56]	; (80108ac <MX_USB_HOST_Init+0x40>)
 8010874:	480e      	ldr	r0, [pc, #56]	; (80108b0 <MX_USB_HOST_Init+0x44>)
 8010876:	f7fb f8b5 	bl	800b9e4 <USBH_Init>
 801087a:	4603      	mov	r3, r0
 801087c:	2b00      	cmp	r3, #0
 801087e:	d001      	beq.n	8010884 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010880:	f7f1 fb20 	bl	8001ec4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010884:	490b      	ldr	r1, [pc, #44]	; (80108b4 <MX_USB_HOST_Init+0x48>)
 8010886:	480a      	ldr	r0, [pc, #40]	; (80108b0 <MX_USB_HOST_Init+0x44>)
 8010888:	f7fb f93a 	bl	800bb00 <USBH_RegisterClass>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	d001      	beq.n	8010896 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010892:	f7f1 fb17 	bl	8001ec4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010896:	4806      	ldr	r0, [pc, #24]	; (80108b0 <MX_USB_HOST_Init+0x44>)
 8010898:	f7fb f9be 	bl	800bc18 <USBH_Start>
 801089c:	4603      	mov	r3, r0
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d001      	beq.n	80108a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80108a2:	f7f1 fb0f 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80108a6:	bf00      	nop
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	080108cd 	.word	0x080108cd
 80108b0:	20001de4 	.word	0x20001de4
 80108b4:	20000048 	.word	0x20000048

080108b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80108bc:	4802      	ldr	r0, [pc, #8]	; (80108c8 <MX_USB_HOST_Process+0x10>)
 80108be:	f7fb f9bb 	bl	800bc38 <USBH_Process>
}
 80108c2:	bf00      	nop
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	20001de4 	.word	0x20001de4

080108cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	460b      	mov	r3, r1
 80108d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80108d8:	78fb      	ldrb	r3, [r7, #3]
 80108da:	3b01      	subs	r3, #1
 80108dc:	2b04      	cmp	r3, #4
 80108de:	d819      	bhi.n	8010914 <USBH_UserProcess+0x48>
 80108e0:	a201      	add	r2, pc, #4	; (adr r2, 80108e8 <USBH_UserProcess+0x1c>)
 80108e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e6:	bf00      	nop
 80108e8:	08010915 	.word	0x08010915
 80108ec:	08010905 	.word	0x08010905
 80108f0:	08010915 	.word	0x08010915
 80108f4:	0801090d 	.word	0x0801090d
 80108f8:	080108fd 	.word	0x080108fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80108fc:	4b09      	ldr	r3, [pc, #36]	; (8010924 <USBH_UserProcess+0x58>)
 80108fe:	2203      	movs	r2, #3
 8010900:	701a      	strb	r2, [r3, #0]
  break;
 8010902:	e008      	b.n	8010916 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010904:	4b07      	ldr	r3, [pc, #28]	; (8010924 <USBH_UserProcess+0x58>)
 8010906:	2202      	movs	r2, #2
 8010908:	701a      	strb	r2, [r3, #0]
  break;
 801090a:	e004      	b.n	8010916 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801090c:	4b05      	ldr	r3, [pc, #20]	; (8010924 <USBH_UserProcess+0x58>)
 801090e:	2201      	movs	r2, #1
 8010910:	701a      	strb	r2, [r3, #0]
  break;
 8010912:	e000      	b.n	8010916 <USBH_UserProcess+0x4a>

  default:
  break;
 8010914:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010916:	bf00      	nop
 8010918:	370c      	adds	r7, #12
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	200021bc 	.word	0x200021bc

08010928 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b08a      	sub	sp, #40	; 0x28
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010930:	f107 0314 	add.w	r3, r7, #20
 8010934:	2200      	movs	r2, #0
 8010936:	601a      	str	r2, [r3, #0]
 8010938:	605a      	str	r2, [r3, #4]
 801093a:	609a      	str	r2, [r3, #8]
 801093c:	60da      	str	r2, [r3, #12]
 801093e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010948:	d147      	bne.n	80109da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801094a:	2300      	movs	r3, #0
 801094c:	613b      	str	r3, [r7, #16]
 801094e:	4b25      	ldr	r3, [pc, #148]	; (80109e4 <HAL_HCD_MspInit+0xbc>)
 8010950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010952:	4a24      	ldr	r2, [pc, #144]	; (80109e4 <HAL_HCD_MspInit+0xbc>)
 8010954:	f043 0301 	orr.w	r3, r3, #1
 8010958:	6313      	str	r3, [r2, #48]	; 0x30
 801095a:	4b22      	ldr	r3, [pc, #136]	; (80109e4 <HAL_HCD_MspInit+0xbc>)
 801095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801095e:	f003 0301 	and.w	r3, r3, #1
 8010962:	613b      	str	r3, [r7, #16]
 8010964:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010966:	f44f 7300 	mov.w	r3, #512	; 0x200
 801096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801096c:	2300      	movs	r3, #0
 801096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010970:	2300      	movs	r3, #0
 8010972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010974:	f107 0314 	add.w	r3, r7, #20
 8010978:	4619      	mov	r1, r3
 801097a:	481b      	ldr	r0, [pc, #108]	; (80109e8 <HAL_HCD_MspInit+0xc0>)
 801097c:	f7f2 fcd2 	bl	8003324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010980:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010986:	2302      	movs	r3, #2
 8010988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801098a:	2300      	movs	r3, #0
 801098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801098e:	2303      	movs	r3, #3
 8010990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010992:	230a      	movs	r3, #10
 8010994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010996:	f107 0314 	add.w	r3, r7, #20
 801099a:	4619      	mov	r1, r3
 801099c:	4812      	ldr	r0, [pc, #72]	; (80109e8 <HAL_HCD_MspInit+0xc0>)
 801099e:	f7f2 fcc1 	bl	8003324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80109a2:	4b10      	ldr	r3, [pc, #64]	; (80109e4 <HAL_HCD_MspInit+0xbc>)
 80109a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109a6:	4a0f      	ldr	r2, [pc, #60]	; (80109e4 <HAL_HCD_MspInit+0xbc>)
 80109a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109ac:	6353      	str	r3, [r2, #52]	; 0x34
 80109ae:	2300      	movs	r3, #0
 80109b0:	60fb      	str	r3, [r7, #12]
 80109b2:	4b0c      	ldr	r3, [pc, #48]	; (80109e4 <HAL_HCD_MspInit+0xbc>)
 80109b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109b6:	4a0b      	ldr	r2, [pc, #44]	; (80109e4 <HAL_HCD_MspInit+0xbc>)
 80109b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80109bc:	6453      	str	r3, [r2, #68]	; 0x44
 80109be:	4b09      	ldr	r3, [pc, #36]	; (80109e4 <HAL_HCD_MspInit+0xbc>)
 80109c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80109c6:	60fb      	str	r3, [r7, #12]
 80109c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80109ca:	2200      	movs	r2, #0
 80109cc:	2100      	movs	r1, #0
 80109ce:	2043      	movs	r0, #67	; 0x43
 80109d0:	f7f2 f811 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80109d4:	2043      	movs	r0, #67	; 0x43
 80109d6:	f7f2 f82a 	bl	8002a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80109da:	bf00      	nop
 80109dc:	3728      	adds	r7, #40	; 0x28
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	40023800 	.word	0x40023800
 80109e8:	40020000 	.word	0x40020000

080109ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7fb fcfb 	bl	800c3f6 <USBH_LL_IncTimer>
}
 8010a00:	bf00      	nop
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fb fd33 	bl	800c482 <USBH_LL_Connect>
}
 8010a1c:	bf00      	nop
 8010a1e:	3708      	adds	r7, #8
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fb fd3c 	bl	800c4b0 <USBH_LL_Disconnect>
}
 8010a38:	bf00      	nop
 8010a3a:	3708      	adds	r7, #8
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}

08010a40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b083      	sub	sp, #12
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	460b      	mov	r3, r1
 8010a4a:	70fb      	strb	r3, [r7, #3]
 8010a4c:	4613      	mov	r3, r2
 8010a4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010a50:	bf00      	nop
 8010a52:	370c      	adds	r7, #12
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr

08010a5c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7fb fced 	bl	800c44a <USBH_LL_PortEnabled>
}
 8010a70:	bf00      	nop
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fb fced 	bl	800c466 <USBH_LL_PortDisabled>
}
 8010a8c:	bf00      	nop
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d12a      	bne.n	8010afc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010aa6:	4a18      	ldr	r2, [pc, #96]	; (8010b08 <USBH_LL_Init+0x74>)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	4a15      	ldr	r2, [pc, #84]	; (8010b08 <USBH_LL_Init+0x74>)
 8010ab2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010ab6:	4b14      	ldr	r3, [pc, #80]	; (8010b08 <USBH_LL_Init+0x74>)
 8010ab8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010abc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010abe:	4b12      	ldr	r3, [pc, #72]	; (8010b08 <USBH_LL_Init+0x74>)
 8010ac0:	2208      	movs	r2, #8
 8010ac2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010ac4:	4b10      	ldr	r3, [pc, #64]	; (8010b08 <USBH_LL_Init+0x74>)
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010aca:	4b0f      	ldr	r3, [pc, #60]	; (8010b08 <USBH_LL_Init+0x74>)
 8010acc:	2200      	movs	r2, #0
 8010ace:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010ad0:	4b0d      	ldr	r3, [pc, #52]	; (8010b08 <USBH_LL_Init+0x74>)
 8010ad2:	2202      	movs	r2, #2
 8010ad4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010ad6:	4b0c      	ldr	r3, [pc, #48]	; (8010b08 <USBH_LL_Init+0x74>)
 8010ad8:	2200      	movs	r2, #0
 8010ada:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010adc:	480a      	ldr	r0, [pc, #40]	; (8010b08 <USBH_LL_Init+0x74>)
 8010ade:	f7f2 fee0 	bl	80038a2 <HAL_HCD_Init>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d001      	beq.n	8010aec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010ae8:	f7f1 f9ec 	bl	8001ec4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010aec:	4806      	ldr	r0, [pc, #24]	; (8010b08 <USBH_LL_Init+0x74>)
 8010aee:	f7f3 fac4 	bl	800407a <HAL_HCD_GetCurrentFrame>
 8010af2:	4603      	mov	r3, r0
 8010af4:	4619      	mov	r1, r3
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f7fb fc6e 	bl	800c3d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010afc:	2300      	movs	r3, #0
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop
 8010b08:	200021c0 	.word	0x200021c0

08010b0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b084      	sub	sp, #16
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b14:	2300      	movs	r3, #0
 8010b16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7f3 fa33 	bl	8003f8e <HAL_HCD_Start>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b2c:	7bfb      	ldrb	r3, [r7, #15]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f000 f98c 	bl	8010e4c <USBH_Get_USB_Status>
 8010b34:	4603      	mov	r3, r0
 8010b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3710      	adds	r7, #16
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b084      	sub	sp, #16
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7f3 fa3b 	bl	8003fd4 <HAL_HCD_Stop>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b62:	7bfb      	ldrb	r3, [r7, #15]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f000 f971 	bl	8010e4c <USBH_Get_USB_Status>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3710      	adds	r7, #16
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010b80:	2301      	movs	r3, #1
 8010b82:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7f3 fa83 	bl	8004096 <HAL_HCD_GetCurrentSpeed>
 8010b90:	4603      	mov	r3, r0
 8010b92:	2b02      	cmp	r3, #2
 8010b94:	d00c      	beq.n	8010bb0 <USBH_LL_GetSpeed+0x38>
 8010b96:	2b02      	cmp	r3, #2
 8010b98:	d80d      	bhi.n	8010bb6 <USBH_LL_GetSpeed+0x3e>
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d002      	beq.n	8010ba4 <USBH_LL_GetSpeed+0x2c>
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d003      	beq.n	8010baa <USBH_LL_GetSpeed+0x32>
 8010ba2:	e008      	b.n	8010bb6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ba8:	e008      	b.n	8010bbc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010baa:	2301      	movs	r3, #1
 8010bac:	73fb      	strb	r3, [r7, #15]
    break;
 8010bae:	e005      	b.n	8010bbc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010bb0:	2302      	movs	r3, #2
 8010bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8010bb4:	e002      	b.n	8010bbc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8010bba:	bf00      	nop
  }
  return  speed;
 8010bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3710      	adds	r7, #16
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b084      	sub	sp, #16
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7f3 fa16 	bl	800400e <HAL_HCD_ResetPort>
 8010be2:	4603      	mov	r3, r0
 8010be4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010be6:	7bfb      	ldrb	r3, [r7, #15]
 8010be8:	4618      	mov	r0, r3
 8010bea:	f000 f92f 	bl	8010e4c <USBH_Get_USB_Status>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3710      	adds	r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	460b      	mov	r3, r1
 8010c06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c0e:	78fa      	ldrb	r2, [r7, #3]
 8010c10:	4611      	mov	r1, r2
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7f3 fa1d 	bl	8004052 <HAL_HCD_HC_GetXferCount>
 8010c18:	4603      	mov	r3, r0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010c22:	b590      	push	{r4, r7, lr}
 8010c24:	b089      	sub	sp, #36	; 0x24
 8010c26:	af04      	add	r7, sp, #16
 8010c28:	6078      	str	r0, [r7, #4]
 8010c2a:	4608      	mov	r0, r1
 8010c2c:	4611      	mov	r1, r2
 8010c2e:	461a      	mov	r2, r3
 8010c30:	4603      	mov	r3, r0
 8010c32:	70fb      	strb	r3, [r7, #3]
 8010c34:	460b      	mov	r3, r1
 8010c36:	70bb      	strb	r3, [r7, #2]
 8010c38:	4613      	mov	r3, r2
 8010c3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c40:	2300      	movs	r3, #0
 8010c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010c4a:	787c      	ldrb	r4, [r7, #1]
 8010c4c:	78ba      	ldrb	r2, [r7, #2]
 8010c4e:	78f9      	ldrb	r1, [r7, #3]
 8010c50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010c52:	9302      	str	r3, [sp, #8]
 8010c54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010c58:	9301      	str	r3, [sp, #4]
 8010c5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	4623      	mov	r3, r4
 8010c62:	f7f2 fe80 	bl	8003966 <HAL_HCD_HC_Init>
 8010c66:	4603      	mov	r3, r0
 8010c68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c6a:	7bfb      	ldrb	r3, [r7, #15]
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f000 f8ed 	bl	8010e4c <USBH_Get_USB_Status>
 8010c72:	4603      	mov	r3, r0
 8010c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3714      	adds	r7, #20
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd90      	pop	{r4, r7, pc}

08010c80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b084      	sub	sp, #16
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	460b      	mov	r3, r1
 8010c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c90:	2300      	movs	r3, #0
 8010c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c9a:	78fa      	ldrb	r2, [r7, #3]
 8010c9c:	4611      	mov	r1, r2
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7f2 fef0 	bl	8003a84 <HAL_HCD_HC_Halt>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010ca8:	7bfb      	ldrb	r3, [r7, #15]
 8010caa:	4618      	mov	r0, r3
 8010cac:	f000 f8ce 	bl	8010e4c <USBH_Get_USB_Status>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3710      	adds	r7, #16
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010cbe:	b590      	push	{r4, r7, lr}
 8010cc0:	b089      	sub	sp, #36	; 0x24
 8010cc2:	af04      	add	r7, sp, #16
 8010cc4:	6078      	str	r0, [r7, #4]
 8010cc6:	4608      	mov	r0, r1
 8010cc8:	4611      	mov	r1, r2
 8010cca:	461a      	mov	r2, r3
 8010ccc:	4603      	mov	r3, r0
 8010cce:	70fb      	strb	r3, [r7, #3]
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	70bb      	strb	r3, [r7, #2]
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010ce6:	787c      	ldrb	r4, [r7, #1]
 8010ce8:	78ba      	ldrb	r2, [r7, #2]
 8010cea:	78f9      	ldrb	r1, [r7, #3]
 8010cec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010cf0:	9303      	str	r3, [sp, #12]
 8010cf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010cf4:	9302      	str	r3, [sp, #8]
 8010cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf8:	9301      	str	r3, [sp, #4]
 8010cfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010cfe:	9300      	str	r3, [sp, #0]
 8010d00:	4623      	mov	r3, r4
 8010d02:	f7f2 fee3 	bl	8003acc <HAL_HCD_HC_SubmitRequest>
 8010d06:	4603      	mov	r3, r0
 8010d08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010d0a:	7bfb      	ldrb	r3, [r7, #15]
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f000 f89d 	bl	8010e4c <USBH_Get_USB_Status>
 8010d12:	4603      	mov	r3, r0
 8010d14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3714      	adds	r7, #20
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd90      	pop	{r4, r7, pc}

08010d20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	460b      	mov	r3, r1
 8010d2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d32:	78fa      	ldrb	r2, [r7, #3]
 8010d34:	4611      	mov	r1, r2
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7f3 f977 	bl	800402a <HAL_HCD_HC_GetURBState>
 8010d3c:	4603      	mov	r3, r0
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3708      	adds	r7, #8
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}

08010d46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010d46:	b580      	push	{r7, lr}
 8010d48:	b082      	sub	sp, #8
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	6078      	str	r0, [r7, #4]
 8010d4e:	460b      	mov	r3, r1
 8010d50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d103      	bne.n	8010d64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010d5c:	78fb      	ldrb	r3, [r7, #3]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f000 f8a0 	bl	8010ea4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010d64:	20c8      	movs	r0, #200	; 0xc8
 8010d66:	f7f1 fd47 	bl	80027f8 <HAL_Delay>
  return USBH_OK;
 8010d6a:	2300      	movs	r3, #0
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3708      	adds	r7, #8
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b085      	sub	sp, #20
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	70fb      	strb	r3, [r7, #3]
 8010d80:	4613      	mov	r3, r2
 8010d82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010d8c:	78fb      	ldrb	r3, [r7, #3]
 8010d8e:	68fa      	ldr	r2, [r7, #12]
 8010d90:	212c      	movs	r1, #44	; 0x2c
 8010d92:	fb01 f303 	mul.w	r3, r1, r3
 8010d96:	4413      	add	r3, r2
 8010d98:	333b      	adds	r3, #59	; 0x3b
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d009      	beq.n	8010db4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010da0:	78fb      	ldrb	r3, [r7, #3]
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	212c      	movs	r1, #44	; 0x2c
 8010da6:	fb01 f303 	mul.w	r3, r1, r3
 8010daa:	4413      	add	r3, r2
 8010dac:	3354      	adds	r3, #84	; 0x54
 8010dae:	78ba      	ldrb	r2, [r7, #2]
 8010db0:	701a      	strb	r2, [r3, #0]
 8010db2:	e008      	b.n	8010dc6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010db4:	78fb      	ldrb	r3, [r7, #3]
 8010db6:	68fa      	ldr	r2, [r7, #12]
 8010db8:	212c      	movs	r1, #44	; 0x2c
 8010dba:	fb01 f303 	mul.w	r3, r1, r3
 8010dbe:	4413      	add	r3, r2
 8010dc0:	3355      	adds	r3, #85	; 0x55
 8010dc2:	78ba      	ldrb	r2, [r7, #2]
 8010dc4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010dc6:	2300      	movs	r3, #0
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3714      	adds	r7, #20
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd2:	4770      	bx	lr

08010dd4 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b085      	sub	sp, #20
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	460b      	mov	r3, r1
 8010dde:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010de0:	2300      	movs	r3, #0
 8010de2:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010dea:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010dec:	78fb      	ldrb	r3, [r7, #3]
 8010dee:	68ba      	ldr	r2, [r7, #8]
 8010df0:	212c      	movs	r1, #44	; 0x2c
 8010df2:	fb01 f303 	mul.w	r3, r1, r3
 8010df6:	4413      	add	r3, r2
 8010df8:	333b      	adds	r3, #59	; 0x3b
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d009      	beq.n	8010e14 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010e00:	78fb      	ldrb	r3, [r7, #3]
 8010e02:	68ba      	ldr	r2, [r7, #8]
 8010e04:	212c      	movs	r1, #44	; 0x2c
 8010e06:	fb01 f303 	mul.w	r3, r1, r3
 8010e0a:	4413      	add	r3, r2
 8010e0c:	3354      	adds	r3, #84	; 0x54
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	73fb      	strb	r3, [r7, #15]
 8010e12:	e008      	b.n	8010e26 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010e14:	78fb      	ldrb	r3, [r7, #3]
 8010e16:	68ba      	ldr	r2, [r7, #8]
 8010e18:	212c      	movs	r1, #44	; 0x2c
 8010e1a:	fb01 f303 	mul.w	r3, r1, r3
 8010e1e:	4413      	add	r3, r2
 8010e20:	3355      	adds	r3, #85	; 0x55
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3714      	adds	r7, #20
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f7f1 fcdb 	bl	80027f8 <HAL_Delay>
}
 8010e42:	bf00      	nop
 8010e44:	3708      	adds	r7, #8
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
	...

08010e4c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e4c:	b480      	push	{r7}
 8010e4e:	b085      	sub	sp, #20
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	4603      	mov	r3, r0
 8010e54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e56:	2300      	movs	r3, #0
 8010e58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e5a:	79fb      	ldrb	r3, [r7, #7]
 8010e5c:	2b03      	cmp	r3, #3
 8010e5e:	d817      	bhi.n	8010e90 <USBH_Get_USB_Status+0x44>
 8010e60:	a201      	add	r2, pc, #4	; (adr r2, 8010e68 <USBH_Get_USB_Status+0x1c>)
 8010e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e66:	bf00      	nop
 8010e68:	08010e79 	.word	0x08010e79
 8010e6c:	08010e7f 	.word	0x08010e7f
 8010e70:	08010e85 	.word	0x08010e85
 8010e74:	08010e8b 	.word	0x08010e8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e7c:	e00b      	b.n	8010e96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010e7e:	2302      	movs	r3, #2
 8010e80:	73fb      	strb	r3, [r7, #15]
    break;
 8010e82:	e008      	b.n	8010e96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010e84:	2301      	movs	r3, #1
 8010e86:	73fb      	strb	r3, [r7, #15]
    break;
 8010e88:	e005      	b.n	8010e96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010e8a:	2302      	movs	r3, #2
 8010e8c:	73fb      	strb	r3, [r7, #15]
    break;
 8010e8e:	e002      	b.n	8010e96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010e90:	2302      	movs	r3, #2
 8010e92:	73fb      	strb	r3, [r7, #15]
    break;
 8010e94:	bf00      	nop
  }
  return usb_status;
 8010e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3714      	adds	r7, #20
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b084      	sub	sp, #16
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	4603      	mov	r3, r0
 8010eac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010eae:	79fb      	ldrb	r3, [r7, #7]
 8010eb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010eb2:	79fb      	ldrb	r3, [r7, #7]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d102      	bne.n	8010ebe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010eb8:	2301      	movs	r3, #1
 8010eba:	73fb      	strb	r3, [r7, #15]
 8010ebc:	e001      	b.n	8010ec2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010ec2:	7bfb      	ldrb	r3, [r7, #15]
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	2101      	movs	r1, #1
 8010ec8:	4803      	ldr	r0, [pc, #12]	; (8010ed8 <MX_DriverVbusFS+0x34>)
 8010eca:	f7f2 fc93 	bl	80037f4 <HAL_GPIO_WritePin>
}
 8010ece:	bf00      	nop
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	40020800 	.word	0x40020800

08010edc <malloc>:
 8010edc:	4b02      	ldr	r3, [pc, #8]	; (8010ee8 <malloc+0xc>)
 8010ede:	4601      	mov	r1, r0
 8010ee0:	6818      	ldr	r0, [r3, #0]
 8010ee2:	f000 b82b 	b.w	8010f3c <_malloc_r>
 8010ee6:	bf00      	nop
 8010ee8:	200000b4 	.word	0x200000b4

08010eec <free>:
 8010eec:	4b02      	ldr	r3, [pc, #8]	; (8010ef8 <free+0xc>)
 8010eee:	4601      	mov	r1, r0
 8010ef0:	6818      	ldr	r0, [r3, #0]
 8010ef2:	f000 b959 	b.w	80111a8 <_free_r>
 8010ef6:	bf00      	nop
 8010ef8:	200000b4 	.word	0x200000b4

08010efc <sbrk_aligned>:
 8010efc:	b570      	push	{r4, r5, r6, lr}
 8010efe:	4e0e      	ldr	r6, [pc, #56]	; (8010f38 <sbrk_aligned+0x3c>)
 8010f00:	460c      	mov	r4, r1
 8010f02:	6831      	ldr	r1, [r6, #0]
 8010f04:	4605      	mov	r5, r0
 8010f06:	b911      	cbnz	r1, 8010f0e <sbrk_aligned+0x12>
 8010f08:	f000 f904 	bl	8011114 <_sbrk_r>
 8010f0c:	6030      	str	r0, [r6, #0]
 8010f0e:	4621      	mov	r1, r4
 8010f10:	4628      	mov	r0, r5
 8010f12:	f000 f8ff 	bl	8011114 <_sbrk_r>
 8010f16:	1c43      	adds	r3, r0, #1
 8010f18:	d00a      	beq.n	8010f30 <sbrk_aligned+0x34>
 8010f1a:	1cc4      	adds	r4, r0, #3
 8010f1c:	f024 0403 	bic.w	r4, r4, #3
 8010f20:	42a0      	cmp	r0, r4
 8010f22:	d007      	beq.n	8010f34 <sbrk_aligned+0x38>
 8010f24:	1a21      	subs	r1, r4, r0
 8010f26:	4628      	mov	r0, r5
 8010f28:	f000 f8f4 	bl	8011114 <_sbrk_r>
 8010f2c:	3001      	adds	r0, #1
 8010f2e:	d101      	bne.n	8010f34 <sbrk_aligned+0x38>
 8010f30:	f04f 34ff 	mov.w	r4, #4294967295
 8010f34:	4620      	mov	r0, r4
 8010f36:	bd70      	pop	{r4, r5, r6, pc}
 8010f38:	200024c8 	.word	0x200024c8

08010f3c <_malloc_r>:
 8010f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f40:	1ccd      	adds	r5, r1, #3
 8010f42:	f025 0503 	bic.w	r5, r5, #3
 8010f46:	3508      	adds	r5, #8
 8010f48:	2d0c      	cmp	r5, #12
 8010f4a:	bf38      	it	cc
 8010f4c:	250c      	movcc	r5, #12
 8010f4e:	2d00      	cmp	r5, #0
 8010f50:	4607      	mov	r7, r0
 8010f52:	db01      	blt.n	8010f58 <_malloc_r+0x1c>
 8010f54:	42a9      	cmp	r1, r5
 8010f56:	d905      	bls.n	8010f64 <_malloc_r+0x28>
 8010f58:	230c      	movs	r3, #12
 8010f5a:	603b      	str	r3, [r7, #0]
 8010f5c:	2600      	movs	r6, #0
 8010f5e:	4630      	mov	r0, r6
 8010f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011038 <_malloc_r+0xfc>
 8010f68:	f000 f868 	bl	801103c <__malloc_lock>
 8010f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8010f70:	461c      	mov	r4, r3
 8010f72:	bb5c      	cbnz	r4, 8010fcc <_malloc_r+0x90>
 8010f74:	4629      	mov	r1, r5
 8010f76:	4638      	mov	r0, r7
 8010f78:	f7ff ffc0 	bl	8010efc <sbrk_aligned>
 8010f7c:	1c43      	adds	r3, r0, #1
 8010f7e:	4604      	mov	r4, r0
 8010f80:	d155      	bne.n	801102e <_malloc_r+0xf2>
 8010f82:	f8d8 4000 	ldr.w	r4, [r8]
 8010f86:	4626      	mov	r6, r4
 8010f88:	2e00      	cmp	r6, #0
 8010f8a:	d145      	bne.n	8011018 <_malloc_r+0xdc>
 8010f8c:	2c00      	cmp	r4, #0
 8010f8e:	d048      	beq.n	8011022 <_malloc_r+0xe6>
 8010f90:	6823      	ldr	r3, [r4, #0]
 8010f92:	4631      	mov	r1, r6
 8010f94:	4638      	mov	r0, r7
 8010f96:	eb04 0903 	add.w	r9, r4, r3
 8010f9a:	f000 f8bb 	bl	8011114 <_sbrk_r>
 8010f9e:	4581      	cmp	r9, r0
 8010fa0:	d13f      	bne.n	8011022 <_malloc_r+0xe6>
 8010fa2:	6821      	ldr	r1, [r4, #0]
 8010fa4:	1a6d      	subs	r5, r5, r1
 8010fa6:	4629      	mov	r1, r5
 8010fa8:	4638      	mov	r0, r7
 8010faa:	f7ff ffa7 	bl	8010efc <sbrk_aligned>
 8010fae:	3001      	adds	r0, #1
 8010fb0:	d037      	beq.n	8011022 <_malloc_r+0xe6>
 8010fb2:	6823      	ldr	r3, [r4, #0]
 8010fb4:	442b      	add	r3, r5
 8010fb6:	6023      	str	r3, [r4, #0]
 8010fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d038      	beq.n	8011032 <_malloc_r+0xf6>
 8010fc0:	685a      	ldr	r2, [r3, #4]
 8010fc2:	42a2      	cmp	r2, r4
 8010fc4:	d12b      	bne.n	801101e <_malloc_r+0xe2>
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	605a      	str	r2, [r3, #4]
 8010fca:	e00f      	b.n	8010fec <_malloc_r+0xb0>
 8010fcc:	6822      	ldr	r2, [r4, #0]
 8010fce:	1b52      	subs	r2, r2, r5
 8010fd0:	d41f      	bmi.n	8011012 <_malloc_r+0xd6>
 8010fd2:	2a0b      	cmp	r2, #11
 8010fd4:	d917      	bls.n	8011006 <_malloc_r+0xca>
 8010fd6:	1961      	adds	r1, r4, r5
 8010fd8:	42a3      	cmp	r3, r4
 8010fda:	6025      	str	r5, [r4, #0]
 8010fdc:	bf18      	it	ne
 8010fde:	6059      	strne	r1, [r3, #4]
 8010fe0:	6863      	ldr	r3, [r4, #4]
 8010fe2:	bf08      	it	eq
 8010fe4:	f8c8 1000 	streq.w	r1, [r8]
 8010fe8:	5162      	str	r2, [r4, r5]
 8010fea:	604b      	str	r3, [r1, #4]
 8010fec:	4638      	mov	r0, r7
 8010fee:	f104 060b 	add.w	r6, r4, #11
 8010ff2:	f000 f829 	bl	8011048 <__malloc_unlock>
 8010ff6:	f026 0607 	bic.w	r6, r6, #7
 8010ffa:	1d23      	adds	r3, r4, #4
 8010ffc:	1af2      	subs	r2, r6, r3
 8010ffe:	d0ae      	beq.n	8010f5e <_malloc_r+0x22>
 8011000:	1b9b      	subs	r3, r3, r6
 8011002:	50a3      	str	r3, [r4, r2]
 8011004:	e7ab      	b.n	8010f5e <_malloc_r+0x22>
 8011006:	42a3      	cmp	r3, r4
 8011008:	6862      	ldr	r2, [r4, #4]
 801100a:	d1dd      	bne.n	8010fc8 <_malloc_r+0x8c>
 801100c:	f8c8 2000 	str.w	r2, [r8]
 8011010:	e7ec      	b.n	8010fec <_malloc_r+0xb0>
 8011012:	4623      	mov	r3, r4
 8011014:	6864      	ldr	r4, [r4, #4]
 8011016:	e7ac      	b.n	8010f72 <_malloc_r+0x36>
 8011018:	4634      	mov	r4, r6
 801101a:	6876      	ldr	r6, [r6, #4]
 801101c:	e7b4      	b.n	8010f88 <_malloc_r+0x4c>
 801101e:	4613      	mov	r3, r2
 8011020:	e7cc      	b.n	8010fbc <_malloc_r+0x80>
 8011022:	230c      	movs	r3, #12
 8011024:	603b      	str	r3, [r7, #0]
 8011026:	4638      	mov	r0, r7
 8011028:	f000 f80e 	bl	8011048 <__malloc_unlock>
 801102c:	e797      	b.n	8010f5e <_malloc_r+0x22>
 801102e:	6025      	str	r5, [r4, #0]
 8011030:	e7dc      	b.n	8010fec <_malloc_r+0xb0>
 8011032:	605b      	str	r3, [r3, #4]
 8011034:	deff      	udf	#255	; 0xff
 8011036:	bf00      	nop
 8011038:	200024c4 	.word	0x200024c4

0801103c <__malloc_lock>:
 801103c:	4801      	ldr	r0, [pc, #4]	; (8011044 <__malloc_lock+0x8>)
 801103e:	f000 b8a3 	b.w	8011188 <__retarget_lock_acquire_recursive>
 8011042:	bf00      	nop
 8011044:	20002608 	.word	0x20002608

08011048 <__malloc_unlock>:
 8011048:	4801      	ldr	r0, [pc, #4]	; (8011050 <__malloc_unlock+0x8>)
 801104a:	f000 b89e 	b.w	801118a <__retarget_lock_release_recursive>
 801104e:	bf00      	nop
 8011050:	20002608 	.word	0x20002608

08011054 <siprintf>:
 8011054:	b40e      	push	{r1, r2, r3}
 8011056:	b500      	push	{lr}
 8011058:	b09c      	sub	sp, #112	; 0x70
 801105a:	ab1d      	add	r3, sp, #116	; 0x74
 801105c:	9002      	str	r0, [sp, #8]
 801105e:	9006      	str	r0, [sp, #24]
 8011060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011064:	4809      	ldr	r0, [pc, #36]	; (801108c <siprintf+0x38>)
 8011066:	9107      	str	r1, [sp, #28]
 8011068:	9104      	str	r1, [sp, #16]
 801106a:	4909      	ldr	r1, [pc, #36]	; (8011090 <siprintf+0x3c>)
 801106c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011070:	9105      	str	r1, [sp, #20]
 8011072:	6800      	ldr	r0, [r0, #0]
 8011074:	9301      	str	r3, [sp, #4]
 8011076:	a902      	add	r1, sp, #8
 8011078:	f000 f93c 	bl	80112f4 <_svfiprintf_r>
 801107c:	9b02      	ldr	r3, [sp, #8]
 801107e:	2200      	movs	r2, #0
 8011080:	701a      	strb	r2, [r3, #0]
 8011082:	b01c      	add	sp, #112	; 0x70
 8011084:	f85d eb04 	ldr.w	lr, [sp], #4
 8011088:	b003      	add	sp, #12
 801108a:	4770      	bx	lr
 801108c:	200000b4 	.word	0x200000b4
 8011090:	ffff0208 	.word	0xffff0208

08011094 <memset>:
 8011094:	4402      	add	r2, r0
 8011096:	4603      	mov	r3, r0
 8011098:	4293      	cmp	r3, r2
 801109a:	d100      	bne.n	801109e <memset+0xa>
 801109c:	4770      	bx	lr
 801109e:	f803 1b01 	strb.w	r1, [r3], #1
 80110a2:	e7f9      	b.n	8011098 <memset+0x4>

080110a4 <strcat>:
 80110a4:	b510      	push	{r4, lr}
 80110a6:	4602      	mov	r2, r0
 80110a8:	7814      	ldrb	r4, [r2, #0]
 80110aa:	4613      	mov	r3, r2
 80110ac:	3201      	adds	r2, #1
 80110ae:	2c00      	cmp	r4, #0
 80110b0:	d1fa      	bne.n	80110a8 <strcat+0x4>
 80110b2:	3b01      	subs	r3, #1
 80110b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110bc:	2a00      	cmp	r2, #0
 80110be:	d1f9      	bne.n	80110b4 <strcat+0x10>
 80110c0:	bd10      	pop	{r4, pc}

080110c2 <strncpy>:
 80110c2:	b510      	push	{r4, lr}
 80110c4:	3901      	subs	r1, #1
 80110c6:	4603      	mov	r3, r0
 80110c8:	b132      	cbz	r2, 80110d8 <strncpy+0x16>
 80110ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80110ce:	f803 4b01 	strb.w	r4, [r3], #1
 80110d2:	3a01      	subs	r2, #1
 80110d4:	2c00      	cmp	r4, #0
 80110d6:	d1f7      	bne.n	80110c8 <strncpy+0x6>
 80110d8:	441a      	add	r2, r3
 80110da:	2100      	movs	r1, #0
 80110dc:	4293      	cmp	r3, r2
 80110de:	d100      	bne.n	80110e2 <strncpy+0x20>
 80110e0:	bd10      	pop	{r4, pc}
 80110e2:	f803 1b01 	strb.w	r1, [r3], #1
 80110e6:	e7f9      	b.n	80110dc <strncpy+0x1a>

080110e8 <strstr>:
 80110e8:	780a      	ldrb	r2, [r1, #0]
 80110ea:	b570      	push	{r4, r5, r6, lr}
 80110ec:	b96a      	cbnz	r2, 801110a <strstr+0x22>
 80110ee:	bd70      	pop	{r4, r5, r6, pc}
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d109      	bne.n	8011108 <strstr+0x20>
 80110f4:	460c      	mov	r4, r1
 80110f6:	4605      	mov	r5, r0
 80110f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d0f6      	beq.n	80110ee <strstr+0x6>
 8011100:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011104:	429e      	cmp	r6, r3
 8011106:	d0f7      	beq.n	80110f8 <strstr+0x10>
 8011108:	3001      	adds	r0, #1
 801110a:	7803      	ldrb	r3, [r0, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d1ef      	bne.n	80110f0 <strstr+0x8>
 8011110:	4618      	mov	r0, r3
 8011112:	e7ec      	b.n	80110ee <strstr+0x6>

08011114 <_sbrk_r>:
 8011114:	b538      	push	{r3, r4, r5, lr}
 8011116:	4d06      	ldr	r5, [pc, #24]	; (8011130 <_sbrk_r+0x1c>)
 8011118:	2300      	movs	r3, #0
 801111a:	4604      	mov	r4, r0
 801111c:	4608      	mov	r0, r1
 801111e:	602b      	str	r3, [r5, #0]
 8011120:	f7f1 f8cc 	bl	80022bc <_sbrk>
 8011124:	1c43      	adds	r3, r0, #1
 8011126:	d102      	bne.n	801112e <_sbrk_r+0x1a>
 8011128:	682b      	ldr	r3, [r5, #0]
 801112a:	b103      	cbz	r3, 801112e <_sbrk_r+0x1a>
 801112c:	6023      	str	r3, [r4, #0]
 801112e:	bd38      	pop	{r3, r4, r5, pc}
 8011130:	20002604 	.word	0x20002604

08011134 <__errno>:
 8011134:	4b01      	ldr	r3, [pc, #4]	; (801113c <__errno+0x8>)
 8011136:	6818      	ldr	r0, [r3, #0]
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop
 801113c:	200000b4 	.word	0x200000b4

08011140 <__libc_init_array>:
 8011140:	b570      	push	{r4, r5, r6, lr}
 8011142:	4d0d      	ldr	r5, [pc, #52]	; (8011178 <__libc_init_array+0x38>)
 8011144:	4c0d      	ldr	r4, [pc, #52]	; (801117c <__libc_init_array+0x3c>)
 8011146:	1b64      	subs	r4, r4, r5
 8011148:	10a4      	asrs	r4, r4, #2
 801114a:	2600      	movs	r6, #0
 801114c:	42a6      	cmp	r6, r4
 801114e:	d109      	bne.n	8011164 <__libc_init_array+0x24>
 8011150:	4d0b      	ldr	r5, [pc, #44]	; (8011180 <__libc_init_array+0x40>)
 8011152:	4c0c      	ldr	r4, [pc, #48]	; (8011184 <__libc_init_array+0x44>)
 8011154:	f000 fbae 	bl	80118b4 <_init>
 8011158:	1b64      	subs	r4, r4, r5
 801115a:	10a4      	asrs	r4, r4, #2
 801115c:	2600      	movs	r6, #0
 801115e:	42a6      	cmp	r6, r4
 8011160:	d105      	bne.n	801116e <__libc_init_array+0x2e>
 8011162:	bd70      	pop	{r4, r5, r6, pc}
 8011164:	f855 3b04 	ldr.w	r3, [r5], #4
 8011168:	4798      	blx	r3
 801116a:	3601      	adds	r6, #1
 801116c:	e7ee      	b.n	801114c <__libc_init_array+0xc>
 801116e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011172:	4798      	blx	r3
 8011174:	3601      	adds	r6, #1
 8011176:	e7f2      	b.n	801115e <__libc_init_array+0x1e>
 8011178:	08011f60 	.word	0x08011f60
 801117c:	08011f60 	.word	0x08011f60
 8011180:	08011f60 	.word	0x08011f60
 8011184:	08011f64 	.word	0x08011f64

08011188 <__retarget_lock_acquire_recursive>:
 8011188:	4770      	bx	lr

0801118a <__retarget_lock_release_recursive>:
 801118a:	4770      	bx	lr

0801118c <memcpy>:
 801118c:	440a      	add	r2, r1
 801118e:	4291      	cmp	r1, r2
 8011190:	f100 33ff 	add.w	r3, r0, #4294967295
 8011194:	d100      	bne.n	8011198 <memcpy+0xc>
 8011196:	4770      	bx	lr
 8011198:	b510      	push	{r4, lr}
 801119a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801119e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111a2:	4291      	cmp	r1, r2
 80111a4:	d1f9      	bne.n	801119a <memcpy+0xe>
 80111a6:	bd10      	pop	{r4, pc}

080111a8 <_free_r>:
 80111a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111aa:	2900      	cmp	r1, #0
 80111ac:	d044      	beq.n	8011238 <_free_r+0x90>
 80111ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111b2:	9001      	str	r0, [sp, #4]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	f1a1 0404 	sub.w	r4, r1, #4
 80111ba:	bfb8      	it	lt
 80111bc:	18e4      	addlt	r4, r4, r3
 80111be:	f7ff ff3d 	bl	801103c <__malloc_lock>
 80111c2:	4a1e      	ldr	r2, [pc, #120]	; (801123c <_free_r+0x94>)
 80111c4:	9801      	ldr	r0, [sp, #4]
 80111c6:	6813      	ldr	r3, [r2, #0]
 80111c8:	b933      	cbnz	r3, 80111d8 <_free_r+0x30>
 80111ca:	6063      	str	r3, [r4, #4]
 80111cc:	6014      	str	r4, [r2, #0]
 80111ce:	b003      	add	sp, #12
 80111d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111d4:	f7ff bf38 	b.w	8011048 <__malloc_unlock>
 80111d8:	42a3      	cmp	r3, r4
 80111da:	d908      	bls.n	80111ee <_free_r+0x46>
 80111dc:	6825      	ldr	r5, [r4, #0]
 80111de:	1961      	adds	r1, r4, r5
 80111e0:	428b      	cmp	r3, r1
 80111e2:	bf01      	itttt	eq
 80111e4:	6819      	ldreq	r1, [r3, #0]
 80111e6:	685b      	ldreq	r3, [r3, #4]
 80111e8:	1949      	addeq	r1, r1, r5
 80111ea:	6021      	streq	r1, [r4, #0]
 80111ec:	e7ed      	b.n	80111ca <_free_r+0x22>
 80111ee:	461a      	mov	r2, r3
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	b10b      	cbz	r3, 80111f8 <_free_r+0x50>
 80111f4:	42a3      	cmp	r3, r4
 80111f6:	d9fa      	bls.n	80111ee <_free_r+0x46>
 80111f8:	6811      	ldr	r1, [r2, #0]
 80111fa:	1855      	adds	r5, r2, r1
 80111fc:	42a5      	cmp	r5, r4
 80111fe:	d10b      	bne.n	8011218 <_free_r+0x70>
 8011200:	6824      	ldr	r4, [r4, #0]
 8011202:	4421      	add	r1, r4
 8011204:	1854      	adds	r4, r2, r1
 8011206:	42a3      	cmp	r3, r4
 8011208:	6011      	str	r1, [r2, #0]
 801120a:	d1e0      	bne.n	80111ce <_free_r+0x26>
 801120c:	681c      	ldr	r4, [r3, #0]
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	6053      	str	r3, [r2, #4]
 8011212:	440c      	add	r4, r1
 8011214:	6014      	str	r4, [r2, #0]
 8011216:	e7da      	b.n	80111ce <_free_r+0x26>
 8011218:	d902      	bls.n	8011220 <_free_r+0x78>
 801121a:	230c      	movs	r3, #12
 801121c:	6003      	str	r3, [r0, #0]
 801121e:	e7d6      	b.n	80111ce <_free_r+0x26>
 8011220:	6825      	ldr	r5, [r4, #0]
 8011222:	1961      	adds	r1, r4, r5
 8011224:	428b      	cmp	r3, r1
 8011226:	bf04      	itt	eq
 8011228:	6819      	ldreq	r1, [r3, #0]
 801122a:	685b      	ldreq	r3, [r3, #4]
 801122c:	6063      	str	r3, [r4, #4]
 801122e:	bf04      	itt	eq
 8011230:	1949      	addeq	r1, r1, r5
 8011232:	6021      	streq	r1, [r4, #0]
 8011234:	6054      	str	r4, [r2, #4]
 8011236:	e7ca      	b.n	80111ce <_free_r+0x26>
 8011238:	b003      	add	sp, #12
 801123a:	bd30      	pop	{r4, r5, pc}
 801123c:	200024c4 	.word	0x200024c4

08011240 <__ssputs_r>:
 8011240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011244:	688e      	ldr	r6, [r1, #8]
 8011246:	461f      	mov	r7, r3
 8011248:	42be      	cmp	r6, r7
 801124a:	680b      	ldr	r3, [r1, #0]
 801124c:	4682      	mov	sl, r0
 801124e:	460c      	mov	r4, r1
 8011250:	4690      	mov	r8, r2
 8011252:	d82c      	bhi.n	80112ae <__ssputs_r+0x6e>
 8011254:	898a      	ldrh	r2, [r1, #12]
 8011256:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801125a:	d026      	beq.n	80112aa <__ssputs_r+0x6a>
 801125c:	6965      	ldr	r5, [r4, #20]
 801125e:	6909      	ldr	r1, [r1, #16]
 8011260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011264:	eba3 0901 	sub.w	r9, r3, r1
 8011268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801126c:	1c7b      	adds	r3, r7, #1
 801126e:	444b      	add	r3, r9
 8011270:	106d      	asrs	r5, r5, #1
 8011272:	429d      	cmp	r5, r3
 8011274:	bf38      	it	cc
 8011276:	461d      	movcc	r5, r3
 8011278:	0553      	lsls	r3, r2, #21
 801127a:	d527      	bpl.n	80112cc <__ssputs_r+0x8c>
 801127c:	4629      	mov	r1, r5
 801127e:	f7ff fe5d 	bl	8010f3c <_malloc_r>
 8011282:	4606      	mov	r6, r0
 8011284:	b360      	cbz	r0, 80112e0 <__ssputs_r+0xa0>
 8011286:	6921      	ldr	r1, [r4, #16]
 8011288:	464a      	mov	r2, r9
 801128a:	f7ff ff7f 	bl	801118c <memcpy>
 801128e:	89a3      	ldrh	r3, [r4, #12]
 8011290:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011298:	81a3      	strh	r3, [r4, #12]
 801129a:	6126      	str	r6, [r4, #16]
 801129c:	6165      	str	r5, [r4, #20]
 801129e:	444e      	add	r6, r9
 80112a0:	eba5 0509 	sub.w	r5, r5, r9
 80112a4:	6026      	str	r6, [r4, #0]
 80112a6:	60a5      	str	r5, [r4, #8]
 80112a8:	463e      	mov	r6, r7
 80112aa:	42be      	cmp	r6, r7
 80112ac:	d900      	bls.n	80112b0 <__ssputs_r+0x70>
 80112ae:	463e      	mov	r6, r7
 80112b0:	6820      	ldr	r0, [r4, #0]
 80112b2:	4632      	mov	r2, r6
 80112b4:	4641      	mov	r1, r8
 80112b6:	f000 faab 	bl	8011810 <memmove>
 80112ba:	68a3      	ldr	r3, [r4, #8]
 80112bc:	1b9b      	subs	r3, r3, r6
 80112be:	60a3      	str	r3, [r4, #8]
 80112c0:	6823      	ldr	r3, [r4, #0]
 80112c2:	4433      	add	r3, r6
 80112c4:	6023      	str	r3, [r4, #0]
 80112c6:	2000      	movs	r0, #0
 80112c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112cc:	462a      	mov	r2, r5
 80112ce:	f000 fab9 	bl	8011844 <_realloc_r>
 80112d2:	4606      	mov	r6, r0
 80112d4:	2800      	cmp	r0, #0
 80112d6:	d1e0      	bne.n	801129a <__ssputs_r+0x5a>
 80112d8:	6921      	ldr	r1, [r4, #16]
 80112da:	4650      	mov	r0, sl
 80112dc:	f7ff ff64 	bl	80111a8 <_free_r>
 80112e0:	230c      	movs	r3, #12
 80112e2:	f8ca 3000 	str.w	r3, [sl]
 80112e6:	89a3      	ldrh	r3, [r4, #12]
 80112e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112ec:	81a3      	strh	r3, [r4, #12]
 80112ee:	f04f 30ff 	mov.w	r0, #4294967295
 80112f2:	e7e9      	b.n	80112c8 <__ssputs_r+0x88>

080112f4 <_svfiprintf_r>:
 80112f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f8:	4698      	mov	r8, r3
 80112fa:	898b      	ldrh	r3, [r1, #12]
 80112fc:	061b      	lsls	r3, r3, #24
 80112fe:	b09d      	sub	sp, #116	; 0x74
 8011300:	4607      	mov	r7, r0
 8011302:	460d      	mov	r5, r1
 8011304:	4614      	mov	r4, r2
 8011306:	d50e      	bpl.n	8011326 <_svfiprintf_r+0x32>
 8011308:	690b      	ldr	r3, [r1, #16]
 801130a:	b963      	cbnz	r3, 8011326 <_svfiprintf_r+0x32>
 801130c:	2140      	movs	r1, #64	; 0x40
 801130e:	f7ff fe15 	bl	8010f3c <_malloc_r>
 8011312:	6028      	str	r0, [r5, #0]
 8011314:	6128      	str	r0, [r5, #16]
 8011316:	b920      	cbnz	r0, 8011322 <_svfiprintf_r+0x2e>
 8011318:	230c      	movs	r3, #12
 801131a:	603b      	str	r3, [r7, #0]
 801131c:	f04f 30ff 	mov.w	r0, #4294967295
 8011320:	e0d0      	b.n	80114c4 <_svfiprintf_r+0x1d0>
 8011322:	2340      	movs	r3, #64	; 0x40
 8011324:	616b      	str	r3, [r5, #20]
 8011326:	2300      	movs	r3, #0
 8011328:	9309      	str	r3, [sp, #36]	; 0x24
 801132a:	2320      	movs	r3, #32
 801132c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011330:	f8cd 800c 	str.w	r8, [sp, #12]
 8011334:	2330      	movs	r3, #48	; 0x30
 8011336:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80114dc <_svfiprintf_r+0x1e8>
 801133a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801133e:	f04f 0901 	mov.w	r9, #1
 8011342:	4623      	mov	r3, r4
 8011344:	469a      	mov	sl, r3
 8011346:	f813 2b01 	ldrb.w	r2, [r3], #1
 801134a:	b10a      	cbz	r2, 8011350 <_svfiprintf_r+0x5c>
 801134c:	2a25      	cmp	r2, #37	; 0x25
 801134e:	d1f9      	bne.n	8011344 <_svfiprintf_r+0x50>
 8011350:	ebba 0b04 	subs.w	fp, sl, r4
 8011354:	d00b      	beq.n	801136e <_svfiprintf_r+0x7a>
 8011356:	465b      	mov	r3, fp
 8011358:	4622      	mov	r2, r4
 801135a:	4629      	mov	r1, r5
 801135c:	4638      	mov	r0, r7
 801135e:	f7ff ff6f 	bl	8011240 <__ssputs_r>
 8011362:	3001      	adds	r0, #1
 8011364:	f000 80a9 	beq.w	80114ba <_svfiprintf_r+0x1c6>
 8011368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801136a:	445a      	add	r2, fp
 801136c:	9209      	str	r2, [sp, #36]	; 0x24
 801136e:	f89a 3000 	ldrb.w	r3, [sl]
 8011372:	2b00      	cmp	r3, #0
 8011374:	f000 80a1 	beq.w	80114ba <_svfiprintf_r+0x1c6>
 8011378:	2300      	movs	r3, #0
 801137a:	f04f 32ff 	mov.w	r2, #4294967295
 801137e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011382:	f10a 0a01 	add.w	sl, sl, #1
 8011386:	9304      	str	r3, [sp, #16]
 8011388:	9307      	str	r3, [sp, #28]
 801138a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801138e:	931a      	str	r3, [sp, #104]	; 0x68
 8011390:	4654      	mov	r4, sl
 8011392:	2205      	movs	r2, #5
 8011394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011398:	4850      	ldr	r0, [pc, #320]	; (80114dc <_svfiprintf_r+0x1e8>)
 801139a:	f7ee ff29 	bl	80001f0 <memchr>
 801139e:	9a04      	ldr	r2, [sp, #16]
 80113a0:	b9d8      	cbnz	r0, 80113da <_svfiprintf_r+0xe6>
 80113a2:	06d0      	lsls	r0, r2, #27
 80113a4:	bf44      	itt	mi
 80113a6:	2320      	movmi	r3, #32
 80113a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113ac:	0711      	lsls	r1, r2, #28
 80113ae:	bf44      	itt	mi
 80113b0:	232b      	movmi	r3, #43	; 0x2b
 80113b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113b6:	f89a 3000 	ldrb.w	r3, [sl]
 80113ba:	2b2a      	cmp	r3, #42	; 0x2a
 80113bc:	d015      	beq.n	80113ea <_svfiprintf_r+0xf6>
 80113be:	9a07      	ldr	r2, [sp, #28]
 80113c0:	4654      	mov	r4, sl
 80113c2:	2000      	movs	r0, #0
 80113c4:	f04f 0c0a 	mov.w	ip, #10
 80113c8:	4621      	mov	r1, r4
 80113ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113ce:	3b30      	subs	r3, #48	; 0x30
 80113d0:	2b09      	cmp	r3, #9
 80113d2:	d94d      	bls.n	8011470 <_svfiprintf_r+0x17c>
 80113d4:	b1b0      	cbz	r0, 8011404 <_svfiprintf_r+0x110>
 80113d6:	9207      	str	r2, [sp, #28]
 80113d8:	e014      	b.n	8011404 <_svfiprintf_r+0x110>
 80113da:	eba0 0308 	sub.w	r3, r0, r8
 80113de:	fa09 f303 	lsl.w	r3, r9, r3
 80113e2:	4313      	orrs	r3, r2
 80113e4:	9304      	str	r3, [sp, #16]
 80113e6:	46a2      	mov	sl, r4
 80113e8:	e7d2      	b.n	8011390 <_svfiprintf_r+0x9c>
 80113ea:	9b03      	ldr	r3, [sp, #12]
 80113ec:	1d19      	adds	r1, r3, #4
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	9103      	str	r1, [sp, #12]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	bfbb      	ittet	lt
 80113f6:	425b      	neglt	r3, r3
 80113f8:	f042 0202 	orrlt.w	r2, r2, #2
 80113fc:	9307      	strge	r3, [sp, #28]
 80113fe:	9307      	strlt	r3, [sp, #28]
 8011400:	bfb8      	it	lt
 8011402:	9204      	strlt	r2, [sp, #16]
 8011404:	7823      	ldrb	r3, [r4, #0]
 8011406:	2b2e      	cmp	r3, #46	; 0x2e
 8011408:	d10c      	bne.n	8011424 <_svfiprintf_r+0x130>
 801140a:	7863      	ldrb	r3, [r4, #1]
 801140c:	2b2a      	cmp	r3, #42	; 0x2a
 801140e:	d134      	bne.n	801147a <_svfiprintf_r+0x186>
 8011410:	9b03      	ldr	r3, [sp, #12]
 8011412:	1d1a      	adds	r2, r3, #4
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	9203      	str	r2, [sp, #12]
 8011418:	2b00      	cmp	r3, #0
 801141a:	bfb8      	it	lt
 801141c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011420:	3402      	adds	r4, #2
 8011422:	9305      	str	r3, [sp, #20]
 8011424:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80114ec <_svfiprintf_r+0x1f8>
 8011428:	7821      	ldrb	r1, [r4, #0]
 801142a:	2203      	movs	r2, #3
 801142c:	4650      	mov	r0, sl
 801142e:	f7ee fedf 	bl	80001f0 <memchr>
 8011432:	b138      	cbz	r0, 8011444 <_svfiprintf_r+0x150>
 8011434:	9b04      	ldr	r3, [sp, #16]
 8011436:	eba0 000a 	sub.w	r0, r0, sl
 801143a:	2240      	movs	r2, #64	; 0x40
 801143c:	4082      	lsls	r2, r0
 801143e:	4313      	orrs	r3, r2
 8011440:	3401      	adds	r4, #1
 8011442:	9304      	str	r3, [sp, #16]
 8011444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011448:	4825      	ldr	r0, [pc, #148]	; (80114e0 <_svfiprintf_r+0x1ec>)
 801144a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801144e:	2206      	movs	r2, #6
 8011450:	f7ee fece 	bl	80001f0 <memchr>
 8011454:	2800      	cmp	r0, #0
 8011456:	d038      	beq.n	80114ca <_svfiprintf_r+0x1d6>
 8011458:	4b22      	ldr	r3, [pc, #136]	; (80114e4 <_svfiprintf_r+0x1f0>)
 801145a:	bb1b      	cbnz	r3, 80114a4 <_svfiprintf_r+0x1b0>
 801145c:	9b03      	ldr	r3, [sp, #12]
 801145e:	3307      	adds	r3, #7
 8011460:	f023 0307 	bic.w	r3, r3, #7
 8011464:	3308      	adds	r3, #8
 8011466:	9303      	str	r3, [sp, #12]
 8011468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801146a:	4433      	add	r3, r6
 801146c:	9309      	str	r3, [sp, #36]	; 0x24
 801146e:	e768      	b.n	8011342 <_svfiprintf_r+0x4e>
 8011470:	fb0c 3202 	mla	r2, ip, r2, r3
 8011474:	460c      	mov	r4, r1
 8011476:	2001      	movs	r0, #1
 8011478:	e7a6      	b.n	80113c8 <_svfiprintf_r+0xd4>
 801147a:	2300      	movs	r3, #0
 801147c:	3401      	adds	r4, #1
 801147e:	9305      	str	r3, [sp, #20]
 8011480:	4619      	mov	r1, r3
 8011482:	f04f 0c0a 	mov.w	ip, #10
 8011486:	4620      	mov	r0, r4
 8011488:	f810 2b01 	ldrb.w	r2, [r0], #1
 801148c:	3a30      	subs	r2, #48	; 0x30
 801148e:	2a09      	cmp	r2, #9
 8011490:	d903      	bls.n	801149a <_svfiprintf_r+0x1a6>
 8011492:	2b00      	cmp	r3, #0
 8011494:	d0c6      	beq.n	8011424 <_svfiprintf_r+0x130>
 8011496:	9105      	str	r1, [sp, #20]
 8011498:	e7c4      	b.n	8011424 <_svfiprintf_r+0x130>
 801149a:	fb0c 2101 	mla	r1, ip, r1, r2
 801149e:	4604      	mov	r4, r0
 80114a0:	2301      	movs	r3, #1
 80114a2:	e7f0      	b.n	8011486 <_svfiprintf_r+0x192>
 80114a4:	ab03      	add	r3, sp, #12
 80114a6:	9300      	str	r3, [sp, #0]
 80114a8:	462a      	mov	r2, r5
 80114aa:	4b0f      	ldr	r3, [pc, #60]	; (80114e8 <_svfiprintf_r+0x1f4>)
 80114ac:	a904      	add	r1, sp, #16
 80114ae:	4638      	mov	r0, r7
 80114b0:	f3af 8000 	nop.w
 80114b4:	1c42      	adds	r2, r0, #1
 80114b6:	4606      	mov	r6, r0
 80114b8:	d1d6      	bne.n	8011468 <_svfiprintf_r+0x174>
 80114ba:	89ab      	ldrh	r3, [r5, #12]
 80114bc:	065b      	lsls	r3, r3, #25
 80114be:	f53f af2d 	bmi.w	801131c <_svfiprintf_r+0x28>
 80114c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114c4:	b01d      	add	sp, #116	; 0x74
 80114c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ca:	ab03      	add	r3, sp, #12
 80114cc:	9300      	str	r3, [sp, #0]
 80114ce:	462a      	mov	r2, r5
 80114d0:	4b05      	ldr	r3, [pc, #20]	; (80114e8 <_svfiprintf_r+0x1f4>)
 80114d2:	a904      	add	r1, sp, #16
 80114d4:	4638      	mov	r0, r7
 80114d6:	f000 f879 	bl	80115cc <_printf_i>
 80114da:	e7eb      	b.n	80114b4 <_svfiprintf_r+0x1c0>
 80114dc:	08011f24 	.word	0x08011f24
 80114e0:	08011f2e 	.word	0x08011f2e
 80114e4:	00000000 	.word	0x00000000
 80114e8:	08011241 	.word	0x08011241
 80114ec:	08011f2a 	.word	0x08011f2a

080114f0 <_printf_common>:
 80114f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114f4:	4616      	mov	r6, r2
 80114f6:	4699      	mov	r9, r3
 80114f8:	688a      	ldr	r2, [r1, #8]
 80114fa:	690b      	ldr	r3, [r1, #16]
 80114fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011500:	4293      	cmp	r3, r2
 8011502:	bfb8      	it	lt
 8011504:	4613      	movlt	r3, r2
 8011506:	6033      	str	r3, [r6, #0]
 8011508:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801150c:	4607      	mov	r7, r0
 801150e:	460c      	mov	r4, r1
 8011510:	b10a      	cbz	r2, 8011516 <_printf_common+0x26>
 8011512:	3301      	adds	r3, #1
 8011514:	6033      	str	r3, [r6, #0]
 8011516:	6823      	ldr	r3, [r4, #0]
 8011518:	0699      	lsls	r1, r3, #26
 801151a:	bf42      	ittt	mi
 801151c:	6833      	ldrmi	r3, [r6, #0]
 801151e:	3302      	addmi	r3, #2
 8011520:	6033      	strmi	r3, [r6, #0]
 8011522:	6825      	ldr	r5, [r4, #0]
 8011524:	f015 0506 	ands.w	r5, r5, #6
 8011528:	d106      	bne.n	8011538 <_printf_common+0x48>
 801152a:	f104 0a19 	add.w	sl, r4, #25
 801152e:	68e3      	ldr	r3, [r4, #12]
 8011530:	6832      	ldr	r2, [r6, #0]
 8011532:	1a9b      	subs	r3, r3, r2
 8011534:	42ab      	cmp	r3, r5
 8011536:	dc26      	bgt.n	8011586 <_printf_common+0x96>
 8011538:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801153c:	1e13      	subs	r3, r2, #0
 801153e:	6822      	ldr	r2, [r4, #0]
 8011540:	bf18      	it	ne
 8011542:	2301      	movne	r3, #1
 8011544:	0692      	lsls	r2, r2, #26
 8011546:	d42b      	bmi.n	80115a0 <_printf_common+0xb0>
 8011548:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801154c:	4649      	mov	r1, r9
 801154e:	4638      	mov	r0, r7
 8011550:	47c0      	blx	r8
 8011552:	3001      	adds	r0, #1
 8011554:	d01e      	beq.n	8011594 <_printf_common+0xa4>
 8011556:	6823      	ldr	r3, [r4, #0]
 8011558:	6922      	ldr	r2, [r4, #16]
 801155a:	f003 0306 	and.w	r3, r3, #6
 801155e:	2b04      	cmp	r3, #4
 8011560:	bf02      	ittt	eq
 8011562:	68e5      	ldreq	r5, [r4, #12]
 8011564:	6833      	ldreq	r3, [r6, #0]
 8011566:	1aed      	subeq	r5, r5, r3
 8011568:	68a3      	ldr	r3, [r4, #8]
 801156a:	bf0c      	ite	eq
 801156c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011570:	2500      	movne	r5, #0
 8011572:	4293      	cmp	r3, r2
 8011574:	bfc4      	itt	gt
 8011576:	1a9b      	subgt	r3, r3, r2
 8011578:	18ed      	addgt	r5, r5, r3
 801157a:	2600      	movs	r6, #0
 801157c:	341a      	adds	r4, #26
 801157e:	42b5      	cmp	r5, r6
 8011580:	d11a      	bne.n	80115b8 <_printf_common+0xc8>
 8011582:	2000      	movs	r0, #0
 8011584:	e008      	b.n	8011598 <_printf_common+0xa8>
 8011586:	2301      	movs	r3, #1
 8011588:	4652      	mov	r2, sl
 801158a:	4649      	mov	r1, r9
 801158c:	4638      	mov	r0, r7
 801158e:	47c0      	blx	r8
 8011590:	3001      	adds	r0, #1
 8011592:	d103      	bne.n	801159c <_printf_common+0xac>
 8011594:	f04f 30ff 	mov.w	r0, #4294967295
 8011598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801159c:	3501      	adds	r5, #1
 801159e:	e7c6      	b.n	801152e <_printf_common+0x3e>
 80115a0:	18e1      	adds	r1, r4, r3
 80115a2:	1c5a      	adds	r2, r3, #1
 80115a4:	2030      	movs	r0, #48	; 0x30
 80115a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80115aa:	4422      	add	r2, r4
 80115ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80115b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80115b4:	3302      	adds	r3, #2
 80115b6:	e7c7      	b.n	8011548 <_printf_common+0x58>
 80115b8:	2301      	movs	r3, #1
 80115ba:	4622      	mov	r2, r4
 80115bc:	4649      	mov	r1, r9
 80115be:	4638      	mov	r0, r7
 80115c0:	47c0      	blx	r8
 80115c2:	3001      	adds	r0, #1
 80115c4:	d0e6      	beq.n	8011594 <_printf_common+0xa4>
 80115c6:	3601      	adds	r6, #1
 80115c8:	e7d9      	b.n	801157e <_printf_common+0x8e>
	...

080115cc <_printf_i>:
 80115cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115d0:	7e0f      	ldrb	r7, [r1, #24]
 80115d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80115d4:	2f78      	cmp	r7, #120	; 0x78
 80115d6:	4691      	mov	r9, r2
 80115d8:	4680      	mov	r8, r0
 80115da:	460c      	mov	r4, r1
 80115dc:	469a      	mov	sl, r3
 80115de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80115e2:	d807      	bhi.n	80115f4 <_printf_i+0x28>
 80115e4:	2f62      	cmp	r7, #98	; 0x62
 80115e6:	d80a      	bhi.n	80115fe <_printf_i+0x32>
 80115e8:	2f00      	cmp	r7, #0
 80115ea:	f000 80d4 	beq.w	8011796 <_printf_i+0x1ca>
 80115ee:	2f58      	cmp	r7, #88	; 0x58
 80115f0:	f000 80c0 	beq.w	8011774 <_printf_i+0x1a8>
 80115f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80115fc:	e03a      	b.n	8011674 <_printf_i+0xa8>
 80115fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011602:	2b15      	cmp	r3, #21
 8011604:	d8f6      	bhi.n	80115f4 <_printf_i+0x28>
 8011606:	a101      	add	r1, pc, #4	; (adr r1, 801160c <_printf_i+0x40>)
 8011608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801160c:	08011665 	.word	0x08011665
 8011610:	08011679 	.word	0x08011679
 8011614:	080115f5 	.word	0x080115f5
 8011618:	080115f5 	.word	0x080115f5
 801161c:	080115f5 	.word	0x080115f5
 8011620:	080115f5 	.word	0x080115f5
 8011624:	08011679 	.word	0x08011679
 8011628:	080115f5 	.word	0x080115f5
 801162c:	080115f5 	.word	0x080115f5
 8011630:	080115f5 	.word	0x080115f5
 8011634:	080115f5 	.word	0x080115f5
 8011638:	0801177d 	.word	0x0801177d
 801163c:	080116a5 	.word	0x080116a5
 8011640:	08011737 	.word	0x08011737
 8011644:	080115f5 	.word	0x080115f5
 8011648:	080115f5 	.word	0x080115f5
 801164c:	0801179f 	.word	0x0801179f
 8011650:	080115f5 	.word	0x080115f5
 8011654:	080116a5 	.word	0x080116a5
 8011658:	080115f5 	.word	0x080115f5
 801165c:	080115f5 	.word	0x080115f5
 8011660:	0801173f 	.word	0x0801173f
 8011664:	682b      	ldr	r3, [r5, #0]
 8011666:	1d1a      	adds	r2, r3, #4
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	602a      	str	r2, [r5, #0]
 801166c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011674:	2301      	movs	r3, #1
 8011676:	e09f      	b.n	80117b8 <_printf_i+0x1ec>
 8011678:	6820      	ldr	r0, [r4, #0]
 801167a:	682b      	ldr	r3, [r5, #0]
 801167c:	0607      	lsls	r7, r0, #24
 801167e:	f103 0104 	add.w	r1, r3, #4
 8011682:	6029      	str	r1, [r5, #0]
 8011684:	d501      	bpl.n	801168a <_printf_i+0xbe>
 8011686:	681e      	ldr	r6, [r3, #0]
 8011688:	e003      	b.n	8011692 <_printf_i+0xc6>
 801168a:	0646      	lsls	r6, r0, #25
 801168c:	d5fb      	bpl.n	8011686 <_printf_i+0xba>
 801168e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011692:	2e00      	cmp	r6, #0
 8011694:	da03      	bge.n	801169e <_printf_i+0xd2>
 8011696:	232d      	movs	r3, #45	; 0x2d
 8011698:	4276      	negs	r6, r6
 801169a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801169e:	485a      	ldr	r0, [pc, #360]	; (8011808 <_printf_i+0x23c>)
 80116a0:	230a      	movs	r3, #10
 80116a2:	e012      	b.n	80116ca <_printf_i+0xfe>
 80116a4:	682b      	ldr	r3, [r5, #0]
 80116a6:	6820      	ldr	r0, [r4, #0]
 80116a8:	1d19      	adds	r1, r3, #4
 80116aa:	6029      	str	r1, [r5, #0]
 80116ac:	0605      	lsls	r5, r0, #24
 80116ae:	d501      	bpl.n	80116b4 <_printf_i+0xe8>
 80116b0:	681e      	ldr	r6, [r3, #0]
 80116b2:	e002      	b.n	80116ba <_printf_i+0xee>
 80116b4:	0641      	lsls	r1, r0, #25
 80116b6:	d5fb      	bpl.n	80116b0 <_printf_i+0xe4>
 80116b8:	881e      	ldrh	r6, [r3, #0]
 80116ba:	4853      	ldr	r0, [pc, #332]	; (8011808 <_printf_i+0x23c>)
 80116bc:	2f6f      	cmp	r7, #111	; 0x6f
 80116be:	bf0c      	ite	eq
 80116c0:	2308      	moveq	r3, #8
 80116c2:	230a      	movne	r3, #10
 80116c4:	2100      	movs	r1, #0
 80116c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80116ca:	6865      	ldr	r5, [r4, #4]
 80116cc:	60a5      	str	r5, [r4, #8]
 80116ce:	2d00      	cmp	r5, #0
 80116d0:	bfa2      	ittt	ge
 80116d2:	6821      	ldrge	r1, [r4, #0]
 80116d4:	f021 0104 	bicge.w	r1, r1, #4
 80116d8:	6021      	strge	r1, [r4, #0]
 80116da:	b90e      	cbnz	r6, 80116e0 <_printf_i+0x114>
 80116dc:	2d00      	cmp	r5, #0
 80116de:	d04b      	beq.n	8011778 <_printf_i+0x1ac>
 80116e0:	4615      	mov	r5, r2
 80116e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80116e6:	fb03 6711 	mls	r7, r3, r1, r6
 80116ea:	5dc7      	ldrb	r7, [r0, r7]
 80116ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80116f0:	4637      	mov	r7, r6
 80116f2:	42bb      	cmp	r3, r7
 80116f4:	460e      	mov	r6, r1
 80116f6:	d9f4      	bls.n	80116e2 <_printf_i+0x116>
 80116f8:	2b08      	cmp	r3, #8
 80116fa:	d10b      	bne.n	8011714 <_printf_i+0x148>
 80116fc:	6823      	ldr	r3, [r4, #0]
 80116fe:	07de      	lsls	r6, r3, #31
 8011700:	d508      	bpl.n	8011714 <_printf_i+0x148>
 8011702:	6923      	ldr	r3, [r4, #16]
 8011704:	6861      	ldr	r1, [r4, #4]
 8011706:	4299      	cmp	r1, r3
 8011708:	bfde      	ittt	le
 801170a:	2330      	movle	r3, #48	; 0x30
 801170c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011710:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011714:	1b52      	subs	r2, r2, r5
 8011716:	6122      	str	r2, [r4, #16]
 8011718:	f8cd a000 	str.w	sl, [sp]
 801171c:	464b      	mov	r3, r9
 801171e:	aa03      	add	r2, sp, #12
 8011720:	4621      	mov	r1, r4
 8011722:	4640      	mov	r0, r8
 8011724:	f7ff fee4 	bl	80114f0 <_printf_common>
 8011728:	3001      	adds	r0, #1
 801172a:	d14a      	bne.n	80117c2 <_printf_i+0x1f6>
 801172c:	f04f 30ff 	mov.w	r0, #4294967295
 8011730:	b004      	add	sp, #16
 8011732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011736:	6823      	ldr	r3, [r4, #0]
 8011738:	f043 0320 	orr.w	r3, r3, #32
 801173c:	6023      	str	r3, [r4, #0]
 801173e:	4833      	ldr	r0, [pc, #204]	; (801180c <_printf_i+0x240>)
 8011740:	2778      	movs	r7, #120	; 0x78
 8011742:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011746:	6823      	ldr	r3, [r4, #0]
 8011748:	6829      	ldr	r1, [r5, #0]
 801174a:	061f      	lsls	r7, r3, #24
 801174c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011750:	d402      	bmi.n	8011758 <_printf_i+0x18c>
 8011752:	065f      	lsls	r7, r3, #25
 8011754:	bf48      	it	mi
 8011756:	b2b6      	uxthmi	r6, r6
 8011758:	07df      	lsls	r7, r3, #31
 801175a:	bf48      	it	mi
 801175c:	f043 0320 	orrmi.w	r3, r3, #32
 8011760:	6029      	str	r1, [r5, #0]
 8011762:	bf48      	it	mi
 8011764:	6023      	strmi	r3, [r4, #0]
 8011766:	b91e      	cbnz	r6, 8011770 <_printf_i+0x1a4>
 8011768:	6823      	ldr	r3, [r4, #0]
 801176a:	f023 0320 	bic.w	r3, r3, #32
 801176e:	6023      	str	r3, [r4, #0]
 8011770:	2310      	movs	r3, #16
 8011772:	e7a7      	b.n	80116c4 <_printf_i+0xf8>
 8011774:	4824      	ldr	r0, [pc, #144]	; (8011808 <_printf_i+0x23c>)
 8011776:	e7e4      	b.n	8011742 <_printf_i+0x176>
 8011778:	4615      	mov	r5, r2
 801177a:	e7bd      	b.n	80116f8 <_printf_i+0x12c>
 801177c:	682b      	ldr	r3, [r5, #0]
 801177e:	6826      	ldr	r6, [r4, #0]
 8011780:	6961      	ldr	r1, [r4, #20]
 8011782:	1d18      	adds	r0, r3, #4
 8011784:	6028      	str	r0, [r5, #0]
 8011786:	0635      	lsls	r5, r6, #24
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	d501      	bpl.n	8011790 <_printf_i+0x1c4>
 801178c:	6019      	str	r1, [r3, #0]
 801178e:	e002      	b.n	8011796 <_printf_i+0x1ca>
 8011790:	0670      	lsls	r0, r6, #25
 8011792:	d5fb      	bpl.n	801178c <_printf_i+0x1c0>
 8011794:	8019      	strh	r1, [r3, #0]
 8011796:	2300      	movs	r3, #0
 8011798:	6123      	str	r3, [r4, #16]
 801179a:	4615      	mov	r5, r2
 801179c:	e7bc      	b.n	8011718 <_printf_i+0x14c>
 801179e:	682b      	ldr	r3, [r5, #0]
 80117a0:	1d1a      	adds	r2, r3, #4
 80117a2:	602a      	str	r2, [r5, #0]
 80117a4:	681d      	ldr	r5, [r3, #0]
 80117a6:	6862      	ldr	r2, [r4, #4]
 80117a8:	2100      	movs	r1, #0
 80117aa:	4628      	mov	r0, r5
 80117ac:	f7ee fd20 	bl	80001f0 <memchr>
 80117b0:	b108      	cbz	r0, 80117b6 <_printf_i+0x1ea>
 80117b2:	1b40      	subs	r0, r0, r5
 80117b4:	6060      	str	r0, [r4, #4]
 80117b6:	6863      	ldr	r3, [r4, #4]
 80117b8:	6123      	str	r3, [r4, #16]
 80117ba:	2300      	movs	r3, #0
 80117bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117c0:	e7aa      	b.n	8011718 <_printf_i+0x14c>
 80117c2:	6923      	ldr	r3, [r4, #16]
 80117c4:	462a      	mov	r2, r5
 80117c6:	4649      	mov	r1, r9
 80117c8:	4640      	mov	r0, r8
 80117ca:	47d0      	blx	sl
 80117cc:	3001      	adds	r0, #1
 80117ce:	d0ad      	beq.n	801172c <_printf_i+0x160>
 80117d0:	6823      	ldr	r3, [r4, #0]
 80117d2:	079b      	lsls	r3, r3, #30
 80117d4:	d413      	bmi.n	80117fe <_printf_i+0x232>
 80117d6:	68e0      	ldr	r0, [r4, #12]
 80117d8:	9b03      	ldr	r3, [sp, #12]
 80117da:	4298      	cmp	r0, r3
 80117dc:	bfb8      	it	lt
 80117de:	4618      	movlt	r0, r3
 80117e0:	e7a6      	b.n	8011730 <_printf_i+0x164>
 80117e2:	2301      	movs	r3, #1
 80117e4:	4632      	mov	r2, r6
 80117e6:	4649      	mov	r1, r9
 80117e8:	4640      	mov	r0, r8
 80117ea:	47d0      	blx	sl
 80117ec:	3001      	adds	r0, #1
 80117ee:	d09d      	beq.n	801172c <_printf_i+0x160>
 80117f0:	3501      	adds	r5, #1
 80117f2:	68e3      	ldr	r3, [r4, #12]
 80117f4:	9903      	ldr	r1, [sp, #12]
 80117f6:	1a5b      	subs	r3, r3, r1
 80117f8:	42ab      	cmp	r3, r5
 80117fa:	dcf2      	bgt.n	80117e2 <_printf_i+0x216>
 80117fc:	e7eb      	b.n	80117d6 <_printf_i+0x20a>
 80117fe:	2500      	movs	r5, #0
 8011800:	f104 0619 	add.w	r6, r4, #25
 8011804:	e7f5      	b.n	80117f2 <_printf_i+0x226>
 8011806:	bf00      	nop
 8011808:	08011f35 	.word	0x08011f35
 801180c:	08011f46 	.word	0x08011f46

08011810 <memmove>:
 8011810:	4288      	cmp	r0, r1
 8011812:	b510      	push	{r4, lr}
 8011814:	eb01 0402 	add.w	r4, r1, r2
 8011818:	d902      	bls.n	8011820 <memmove+0x10>
 801181a:	4284      	cmp	r4, r0
 801181c:	4623      	mov	r3, r4
 801181e:	d807      	bhi.n	8011830 <memmove+0x20>
 8011820:	1e43      	subs	r3, r0, #1
 8011822:	42a1      	cmp	r1, r4
 8011824:	d008      	beq.n	8011838 <memmove+0x28>
 8011826:	f811 2b01 	ldrb.w	r2, [r1], #1
 801182a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801182e:	e7f8      	b.n	8011822 <memmove+0x12>
 8011830:	4402      	add	r2, r0
 8011832:	4601      	mov	r1, r0
 8011834:	428a      	cmp	r2, r1
 8011836:	d100      	bne.n	801183a <memmove+0x2a>
 8011838:	bd10      	pop	{r4, pc}
 801183a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801183e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011842:	e7f7      	b.n	8011834 <memmove+0x24>

08011844 <_realloc_r>:
 8011844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011848:	4680      	mov	r8, r0
 801184a:	4614      	mov	r4, r2
 801184c:	460e      	mov	r6, r1
 801184e:	b921      	cbnz	r1, 801185a <_realloc_r+0x16>
 8011850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011854:	4611      	mov	r1, r2
 8011856:	f7ff bb71 	b.w	8010f3c <_malloc_r>
 801185a:	b92a      	cbnz	r2, 8011868 <_realloc_r+0x24>
 801185c:	f7ff fca4 	bl	80111a8 <_free_r>
 8011860:	4625      	mov	r5, r4
 8011862:	4628      	mov	r0, r5
 8011864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011868:	f000 f81b 	bl	80118a2 <_malloc_usable_size_r>
 801186c:	4284      	cmp	r4, r0
 801186e:	4607      	mov	r7, r0
 8011870:	d802      	bhi.n	8011878 <_realloc_r+0x34>
 8011872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011876:	d812      	bhi.n	801189e <_realloc_r+0x5a>
 8011878:	4621      	mov	r1, r4
 801187a:	4640      	mov	r0, r8
 801187c:	f7ff fb5e 	bl	8010f3c <_malloc_r>
 8011880:	4605      	mov	r5, r0
 8011882:	2800      	cmp	r0, #0
 8011884:	d0ed      	beq.n	8011862 <_realloc_r+0x1e>
 8011886:	42bc      	cmp	r4, r7
 8011888:	4622      	mov	r2, r4
 801188a:	4631      	mov	r1, r6
 801188c:	bf28      	it	cs
 801188e:	463a      	movcs	r2, r7
 8011890:	f7ff fc7c 	bl	801118c <memcpy>
 8011894:	4631      	mov	r1, r6
 8011896:	4640      	mov	r0, r8
 8011898:	f7ff fc86 	bl	80111a8 <_free_r>
 801189c:	e7e1      	b.n	8011862 <_realloc_r+0x1e>
 801189e:	4635      	mov	r5, r6
 80118a0:	e7df      	b.n	8011862 <_realloc_r+0x1e>

080118a2 <_malloc_usable_size_r>:
 80118a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118a6:	1f18      	subs	r0, r3, #4
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	bfbc      	itt	lt
 80118ac:	580b      	ldrlt	r3, [r1, r0]
 80118ae:	18c0      	addlt	r0, r0, r3
 80118b0:	4770      	bx	lr
	...

080118b4 <_init>:
 80118b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b6:	bf00      	nop
 80118b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118ba:	bc08      	pop	{r3}
 80118bc:	469e      	mov	lr, r3
 80118be:	4770      	bx	lr

080118c0 <_fini>:
 80118c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c2:	bf00      	nop
 80118c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118c6:	bc08      	pop	{r3}
 80118c8:	469e      	mov	lr, r3
 80118ca:	4770      	bx	lr
